
id: orchestrator

title: Orchestrator

sidebar_label: Orchestrator



## Orchestrator


id: platform

title: What
What is
is the
the Deity
Deity Platform?

hide_title: true



import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Badge
Badge from
from '@site/src/components/Badge';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';



<h1 className="headline
className="headline mb20">The
mb20">The flexible
flexible platform
platform that
that aligns
aligns perfectly
perfectly with
with your
your business
business needs</h1>

<p className="desc">Deity
className="desc">Deity Platform
Platform gives
gives you
you the
the power
power and
and flexibility
flexibility to
to create
create a
a seamless
seamless and
and engaging
engaging online
online shopping
shopping experience
experience for
for your
your customers.</p>


### Don't
Don't have
have an
an account
account yet?

<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

Sign up
up for
for an
an account
account &nbsp;

<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>



<div className="mb60"></div>





## Start
Start Right
Right Away
 
<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/platform/key-concepts">

<img src="/img/icons/info.svg"
src="/img/icons/info.svg" />

<h4>Key concepts</h4>

<p>Learn the
the basics
basics behind
behind Deity
Deity Platform.</p>


<Card to="/platform/getting-started">

<img src="/img/icons/lightning.svg"
src="/img/icons/lightning.svg" />

<h4>Getting started</h4>

<p>Jump right
right in
in and
and get
get started
started with
with Deity
Deity Platform.</p>


<Card to="/platform/support/tutorials">

<img src="/img/icons/lightbulb.svg"
src="/img/icons/lightbulb.svg" />


<p>Learn by
by doing
doing by
by following
following practical
practical tutorials.</p>






## Products


<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/composer">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<p>Compose outstanding
outstanding digital
digital experiences
experiences to
to achieve
achieve transactional
transactional excellence.</p>


<Card to="/storefront">

<img src="/img/icons/data.svg"
src="/img/icons/data.svg" />


<p>Focus on
on customer
customer experience
experience to
to exceed
exceed expectations.</p>


<Card to="/payments">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<p>Integrate multiple
multiple payment
payment service
service providers
providers to
to use
use any
any payment
payment method.</p>


<Card to="/console">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />

<h4>Cloud Console</h4>

<p>Manage your
your subscriptions,
subscriptions, users,
users, deployments,
deployments, integrations
integrations and
and more
more with
with our
our web-based
web-based application.</p>






## Integrations


import IntegrationContent
IntegrationContent from
from "./integrations.mdx"


<IntegrationContent />
id: key-concepts

title: Key
Key Concepts

sidebar_label: Key
Key Concepts



## Management
Management your
your payment
payment configuration


The payment
payment configuration,
configuration, including
including providers,
providers, methods,
methods, payments
payments and
and orders,
orders, can
can be
be done
done using
using our
our `dcloud`
`dcloud` CLI
CLI tool.
tool. The
The configuration
configuration process
process is
is described
described in
in the
the [Configuration](/dpsg/docs/getting-started/config)
[Configuration](/dpsg/docs/getting-started/config) section.
section. `dcloud`
`dcloud` interacts
interacts with
with the
the [management
[management endpoints](https://dpsg.deity.cloud/#/Management)
endpoints](https://dpsg.deity.cloud/#/Management) of
of DPSG.



## DPSG
DPSG interactions
interactions with
with your
your Falcon
Falcon app


Interacting with
with DPSG
DPSG is
is done
done through
through our
our `@deity/falcon-payment-service-module`
`@deity/falcon-payment-service-module` package.
package. This
This package
package interacts
interacts with
with DPSG
DPSG in
in two
two ways:

- Through
Through the
the `REST
`REST API`
API` client
client endpoints

- By
By listening
listening for
for events
events on
on the
the `RabbitMQ`
`RabbitMQ` instance



:::note Want
Want to
to integrate
integrate DPSG
DPSG yourself?

If you're
you're creating
creating a
a custom
custom integration
integration or
or want
want more
more details
details on
on how
how Falcon
Falcon Platform
Platform interacts
interacts with
with DPSG,
DPSG, please
please check
check out
out our
our [how
[how to](/dpsg/docs/getting-started/usage)
to](/dpsg/docs/getting-started/usage) guide.




### REST
REST Endpoints

Our `@deity/falcon-payment-service-module`
`@deity/falcon-payment-service-module` package
package interacts
interacts with
with DPSG
DPSG using
using our
our four
four client
client endpoints.
endpoints. The
The API
API Reference
Reference for
for the
the client
client endpoints
endpoints can
can be
be found
found [here](https://dpsg.dev.deity.cloud/).




This method
method is
is used
used to
to get
get a
a list
list of
of available
available payment
payment methods
methods based
based on
on an
an order
order payload.




This method
method returns
returns a
a single
single payment
payment method,
method, often
often with
with additional
additional configuration
configuration needed
needed to
to render
render client
client side
side components.




The validate
validate method
method is/should
is/should be
be triggered
triggered by
by the
the shop
shop element
element that
that places
places an
an order
order (e.g.
(e.g. a
a 'Place
'Place Order'
Order' button).
button). If
If validation
validation is
is successful,
successful, it
it results
results in
in an
an order
order being
being created
created in
in the
the shop
shop and
and the
the payment
payment provider.




This method
method is
is used
used for
for order
order updates
updates from
from the
the shop,
shop, e.g.
e.g. refunds
refunds or
or shipments.
shipments. The
The flow
flow is
is as
as follows:

1. Shop
Shop update
update (webhook)

2. Falcon
Falcon shop
shop endpoint
endpoint package

3. Falcon
Falcon shop
shop API
API package

4. Falcon
Falcon Payment
Payment Service
Service Client

5. DPSG
DPSG (message
(message queue)

6. Payment
Payment provider
provider (REST
(REST API)



### Events


`@deity/falcon-payment-service-module` also
also emits
emits an
an event
event based
based on
on updates
updates pushed
pushed to
to DPSG.
DPSG. This
This event
event is
is for
for payment
payment updates.




The payload
payload associated
associated with
with this
this event
event is:




"orderId": "string",
"string", //
// The
The shop
shop order
order ID
ID associated
associated with
with the
the payment
payment update

"status": "string",
"string", //
// payment
payment status

"payload": {}
{} //
// This
This additional
additional data
data is
is dependent
dependent on
on the
the payment
payment provider,
provider, it
it often
often contains
contains a
a payment
payment ID




id: 1-0-0

title: v1.0.0
v1.0.0 Release
Release Notes

sidebar_label: v1.0.0



id: full-changelog

title: Full
Full Changelog

sidebar_label: Full
Full Changelog



id: overview

title: Payment
Payment Methods
Methods Overview

sidebar_label: Payment
Payment Methods



Every payment
payment provider
provider has
has a
a specific
specific set
set of
of payment
payment methods
methods that
that it
it supports.
supports. The
The available
available methods
methods are
are listed
listed in
in the
the respective
respective `Payment
`Payment Providers`
Providers` documentation
documentation page.
page. Some
Some payment
payment methods
methods are
are available
available for
for more
more than
than one
one payment
payment provider,
provider, which
which allows
allows you
you to
to choose
choose the
the provider
provider that
that better
better fits
fits your
your needs.



## Payment
Payment Method
Method Configuration


The easiest
easiest way
way to
to configure
configure a
a payment
payment method
method is
is by
by using
using `dcloud`
`dcloud` CLI
CLI and
and the
the `dcloud
`dcloud payments:method:configure`
payments:method:configure` command.
command. If
If you
you want
want to
to configure
configure it
it manually,
manually, this
this can
can be
be achieved
achieved using
using [this
[this endpoint](https://dpsg.deity.cloud/#/Payment%20Method/EnvironmentPaymentMethodController_add).


The configuration
configuration allows
allows you
you to
to enable
enable a
a payment
payment method
method and
and configure
configure it
it to
to your
your need
need using
using our
our [configuration
[configuration features](/dpsg/docs/methods/features/currencies).




"methodId": "string",

"enabled": true,

"config": {

"title": "string",

"currencies": [



"countries": [



"sortOrder": [


"countries": [



"sortOrder": 0



"surcharge": [


"countries": [



"percentage": 0,

"fixed": [


"currency": "*",

"amount": 0





"minMaxAmounts": [


"currency": "*",

"min": 0,

"max": 0





id: currencies

title: Currency
Currency Specific
Specific Config

sidebar_label: Currency
Currency Specific
Specific Config



## Overview


Each payment
payment method
method can
can be
be enabled
enabled for
for only
only certain
certain currencies.
currencies. By
By default,
default, a
a new
new payment
payment method
method will
will be
be available
available for
for all
all currencies,
currencies, but
but by
by selecting
selecting a
a subset
subset of
of currencies,
currencies, the
the payment
payment method
method will
will only
only be
be shown
shown when
when one
one of
of the
the specified
specified currencies
currencies is
is selected.


## How
How to
to configure
configure currencies


All payment
payment method
method config
config can
can be
be done
done via
via our
our `dcloud`
`dcloud` cli
cli tool.

When configuring
configuring a
a new
new payment
payment method
method using
using `dcloud
`dcloud payments:method:configure`,
payments:method:configure`, a
a wizard
wizard is
is launched
launched to
to guide
guide you
you through
through the
the configuration
configuration process.


### Configuration
Configuration Options


Currencies should
should be
be passed
passed as
as an
an array
array to
to each
each payment
payment method
method on
on your
your environment.
  

`*` represents
represents all
all currencies.
currencies. If
If no
no currency
currency data
data is
is passed
passed the
the method
method will
will be
be enabled
enabled for
for all
all currencies
currencies (`*`).


:::note Not
Not all
all methods
methods showing

We allow
allow filtering
filtering of
of methods
methods based
based on
on currencies.
currencies. At
At the
the same
same time
time we
we also
also pass
pass the
the currency
currency code
code to
to each
each payment
payment provider.
provider. Meaning
Meaning that
that some
some methods,
methods, whilst
whilst enabled
enabled in
in DPSG,
DPSG, may
may not
not be
be available
available from
from the
the provider
provider itself.




"currencies": [





In the
the example
example above
above the
the method
method is
is enabled
enabled for
for Euro
Euro and
and US
US Dollar
Dollar only.


id: locations

title: Location
Location Specific
Specific Config

sidebar_label: Location
Location Specific
Specific Config



## Overview


Each payment
payment method
method can
can be
be enabled
enabled for
for only
only certain
certain country
country codes
codes (based
(based on
on the
the customers
customers billing
billing address).


## How
How to
to configure
configure country
country data


All payment
payment method
method config
config can
can be
be done
done via
via our
our `dcloud`
`dcloud` cli
cli tool.


### Configuration
Configuration Options


Countries should
should be
be passed
passed as
as an
an array
array to
to each
each payment
payment method
method on
on your
your environment.
  

`*` represents
represents all
all countries.
countries. If
If no
no country
country data
data is
is passed
passed the
the method
method will
will be
be enabled
enabled for
for all
all locations.


:::note Not
Not all
all methods
methods showing

We allow
allow filtering
filtering of
of methods
methods based
based on
on country
country codes.
codes. At
At the
the same
same time
time we
we also
also pass
pass country
country data
data to
to each
each payment
payment provider.
provider. Meaning
Meaning that
that some
some methods,
methods, whilst
whilst enabled
enabled in
in DPSG
DPSG may
may not
not be
be available
available from
from the
the provider
provider itself.




"countries": [





In the
the example
example above
above the
the method
method is
is enabled
enabled for
for the
the Netherlands
Netherlands and
and France
France only.


id: min-max-amounts

title: Min
Min /
/ Max
Max Amounts

sidebar_label: Min
Min /
/ Max
Max Amounts



## Overview


Each payment
payment method
method can
can be
be enabled
enabled for
for only
only certain
certain order
order amounts.
amounts. By
By default,
default, a
a new
new payment
payment method
method will
will be
be available
available for
for all
all order
order amounts,
amounts, but
but by
by specifying
specifying minimum
minimum and/or
and/or maximum
maximum order
order amounts
amounts per
per currency,
currency, a
a payment
payment method
method will
will only
only show
show when
when the
the order
order amount
amount and
and currency
currency match
match the
the specified
specified boundaries.


## How
How to
to configure
configure min/max
min/max amounts


All payment
payment method
method config
config can
can be
be done
done via
via our
our `dcloud`
`dcloud` cli
cli tool.

When configuring
configuring a
a new
new payment
payment method
method using
using `dcloud
`dcloud payments:method:configure`,
payments:method:configure`, a
a wizard
wizard is
is launched
launched to
to guide
guide you
you through
through the
the configuration
configuration process.

The intitial
intitial steps
steps before
before selecting
selecting the
the currencies
currencies are:

1. Select
Select an
an environment

2. Select
Select the
the configured
configured payment
payment provider

3. Select
Select the
the payment
payment method

4. Set
Set the
the name
name of
of the
the custom
custom payment
payment method

5. Select
Select the
the countries
countries for
for the
the payment
payment method
method ([Location
([Location Specific
Specific Config](/dpsg/docs/methods/features/locations))

6. Select
Select the
the currencies
currencies for
for the
the payment
payment method
method ([Currency
([Currency Specific
Specific Config](/dpsg/docs/methods/features/currencies))

7. Configure
Configure the
the surcharges
surcharges ([Surcharges](/dpsg/docs/methods/features/surcharges))


Step 8
8 asks
asks you
you whether
whether you
you want
want to
to set
set min/max
min/max amount
amount restrictions
restrictions or
or not
not (configure
(configure by
by typing
typing `y`).
`y`). Next,
Next, select
select a
a currency
currency from
from the
the list.
list. You
You are
are then
then asked
asked to
to specify
specify the
the minimum
minimum amount,
amount, which
which can
can be
be skipped
skipped by
by hitting
hitting `Enter`
`Enter` or
or specified
specified by
by filling
filling in
in a
a number.
number. The
The same
same should
should then
then be
be done
done for
for the
the maximum
maximum amount.

After configuring
configuring one
one set
set of
of min/max
min/max amounts,
amounts, you
you are
are presented
presented with
with the
the option
option to
to do
do the
the same
same for
for other
other currencies
currencies as
as well.


### Configuration
Configuration Options


Min/Max amounts
amounts should
should be
be passed
passed as
as an
an array
array to
to each
each payment
payment method
method on
on your
your environment.
environment. This
This allows
allows you
you to
to configure
configure min/max
min/max amounts
amounts per
per currency.


`*` represents
represents all
all currencies.



"minMaxAmounts": [


"currency": "EUR",

"min": 10



"currency": "USD",

"min": 5,

"max": 500





In thethe exampleexample aboveabove thethe paymentpayment methodmethod willwill onlyonly bebe availableavailable forfor ordersorders withwith aa totaltotal ofof moremore thanthan €10.€10. WhenWhen USUS DollarDollar isis thethe selectedselected currency,currency, thethe paymentpayment methodmethod willwill bebe availableavailable whenwhen thethe orderorder totaltotal isis betweenbetween $5$5 andand $500.
id: surcharges

title: Surcharges

sidebar_label: Surcharges



## Overview


Surcharges can
can be
be configured
configured on
on each
each payment
payment method
method and
and allow
allow you
you to
to charge
charge a
a %,
%, set
set fee
fee or
or a
a mixture
mixture of
of both
both to
to customers
customers who
who use
use that
that method.


:::note Using
Using BigCommerce?

Unfortunately surcharges
surcharges don't
don't currently
currently work
work with
with BigCommerce.
BigCommerce. We're
We're looking
looking out
out for
for changes
changes on
on their
their end
end so
so we
we can
can implement
implement it.



## How
How to
to configure
configure surcharges


All payment
payment method
method config
config can
can be
be done
done via
via our
our `dcloud`
`dcloud` cli
cli tool.


### Configuration
Configuration Options


Surcharges should
should be
be passed
passed as
as an
an array
array to
to each
each payment
payment method
method on
on your
your environment.
  

Surcharges can
can be
be an
an array,
array, allowing
allowing different
different config
config for
for different
different countries
countries (based
(based on
on the
the customers
customers billing
billing address).


`*` represents
represents all
all countries.



"surcharge": [


"countries": [



"percentage": 1,

"fixed": [


"currency": "eur",

"amount": 0





"countries": [



"percentage": 1.5,

"fixed": [


"currency": "eur",

"amount": 2







In the
the example
example above
above all
all countries
countries will
will get
get 1%
1% of
of their
their subtotal
subtotal added
added as
as a
a surcharge
surcharge except
except customers
customers in
in the
the Netherlands.
Netherlands. They
They will
will get
get charged
charged 1.5%
1.5% of
of the
the subtotal
subtotal +
+ a
a flat
flat fee
fee or
or 2
2 euros.


id: sort

title: Method
Method Sort
Sort Order

sidebar_label: Method
Method Sort
Sort Order



## Overview


The sort
sort order
order methods
methods are
are returned
returned from
from DPSG
DPSG in
in can
can be
be configured
configured per
per method,
method, per
per environment
environment and
and per
per country.


## How
How to
to configure
configure sort
sort orders


All payment
payment method
method config
config can
can be
be done
done via
via our
our `dcloud`
`dcloud` cli
cli tool.


### Configuration
Configuration Options


Sort orders
orders should
should be
be passed
passed as
as an
an array.
array. Each
Each sort
sort order
order can
can have
have a
a `countries`
`countries` argument
argument associated
associated with
with it.
it. This
This means
means you
you can
can make
make the
the sort
sort order
order country
country specific.
 

Sort orders
orders go
go from
from low
low to
to high,
high, meaning
meaning 0
0 will
will appear
appear first.
first. If
If no
no sort
sort order
order data
data is
is passed
passed `999`
`999` is
is assumed.
assumed. This
This will
will push
push non
non configured
configured methods
methods behind
behind configured
configured methods.


`*` represents
represents all
all countries.




"sortOrder": [


"countries": [



"sortOrder": 0



"countries": [



"sortOrder": 10




In the
the example
example above
above the
the method
method has
has a
a sort
sort order
order of
of 0
0 for
for the
the Netherlands,
Netherlands, 10
10 in
in France
France and
and 999
999 everywhere
everywhere else.
 

id: wpay

title: Wpay

sidebar_label: Wpay



to do
id: stripe

title: Stripe

sidebar_label: Stripe



## Supported
Supported payment
payment methods


*( Description
Description :
: `code`)*


- Credit
Credit card
card (with
(with and
and without
without 3D
3D secure)
secure) :
: `card`

- FPX
FPX :
: `fpx`

- iDEAL
iDEAL :
: `ideal`

- Alipay
Alipay :
: `alipay`

- Bancontact
Bancontact :
: `bancontact`

- Giropay
Giropay :
: `giropay`

- Przelewy24
Przelewy24 :
: `p24`

- Sofort
Sofort :
: `sofort`

- EPS
EPS :
: `eps`

- Click
Click to
to Pay
Pay :
: `secureRemoteCommerce`


While these
these docs
docs are
are updated
updated frequently,
frequently, make
make sure
sure to
to also
also check
check for
for supported
supported methods
methods using
using `dcloud
`dcloud payments:method:list:all`
payments:method:list:all` to
to fetch
fetch all
all implemented
implemented methods.


:::note Missing
Missing a
a method?


Need a
a method
method that
that Stripe
Stripe supports
supports adding
adding to
to the
the list?
list? Please
Please contact
contact us
us as
as it
it might
might be
be in
in our
our development
development pipeline.




## Stripe
Stripe Configuration


The easiest
easiest way
way to
to configure
configure Stripe
Stripe is
is by
by using
using `dcloud`
`dcloud` CLI
CLI and
and the
the `dcloud
`dcloud payments:provider:configure`
payments:provider:configure` command.
command. If
If you
you want
want to
to configure
configure it
it manually,
manually, this
this can
can be
be achieved
achieved using
using [this
[this endpoint](https://dpsg.deity.cloud/#/Management/EnvironmentPaymentProviderController_stripe_create)





"publicKey": "string",
"string", //
// Secret

"secretKey": "string",
"string", //
// Secret

"testMode": "boolean"




To get
get your
your public
public &amp;
&amp; secret
secret keys
keys you
you must
must have
have a
a [Stripe](https://dashboard.stripe.com/dashboard)
[Stripe](https://dashboard.stripe.com/dashboard) account.
account. Please
Please ensure
ensure `testMode`
`testMode` is
is set
set to
to true
true when
when using
using test
test credentials.


To retrieve
retrieve your
your credentials,
credentials, log
log into
into your
your Stripe
Stripe account
account and
and navigate
navigate to
to the
the `Developers`
`Developers` section
section ([direct
([direct link](https://dashboard.stripe.com/apikeys)).
link](https://dashboard.stripe.com/apikeys)). Make
Make sure
sure to
to enable
enable 'Test
'Test mode'
mode' if
if you
you want
want to
to use
use test
test credentials
credentials ([direct
([direct link](https://dashboard.stripe.com/test/apikeys)).



### `publicKey`


The public
public key
key can
can be
be found
found in
in the
the `Developers`
`Developers` section
section under
under in
in the
the subsection
subsection `API
`API keys`.
keys`. It
It is
is labeled
labeled `Publishable
`Publishable key`
key` in
in the
the `Standard
`Standard keys`
keys` section
section and
and starts
starts with
with `pk_`.


### `secretKey`


The secret
secret key
key can
can be
be found
found in
in the
the `Developers`
`Developers` section
section under
under in
in the
the subsection
subsection `API
`API keys`.
keys`. It
It is
is labeled
labeled `Secret
`Secret key`
key` in
in the
the `Standard
`Standard keys`
keys` section
section and
 
starts withwith `sk_`.
id: mollie

title: Mollie

sidebar_label: Mollie



## Supported
Supported payment
payment methods


*( Description
Description :
: `code`)*


- Credit
Credit card
card (with
(with and
and without
without 3D
3D secure)
secure) :
: `creditcard`

- iDEAL
iDEAL :
: `ideal`

- Klarna
Klarna Pay
Pay Later
Later :
: `klarnapaylater`

- PayPal
PayPal :
: `paypal`

- Sofort
Sofort :
: `sofort`

- Gift
Gift Card
Card :
: `giftcard`

- Gift
Gift Voucher
Voucher :
: `voucher`

- Bancontact
Bancontact :
: `bancontact`

- Giropay
Giropay :
: `giropay`

- EPS
EPS :
: `eps`

- Przelewy24
Przelewy24 :
: `p24`

- KBC
KBC :
: `kbc`

- Belfius
Belfius :
: `belfius`

- ING
ING Home
Home Pay
Pay :
: `inghomepay`

- SEPA
SEPA Bank
Bank Transfer
Transfer :
: `banktransfer`


While these
these docs
docs are
are updated
updated frequently,
frequently, make
make sure
sure to
to also
also check
check for
for supported
supported methods
methods using
using `dcloud
`dcloud payments:method:list:all`
payments:method:list:all` to
to fetch
fetch all
all implemented
implemented methods.


:::note Missing
Missing a
a method?


Need a
a method
method that
that Mollie
Mollie supports
supports adding
adding to
to the
the list?
list? Please
Please contact
contact us
us as
as it
it might
might be
be in
in our
our development
development pipeline.




## Mollie
Mollie Configuration


The easiest
easiest way
way to
to configure
configure Mollie
Mollie is
is by
by using
using `dcloud`
`dcloud` CLI
CLI and
and the
the `dcloud
`dcloud payments:provider:configure`
payments:provider:configure` command.
command. If
If you
you want
want to
to configure
configure it
it manually,
manually, this
this can
can be
be achieved
achieved using
using [this
[this endpoint](https://dpsg.deity.cloud/#/Management/EnvironmentPaymentProviderController_mollie_create)





"profileId": "string",
"string", //
// Private

"apiKey": "string",
"string", //
// Private

"testMode": "boolean"




To get
get your
your profile
profile ID
ID &amp;
&amp; API
API key
key you
you must
must have
have a
a [Mollie](https://www.mollie.com/dashboard/)
[Mollie](https://www.mollie.com/dashboard/) account.
account. Please
Please ensure
ensure `testMode`
`testMode` is
is set
set to
to true
true when
when using
using test
test credentials.


id: adyen

title: Adyen

sidebar_label: Adyen



## Supported
Supported payment
payment methods


*( Description
Description :
: `code`)*


- Credit
Credit card
card (with
(with and
and without
without 3D
3D secure)
secure) :
: `scheme`

- PayPal
PayPal :
: `paypal`

- AfterPay
AfterPay :
: `afterpaytouch`
`afterpaytouch` (AUS
(AUS and
and NZ
NZ only)

- Klarna
Klarna :
: `klarna_account`

- Zip
Zip :
: `zip`


While these
these docs
docs are
are updated
updated frequently,
frequently, make
make sure
sure to
to also
also check
check for
for supported
supported methods
methods using
using `dcloud
`dcloud payments:method:list:all`
payments:method:list:all` to
to fetch
fetch all
all implemented
implemented methods.


:::note Missing
Missing a
a method?


Need a
a method
method that
that Adyen
Adyen supports
supports adding
adding to
to the
the list?
list? Please
Please contact
contact us
us as
as it
it might
might be
be in
in our
our development
development pipeline.




## Adyen
Adyen Configuration


The easiest
easiest way
way to
to configure
configure Adyen
Adyen is
is by
by using
using `dcloud`
`dcloud` CLI
CLI and
and the
the `dcloud
`dcloud payments:provider:configure`
payments:provider:configure` command.
command. If
If you
you want
want to
to configure
configure it
it manually,
manually, this
this can
can be
be achieved
achieved using
using [this
[this endpoint](https://dpsg.deity.cloud/#/Management/EnvironmentPaymentProviderController_adyen_create)





"merchantAccount": "string",

"apiKey": "string",
"string", //
// Private

"clientKey": "string",
"string", //
// Private

"hmacKey": "string",
"string", //
// Private

"testMode": "boolean"




To get
get your
your client,
client, HMAC
HMAC &amp;
&amp; API
API keys
keys you
you must
must have
have a
a [Adyen](https://www.adyen.com/)
[Adyen](https://www.adyen.com/) account.
account. Please
Please ensure
ensure `testMode`
`testMode` is
is set
set to
to true
true when
when using
using test
test credentials.


### `merchantAccount`


You can
can get
get this
this from
from your
your Adyen
Adyen account
account under
under `Account
`Account ->
-> Merchant
Merchant Accounts`



### `apiKey`


You can
can get
get this
this from
from your
your Adyen
Adyen account
account under
under `Developer
`Developer ->
-> API
API Credentials`
Credentials` then
then select
select `ws`.



### `clientKey`


You can
can get
get this
this from
from your
your Adyen
Adyen account
account under
under `Developer
`Developer ->
-> API
API Credentials`
Credentials` then
then select
select `ws`.



### `hmacKey`


This is
is used
used for
for receiving
receiving webhooks
webhooks from
from Adyen.
Adyen. DPSG
DPSG uses
uses this
this when
when payments
payments are
are updated.


:::note Allowed
Allowed Origins

Adyen requires
requires you
you to
to set
set allowed
allowed origins
origins so
so the
the frontend
frontend components
components can
can be
be rendered.
rendered. You
You can
can see
see these
these when
when managing
managing the
the API
API keys.
  


You can
can get
get your
your HMAC
HMAC key
key when
when configuring
configuring your
your webhook.
webhook. To
To do
do this,
this, log
log into
into your
your Adyen
Adyen account
account and
and visit
visit `Developers
`Developers ->
-> Webhooks`
Webhooks` in
in the
the left
left hand
hand navigation.


From their
their you
you can
can set
set up
up a
a `Standard
`Standard Notification`
Notification` webhook
webhook with
with the
the following
following configuration:



- URL:
URL: https://dpsg.{region}.deity.cloud/api/payment/webhook/{organization}/{project}/{environment}/adyen
https://dpsg.{region}.deity.cloud/api/payment/webhook/{organization}/{project}/{environment}/adyen (replacing
(replacing `{region}`,
`{region}`, `{organization}`,
`{organization}`, `{project}`
`{project}` and
and `{environment}`
`{environment}` with
with your
your details).
details). If
If your
your region
region is
is Europe
Europe it
it will
will be
be omitted
omitted and
and the
the base
base url
url will
will be
be (https://dpsg.deity.cloud).

- Active:
Active: `Yes`

- SSL
SSL version:
version: `TLSv1.2`

- On
On Adyen
Adyen page
page navigate
navigate to
to Developers
Developers >
> Webhooks
Webhooks >
> Edit
Edit webhook,
webhook, make
make sure
sure to
to select
select all
all "Additional
"Additional Settings".

- On
On Adyen
Adyen page
page navigate
navigate to
to Developers
Developers >
> Additional
Additional data,
data, make
make sure
sure to
to enable
enable "Toggle
"Toggle all
all fields".


**Additional Settings**


- Add
Add Acquirer
Acquirer Result:
Result: `Yes`

- HMAC
HMAC Key:
Key: Generate
Generate one
one and
and add
add it
it to
to your
your config
config (above).



:::note Test
Test your
your webhook

You should
should be
be able
able to
to test
test this
this and
and get
get a
a 200
200 ok
ok response
response from
from within
within the
the Adyen
Adyen dashboard.


id: humm

title: Humm

sidebar_label: Humm



:::note Please
Please note


Even though
though Humm
Humm only
only offers
offers one
one payment
payment method,
method, DPSG
DPSG still
still requires
requires a
a configuration
configuration of
of both,
both, Humm
Humm as
as a
a payment
payment provider
provider and
and as
as a
a payment
payment method.




## Restrictions


Humm is
is an
an Australian
Australian payment
payment provider
provider and
and is
is only
only available
available for
for customers
customers with
with a
a billing
billing address
address in
in Australia.
Australia. Therefore,
Therefore, Humm
Humm can
can only
only be
be configured
configured on
on the
the Australian
Australian cluster
cluster of
of DPSG.


## Humm
Humm Configuration


The easiest
easiest way
way to
to configure
configure Humm
Humm is
is by
by using
using `dcloud`
`dcloud` CLI
CLI and
and the
the `dcloud
`dcloud payments:provider:configure`
payments:provider:configure` command.
command. If
If you
you want
want to
to configure
configure it
it manually,
manually, this
this can
can be
be achieved
achieved using
using [this
[this endpoint](https://dpsg.deity.cloud/#/Management/EnvironmentPaymentProviderController_humm_create)




"merchantId": "string",

"gatewayKey": "string",

"shopCountry": "AU",
"AU", //
// ISO-3166
ISO-3166 country
country code

"shopName": "string"
"string" //
// The
The name
name of
of your
your store





The merchantmerchant IDID andand gatewaygateway keykey cancan toto bebe requestedrequested usingusing [this[this form](https://docs.shophumm.com.au/request_api.html).form](https://docs.shophumm.com.au/request_api.html). OnceOnce thethe requestrequest isis approved,approved, thethe `merchantId``merchantId` andand `gatewayKey``gatewayKey` willwill bebe providedprovided toto youyou byby Humm.
id: installation

title: Getting
Getting Started

sidebar_label: Installation

description: Getting
Getting started
started with
with DPSG



:::info Requires
Requires Falcon
Falcon v3.0.0
v3.0.0 or
or higher

If you
you want
want to
to use
use DPSG
DPSG in
in your
your Falcon
Falcon app,
app, make
make sure
sure to
to use
use Falcon
Falcon version
version >=
>= 3.0.0.
3.0.0. Version
Version 2
2 is
is not
not supported.



To make
make use
use of
of DPSG,
DPSG, it
it first
first needs
needs to
to be
be configured
configured and
and then
then connected
connected to
to your
your Falcon
Falcon app.


### 1.
1. Configuring
Configuring DPSG
 

This involves
involves creating
creating an
an DPSG
DPSG profile
profile and
and enabling
enabling payment
payment providers
providers and
and payment
payment methods.

This configuration
configuration can
can be
be done
done entirely
entirely using
using our
our `dcloud`
`dcloud` CLI
CLI tool.


[Find out
out how](config)


### 2.
2. Connecting
Connecting your
your Falcon
Falcon app
app to
to DPSG


To use
use DPSG
DPSG in
in your
your Falcon
Falcon app
app you
you need
need to
to connect
connect to
to it.
it. For
For this
this you
you just
just need
need to
to add
add a
a few
few configuration
configuration changes
changes to
to your
your remote
remote or
or local
local application
application configuration.


[Find out
out how](connect)


### 3.
3. Using
Using DPSG
DPSG within
within your
your Falcon
Falcon app


Our demo
demo applications
applications are
are already
already setup
setup to
to use
use DPSG.
DPSG. This
This section
section is
is only
only relevant
relevant for
for custom
custom integrations
integrations or
or projects
projects with
with bespoke
bespoke functionality.


[Find out
out how](usage)


id: usage

title: Using
Using DPSG

sidebar_label: Using
Using DPSG

description: How
How to
to use
use DPSG



## Overview


Our core
core modules
modules (Magento
(Magento 2,
2, BigCommerce,
BigCommerce, Commerce
Commerce Tools)
Tools) all
all have
have pre
pre built
built DPSG
DPSG integrations.
 

This section
section explains
explains how
how to
to add
add your
your own.


Please read
read our
our [how
[how it
it works
works guide](/dpsg/docs/about)
guide](/dpsg/docs/about) first.


### 1.
1. Load
Load Payment
Payment Service
Service Client
Client into
into your
your API
API package


You can
can inject
inject `PaymentServiceClient`
`PaymentServiceClient` into
into your
your API
API package
package constructor
constructor using
using the
the code
code below




import {


} from
from '@deity/falcon-payment-extension';



export class
class YourDataSource
YourDataSource extends
extends RESTDataSource
RESTDataSource {


paymentServiceClient: PaymentServiceClient;




@inject('PaymentServiceClient') @optional()
@optional() paymentServiceClient:
paymentServiceClient: PaymentServiceClient

) {


this.paymentServiceClient =
= paymentServiceClient;





### 2.
2. Use
Use `PaymentServiceClient`
`PaymentServiceClient` in
in your
your API
API package


You can
can then
then call
call `PaymentServiceClient`
`PaymentServiceClient` methods
methods in
in your
your class
class like
like so:












### 3.
3. Watch
Watch for
for payment
payment updates


In your
your endpoints
endpoints package
package you
you can
can listen
listen for
for the
the event
event emitted
emitted by
by `PaymentServiceClient`
`PaymentServiceClient` when
when a
a payment
payment is
is updated.
updated. You'll
You'll need
need this
this for
for events
events such
such as
as when
when payments
payments are
are authorized
authorized after
after a
a successful
successful 3D
3D secure
secure check.



**Example in
in the
the BigCommerce
BigCommerce endpoints
endpoints package**


import {
{ PaymentEvents,
PaymentEvents, PaymentWebhookResult
PaymentWebhookResult }
} from
from '@deity/falcon-payment-extension';



export class
class BigCommerceUpdatePaymentStatus
BigCommerceUpdatePaymentStatus extends
extends EventHandlerBase
EventHandlerBase {

protected logger;


protected config;


protected container:
container: Container;


constructor(@injectLogger() logger,
logger, @injectModuleConfig('bigcommerce')
@injectModuleConfig('bigcommerce') config,
config, container:
container: Container)
Container) {


this.logger =
= logger;

this.config =
= config;

this.container =
= container;



async execute(payload:
execute(payload: PaymentWebhookResult)
PaymentWebhookResult) {

const dataSource:
dataSource: any
any =
= this.container.get('BigCommerceDataSource');


context: {
{ components:
components: this.container.get('components')
this.container.get('components') }
} as
as any,

cache: this.container.get<ICache>('Cache')


if (!dataSource.onPaymentStatusUpdated)
(!dataSource.onPaymentStatusUpdated) {

this.logger.warn(`"onPaymentStatusUpdated" method
method is
is not
not defined
defined in
in DataSource`);




await dataSource.onPaymentStatusUpdated(payload);





id: config

title: Configuring
Configuring DPSG

sidebar_label: Configuring
Configuring DPSG

description: How
How to
to configure
configure DPSG



### Prerequisites


These steps
steps assume
assume you
you have
have `dcloud`
`dcloud` installed.
installed. To
To find
find out
out more
more about
about `dcloud`,
`dcloud`, please
please refer
refer to
to the
the [documentation](/platform/cloud/dcloud).
[documentation](/platform/cloud/dcloud). At
At the
the start
start of
of most
most DPSG
DPSG commands,
commands, you
you are
are asked
asked to
to specify
specify the
the region.
region. This
This is
is to
to make
make sure
sure that
that you
you perform
perform the
the configurations
configurations on
on the
the correct
correct DPSG
DPSG region.
region. If
If you
you are
are not
not sure
sure about
about the
the region
region of
of the
the cloud
cloud environment
environment that
that you
you work
work with,
with, you
you can
can run
run `dcloud
`dcloud env
env [environment]`
[environment]` to
to fetch
fetch the
the environment
environment region.


### 1.
1. Select
Select your
your project


Run `dcloud
`dcloud project:current:set
project:current:set [organization]
[organization] [project]`
[project]` to
to select
select the
the project
project that
that you
you are
are working
working with.
with. In
In case
case you
you don't
don't know
know the
the exact
exact organization
organization or
or project
project name,
name, run
run `dcloud
`dcloud project:list`
project:list` to
to get
get a
a list
list of
of all
all projects
projects that
that you
you have
have access
access to.


### 2.
2. Create
Create a
a DPSG
DPSG profile


To get
get started,
started, you
you first
first need
need to
to create
create a
a payments
payments profile.
profile. A
A profile
profile is
is a
a set
set of
of credentials
credentials and
and a
a configuration
configuration for
for payment
payment providers
providers and
and methods.

A profile
profile should
should be
be created
created for
for every
every cloud
cloud environment
environment and
and every
every developer.



Every developer
developer that
that works
works on
on the
the project
project locally
locally should
should create
create their
their own
own profile.
profile. This
This is
is to
to ensure
ensure that
that all
all payment
payment updates
updates provided
provided by
by RabbitMQ
RabbitMQ are
are delivered
delivered to
to the
the correct
correct event
event consumer.



To automatically
automatically create
create DPSG
DPSG profiles
profiles for
for every
every cloud
cloud environment,
environment, you
you can
can use
use the
the `dcloud
`dcloud payments:profile:sync`
payments:profile:sync` command.
command. For
For easy
easy identification,
identification, the
the profiles'
profiles' names
names will
will be
be identical
identical to
to the
the cloud
cloud environment
environment names.


To create
create a
a profile
profile manually,
manually, use
use the
the `dcloud
`dcloud payments:profile:create`
payments:profile:create` command
command to
to launch
launch the
the configuration
configuration wizard.

Once configured,
configured, you
you can
can request
request information
information about
about a
a profile
profile at
at any
any time,
time, using
using the
the `dcloud
`dcloud payments:profile:info`
payments:profile:info` command.


### 3.
3. Connect
Connect the
the DPSG
DPSG profile
profile to
to your
your Falcon
Falcon app


Run `dcloud
`dcloud payments:profile:apply`,
payments:profile:apply`, this
this will
will set
set the
the authentication
authentication details
details for
for DPSG
DPSG as
as environment
environment variables
variables for
for your
your Falcon
Falcon app.



This step
step should
should only
only be
be performed
performed for
for profiles
profiles that
that you
you want
want to
to connect
connect to
to your
your cloud
cloud instance,
instance, not
not for
for local
local development
development profiles.



### 4.
4. Configure
Configure your
your payment
payment providers


Next you
you need
need to
to run
run `dcloud
`dcloud payments:provider:configure`.


This will
will take
take you
you through
through steps
steps to
to enabling
enabling your
your required
required payment
payment providers.
providers. In
In this
this step
step you
you will
will add
add API
API keys
keys and
and secrets
secrets needed
needed for
for your
your provider.


### 5.
5. Configure
Configure your
your payment
payment methods


The final
final step
step is
is to
to enable
enable payment
payment methods.


Run `dcloud
`dcloud payments:method:configure`.


This will
will take
take you
you through
through steps
steps to
to configure
configure your
your methods,
methods, including
including the
the steps
steps for
for our
our [configuration
[configuration features](/dpsg/docs/methods/features/currencies).


<br /><br
/><br />


### Dcloud
Dcloud Commands
Commands Reference


To configure
configure and
and manage
manage DPSG
DPSG using
using `dcloud`,
`dcloud`, we
we have
have several
several commands
commands available
available that
that cover
cover the
the basic
basic configuration
configuration as
as well
well as
as payment
payment provider
provider and
and method
method management.



Automatically creates
creates matching
matching payments
payments profiles
profiles for
for the
the project's
project's environments



Create an
an entry
entry for
for the
the existing
existing Deity
Deity Cloud
Cloud environment
environment or
or a
a test
test one
one for
for local
local development



Information about
about the
the configured
configured payments
payments profiles



Updates a
a configured
configured payments
payments profile



Deletes a
a selected
selected payment
payment profile



Send Payments
Payments credentials
credentials to
to the
the Deity
Deity Cloud
Cloud Environment.
Environment. It
It will
will set
set the
the token
token by
by applying
applying the
the required
required env
env vars


<br />



List all
all available
available payment
payment providers



Configure payment
payment provider
provider for
for a
a selected
selected payments
payments profile



List configured
configured payment
payment providers
providers for
for a
a selected
selected payments
payments profile


<br />



List all
all available
available payment
payment methods
methods of
of the
the required
required provider



Configure payment
payment methods
methods for
for a
a selected
selected and
and payment
payment provider



Update or
or dis-/enable
dis-/enable a
a payment
payment method
method for
for a
a selected
selected payment
payment provider



List configured
configured payment
payment providers
providers for
for a
a selected
selected payments
payments profile


id: connect

title: Connecting
Connecting to
to your
your App

sidebar_label: Connecting
Connecting to
to your
your app

description: How
How to
to connect
connect DPSG
DPSG to
to your
your Falcon
Falcon app



## Connecting
Connecting your
your Falcon
Falcon App


All the
the setup
setup is
is done
done on
on our
our side.
side. All
All you
you need
need to
to do
do is
is configure
configure your
your Falcon
Falcon App
App to
to use
use DPSG
DPSG and
and you're
you're good
good to
to go.


To connect
connect your
your app
app to
to DPSG
DPSG you'll
you'll just
just need
need to
to make
make a
a few
few simple
simple configuration
configuration changes.


:::note Get
Get your
your DPSG
DPSG credentials?

DPSG is
is part
part of
of your
your subscription.
subscription. You
You can
can get
get this
this information
information by
by running
running `dcloud
`dcloud payments:profile:info`.



## Local
Local Configuration


In your
your server
server config
config you'll
you'll need
need to
to add
add a
a new
new payments
payments module.


**`server/config/default.json` minimum
minimum configuration**


"modules": {

"payments": {

"package": "@deity/falcon-payment-service-module",

"enabled": true,

"config": {

"redirectBaseUrl": "",

"redirectUrl": "/checkout/pending",

"serviceUser": "",

"serviceToken": "",

"region": null






:::note Using
Using localhost?

Some payment
payment providers
providers don't
don't like
like passing
passing `http://localhost`
`http://localhost` as
as a
a redirect
redirect URL
URL (`redirectBaseUrl`).
(`redirectBaseUrl`). We
We recommend
recommend using
using a
a service
service like
like [ngrok](https://ngrok.com/)
[ngrok](https://ngrok.com/) to
to tunnel
tunnel your
your falcon
falcon server
server app.



### Config
Config Explained


(config :
: type
type :
: default
default value
value :
: description)


- `redirectBaseUrl`
`redirectBaseUrl` :
: string
string :
: ""
"" :
: The
The base
base url
url to
to be
be redirected
redirected to
to after
after payments
payments (usually
(usually your
your client
client app)

- `redirectUrl`
`redirectUrl` :
: string
string :
: "/checkout/pending"
"/checkout/pending" :
: The
The url
url to
to be
be redirected
redirected to
to after
after payments
payments (usually
(usually your
your client
client app)

- `serviceUser`
`serviceUser` :
: string
string :
: ""
"" :
: The
The DPSG
DPSG username,
username, in
in the
the following
following format
format "org:project:env"
"org:project:env" e.g.
e.g. "deity:falcon:production"

- `serviceToken`
`serviceToken` :
: string
string :
: ""
"" :
: The
The DPSG
DPSG token
token associated
associated with
with the
the user
user above

- `region`
`region` :
: string
string :
: null
null :
: The
The region
region of
of the
the DPSG
DPSG instance
instance you
you wish
wish to
to use.
use. This
This defaults
defaults to
to `null`
`null` which
which connects
connects to
to our
our European
European instance.
instance. Accepted
Accepted values
values are
are `eu`
`eu` (Europe),
(Europe), `us`
`us` (America)
(America) and
and `au`
`au` (Australia).



### Need
Need payments
payments in
in a
a custom
custom module?


If you're
you're adding
adding a
a new
new module
module and
and need
need access
access to
to DPSG
DPSG you'll
you'll need
need to
to make
make sure
sure you
you pass
pass the
the payments
payments module
module name
name to
to it.



"yourModule": {


"config": {


"paymentsComponent": "payments",






## Remote
Remote Configuration


Remote configuration
configuration should
should be
be done
done using
using env
env variables
variables for
for any
any kind
kind of
of sensitive
sensitive data.


This includes
includes the
the `serviceUser`
`serviceUser` and
and `serviceToken`.


**Default Environment
Environment variables
variables names
names (config:
(config: env
env var
var name)**


- `redirectBaseUrl`
`redirectBaseUrl` :
: `PAYMENTS_REDIRECT_BASE_URL`

- `redirectUrl`
`redirectUrl` :
: `PAYMENTS_REDIRECT_URL`

- `serviceUser`
`serviceUser` :
: `PAYMENTS_SERVICE_USER`

- `serviceToken`
`serviceToken` :
: `PAYMENTS_SERVICE_TOKEN`

- `region`
`region` :
: `PAYMENTS_REGION`


### Setting
Setting the
the variables
variables on
on your
your environment


The `serviceUser`,
`serviceUser`, `serviceToken`
`serviceToken` and
and `region`
`region` can
can be
be automatically
automatically set
set using
using the
the command
command `dcloud
`dcloud payments:profile:apply`.
payments:profile:apply`. Alternatively,
Alternatively, they
they can
can be
be set
set manually,
manually, using:


`dcloud env:var:set
env:var:set [environment_name]
[environment_name] [variable_name]
[variable_name] [variable_value]`




`dcloud env:var:set
env:var:set -s
-s production
production PAYMENTS_SERVICE_TOKEN
PAYMENTS_SERVICE_TOKEN 1234`


Notice the
the `-s`
`-s` is
is used
used to
to indicate
indicate this
this is
is a
a secret
secret (encrypted)
(encrypted) value.


id: overview

title: Upgrading
Upgrading to
to DPSG

sidebar_label: Overview



**DPSG is
is only
only available
available to
to Falcon
Falcon >=
>= 3.0.0**


If you're
you're running
running Falcon
Falcon 2.x
2.x you'll
you'll need
need to
to upgrade
upgrade your
your project
project to
to v3.x
v3.x to
to use
use DPSG.


## DPSG
DPSG upgrade
upgrade guide


Once your
your app
app is
is running
running v3
v3 the
the upgrade
upgrade to
to DPSG
DPSG is
is simple.


### Client
Client updates


The only
only real
real client
client updates
updates are
are adding
adding components
components for
for newly
newly supported
supported payment
payment providers
providers (additional
(additional Stripe
Stripe methods
methods and
and Adyen).


To upgrade
upgrade please
please use
use `create-falcon-app`
`create-falcon-app` to
to do
do a
a diff
diff between
between your
your version
version and
and v3.


[See guide
guide here](https://docs.deity.io/docs/platform/upgrading/overview)


### Server
Server Updates


Unless you've
you've overridden
overridden the
the DPSG
DPSG related
related methods
methods in
in your
your shop
shop API
API package
package (get
(get methods,
methods, load
load method,
method, place
place order
order etc)
etc) all
all you
you will
will need
need to
to do
do is
is remove
remove old
old payment
payment config
config values
values and
and define
define the
the new
new ones
ones [seen
[seen here](../getting-started/config).


id: home

title: Documentation
Documentation for
for Deity
Deity Falcon

description: Deity
Deity Falcon
Falcon Platform
Platform documentation
documentation and
and user
user guides

displayed_sidebar: home

sidebar_class_name: home-sidebar

slug: /

hide_title: true

hide_table_of_contents: true



import SearchBar
SearchBar from
from '@theme/SearchBar';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Badge
Badge from
from '@site/src/components/Badge';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';


<div className="text-center
className="text-center pt80">

<Badge>Help center</Badge>

<h1 className="headline
className="headline mb20">Find
mb20">Find information
information and
and solutions
solutions through
through our
our documentation,
documentation, guides,
guides, and
and support.</h1>

<div className="home-search
className="home-search mb100">

<SearchBar />

<div className="home-search-description">Some
className="home-search-description">Some tips
tips how
how to
to use
use the
the search...</div>




<Card isPadding={false}>

<div className="flex">


<LogoImg className="logo-content"
className="logo-content" />

<div className="mb20">

<p >

Deity is
is the
the endlessly
endlessly flexible
flexible commerce
commerce platform
platform providing
providing the
the utmost
utmost customer
customer centric
centric approach
approach to
to any

fast-growing and
and forward
forward thinking
thinking ecommerce
ecommerce merchant.


  
<Button variant="contained"
variant="contained" size="medium"
size="medium" href="/platform">

Learn more

</Button>&nbsp; &nbsp;

<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://www.deity.com/contact"
href="https://www.deity.com/contact" target="_blank">

Schedule a
a demo



<div className="right-big-card">

<CardContent >

<img src="img/composable-commerce.svg"/>






<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/platform">

<img src="/img/icons/rings.svg"
src="/img/icons/rings.svg" />


<p>Learn what
what Deity
Deity Platform
Platform is
is and
and how
how it
it works.</p>


<Card to="/platform/key-concepts">

<img src="/img/icons/info.svg"
src="/img/icons/info.svg" />

<h4>Key concepts</h4>

<p>Learn the
the basics
basics behind
behind Deity
Deity Platform.</p>


<Card to="/platform/getting-started/overview">

<img src="/img/icons/lightning.svg"
src="/img/icons/lightning.svg" />

<h4>Getting started</h4>

<p>Jump right
right in
in and
and get
get started
started with
with Deity
Deity Platform.</p>

  
<Card to="/platform/support/tutorials">

<img src="/img/icons/lightbulb.svg"
src="/img/icons/lightbulb.svg" />


<p>Learn by
by doing
doing by
by following
following practical
practical tutorials.</p>





<h2 className="mb20
className="mb20 headline2">Pick
headline2">Pick your
your topic</h2>

<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/composer">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<p>Compose outstanding
outstanding digital
digital experiences
experiences to
to achieve
achieve transactional
transactional excellence.</p>


<Card to="/storefront">

<img src="/img/icons/shop.svg"
src="/img/icons/shop.svg" />


<p>Focus on
on customer
customer experience
experience to
to exceed
exceed expectations.</p>


<Card to="/payments">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<p>Integrate multiple
multiple payment
payment service
service providers
providers to
to use
use any
any payment
payment method.</p>


<Card to="/console">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />

<h4>Cloud Console</h4>

<p>Manage your
your subscriptions,
subscriptions, users,
users, deployments,
deployments, integrations
integrations and
and more
more with
with our
our web-based
web-based application.</p>





<h2 className="mb20
className="mb20 headline2">Learn
headline2">Learn the
the basics</h2>

<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<h5>Working with
with extensions</h5>


Eu condimentum
condimentum orci
orci tristique
tristique felis
felis sit
sit est
est proin
proin ipsum
ipsum magna.
magna. Eget
Eget vestibulum
vestibulum et
et adipiscing
adipiscing in
in ornare
ornare tellus

libero cras
cras at
at aliquam.




<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<h5>Register a
a custom
custom module</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat






<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<h5>Setup a
a local
local development
development profile</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat





<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/data.svg"
src="/img/icons/data.svg" />


<h5>Overriding components</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat






<div className="flex
className="flex mb100
mb100 brighten">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />


<h5>Deploying a
a build
build to
to a
a remote
remote environment</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat





<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />


<h5>Set a
a custom
custom environment
environment variable</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat







<h2 class="mb20
class="mb20 headline2">Integrations</h2>


import IntegrationContent
IntegrationContent from
from "./integrations.mdx"


<IntegrationContent />




id: routing

title: Routing

sidebar_label: Routing



## Overview


In-app routing
routing is
is based
based on
on <a
<a href="https://reacttraining.com/react-router/"
href="https://reacttraining.com/react-router/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">react-router</a>.


[Dynamic Routing](/platform/server/dynamic-routes)
Routing](/platform/server/dynamic-routes) relies
relies on
on both
both Falcon
Falcon Client
Client and
and Falcon
Falcon Server.
Server. To
To see
see an
an example
example of
of how
how to
to get
get dynamic
dynamic routing
routing working
working please
please look
look at
at our
our [Contentful
[Contentful integration
integration guide](/platform/cookbook/integrations/contentful2).




In our
our example
example projects
projects the
the routing
routing happens
happens in
in `client/src/App.js`.


`SwitchDynamicURL`, imported
imported from
from `@deity/falcon-front-kit`
`@deity/falcon-front-kit` is
is used
used to
to handle
handle routes.






import {
{ Route
Route }
} from
from 'react-router-dom';

import {



} from
from '@deity/falcon-front-kit';



const App
App =
= ()
() =>
=> (



<Route exact
exact path="/"
path="/" component={Home}
component={Home} />

<Route exact
exact path="/blog/:page?"
path="/blog/:page?" component={Blog}
component={Blog} />

<Route exact
exact type="shop-product"
type="shop-product" component={Product}
component={Product} />

<Route component={NotFound}
component={NotFound} />





export default
default App;



## `SwitchDynamicURL`
`SwitchDynamicURL` basics:


This component
component `@deity/falcon-front-kit/src/DynamicRoute/SwitchDynamicUrl`,
`@deity/falcon-front-kit/src/DynamicRoute/SwitchDynamicUrl`, wraps
wraps your
your `<Route>`
`<Route>` much
much like
like `import
`import {
{ Switch
Switch }
} from
from "react-router-dom";`.


Using the
the current
current `location`
`location` and
and it's
it's child
child components
components it
it will
will determine
determine what
what to
to render.


If there
there is
is a
a `path`
`path` match
match in
in one
one of
of the
the child
child components
components that
that will
will take
take priority.


e.g. if
if the
the URL
URL was
was `https://yourstore/checkout`,
`https://yourstore/checkout`, the
the `Checkout`
`Checkout` component
component would
would be
be rendered.




<Route exact
exact path="/checkout"
path="/checkout" component={Checkout}
component={Checkout} />




:::note Exact
Exact URLs

If you
you want
want your
your URL
URL to
to match
match exactly
exactly you
you can
can pass
pass `exact`
`exact` as
as a
a prop.
prop. Read
Read more
more [here](https://reacttraining.com/react-router/web/api/Route/exact-bool)



## Static
Static Routing


As explained
explained above,
above, static
static URLs
URLs use
use the
the `path`
`path` prop
prop to
to match
match a
a path
path to
to a
a component.


You will
will see
see we
we are
are also
also matching
matching on
on `path`
`path` with
with a
a dynamic
dynamic variable
variable for
for `:page?`.
`:page?`. In
In this
this instance
instance it
it handles
handles the
the blogs
blogs pagination
pagination and
and is
is later
later available
available as
as param
param passed
passed automatically
automatically to
to the
the `Blog`
`Blog` component.



<Route exact
exact path="/"
path="/" component={Home}
component={Home} />

<Route exact
exact path="/blog/:page?"
path="/blog/:page?" component={Blog}
component={Blog} />






const Blog
Blog =
= ({
({ match
match =
= {}
{} })
}) =>
=> {

const {
{ params
params }
} =
= match;


<BlogPostListQuery variables={{
variables={{ pagination:
pagination: {
{ perPage:
perPage: 9,
9, page:
page: +params.page
+params.page ||
|| 1
1 }
} }}>





## Dynamic
Dynamic Routing


In a
a lot
lot of
of instances
instances you
you won't
won't know
know exactly
exactly which
which URLs
URLs you
you are
are looking
looking for,
for, for
for example
example `https://your-site/product-name.html`.
`https://your-site/product-name.html`. This
This is
is what
what we
we refer
refer to
to as
as **dynamic
**dynamic routing**.
routing**. It
It requires
requires you
you to
to query
query your
your APIs
APIs to
to look
look for
for a
a match.


In this
this case
case we
we would
would match
match on
on `type`
`type` and
and **not**
**not** `path`.




<Route exact
exact type="shop-product"
type="shop-product" component={Product}
component={Product} />




The `type`
`type` is
is returned
returned by
by a
a method
method in
in your
your API
API code
code (in
(in Falcon
Falcon Server).


For more
more details
details please
please checkout
checkout out
out our
our [dynamic
[dynamic routing
routing docs](/platform/server/dynamic-routes).


**n.b.** If
If `path`
`path` prop
prop is
is passed
passed the
the `type`
`type` will
will be
be ignored.


## Protected
Protected Routes


If you
you want
want a
a route
route to
to protected
protected to
to logged
logged in
in customer
customer only
only you
you should
should use
use `<ProtectedRoute>`
`<ProtectedRoute>` instead
instead of
of `<Route>`.


This accepts
accepts the
the same
same props
props as
as `<Route>`
`<Route>` but
but also
also `redirectsTo`.
`redirectsTo`. This
This is
is used
used for
for unauthenticated
unauthenticated users.


An example
example of
of this
this is
is the
the account
account area.
area. This
This will
will redirect
redirect to
to the
the `sign-in`
`sign-in` page
page if
if the
the customer
customer isn't
isn't logged
logged in.




<ProtectedRoute path="/account"
path="/account" redirectTo={`/sign-in`}
redirectTo={`/sign-in`} component={Account}
component={Account} />




id: meta-data

title: SEO
SEO /
/ Meta
Meta Data

sidebar_label: SEO
SEO /
/ Meta
Meta Data



<a href="https://www.npmjs.com/package/react-helmet-async"
href="https://www.npmjs.com/package/react-helmet-async" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the React
React Helmet
Helmet package">

<img src="/img/docs/platform/react-helmet.jpg"
src="/img/docs/platform/react-helmet.jpg" alt="React
alt="React Helmet
Helmet Logo"
Logo" width="100"
width="100" style={{
style={{ marginBottom:
marginBottom: 20
20 }}
}} />



Falcon Platform
Platform uses
uses [React
[React Helmet
Helmet Async](https://www.npmjs.com/package/react-helmet-async)
Async](https://www.npmjs.com/package/react-helmet-async) to
to manage
manage meta
meta data
data such
such as
as `page
`page titles`
titles` and
and `meta
`meta descriptions`.
descriptions`. React
React Helmet
Helmet supports
supports server
server side
side rendering
rendering making
making it
it perfect
perfect for
for Falcon
Falcon Platform.


- [React
[React Helmet
Helmet Docs](https://www.npmjs.com/package/react-helmet)

- [React
[React Helmet
Helmet Async
Async Docs](https://www.npmjs.com/package/react-helmet-async)


## Example
Example Code




import {
{ Helmet
Helmet }
} from
from 'react-helmet-async';


<Helmet htmlAttributes={{
htmlAttributes={{ lang:
lang: locale
locale }}
}} defaultTitle="FALCON
defaultTitle="FALCON STORE"
STORE" titleTemplate="%s
titleTemplate="%s |
| FALCON
FALCON STORE">

<meta name="description"
name="description" content="Find
content="Find your
your next
next big
big thing."
thing." />

<meta name="theme-color"
name="theme-color" content="#262828"
content="#262828" />

<meta name="msapplication-TileColor"
name="msapplication-TileColor" content="#262828"
content="#262828" />

<meta name="format-detection"
name="format-detection" content="telephone=yes"
content="telephone=yes" />

<meta property="og:title"
property="og:title" content="FALCON
content="FALCON STORE"
STORE" />

<meta property="og:type"
property="og:type" content="website"
content="website" />

<meta property="og:description"
property="og:description" content="Find
content="Find your
your next
next big
big thing."
thing." />

<meta property="og:url"
property="og:url" content="/"
content="/" />




Nested or
or latter
latter components
components will
will override
override duplicates.


id: code-splitting

title: Code
Code Splitting

sidebar_label: Code
Code Splitting



This feature
feature splits
splits your
your code
code into
into various
various bundles
bundles which
which are
are loaded
loaded on
on demand.
demand. It
It is
is used
used to
to achieve
achieve smaller
smaller bundles
bundles and
and control
control resource
resource load
load prioritization.
prioritization. This
This has
has a
a major
major impact
impact on
on load
load time.
time. To
To specify
specify the
the splitting
splitting point
point you
you need
need to
to import
import modules
modules in
in an
an asynchronous
asynchronous manner.
manner. To
To make
make it
it work
work with
with React,
React, Falcon
Falcon Client
Client uses
uses [loadable](#loadable).


### Loadable


Asynchronous components
components are
are based
based on
on the
the [loadable](https://github.com/smooth-code/loadable-components)
[loadable](https://github.com/smooth-code/loadable-components) package.


It is
is highly
highly recommended
recommended to
to make
make each
each page
page component
component asynchronous.
asynchronous. Then
Then page
page chunks
chunks do
do not
not increase
increase in
in size
size when
when you
you add
add more
more pages,
pages, as
as they
they contain
contain only
only the
the necessary
necessary amount
amount of
of code
code to
to load
load that
that specific
specific page.


To convert
convert React
React Component
Component into
into a
a component
component which
which can
can be
be fetched
fetched on
on demand
demand later,
later, you
you need
need to
to wrap
wrap it
it with
with a
a `loadable`
`loadable` function:



// AppRoutes.js

import loadable
loadable from
from '@loadable/component';


const AsyncHome
AsyncHome =
= loadable(()
loadable(() =>

import(/* webpackChunkName:
webpackChunkName: "home"
"home" */
*/ "./pages/Home")



export default
default ()
() =>
=> (


<Route exact
exact path="/"
path="/" component={AsyncHome}
component={AsyncHome} />

// Your
Your other
other routes...





When you
you create
create your
your project
project using
using [`create-falcon-app`](../getting-started/overview)
[`create-falcon-app`](../getting-started/overview) Falcon
Falcon provides
provides a
a wrapper
wrapper function
function for
for `loadable`.
`loadable`. This
This wrapper
wrapper function
function shows
shows a
a spinner
spinner while
while the
the component
component is
is loading
loading to
to indicate
indicate to
to the
the user
user that
that the
the contents
contents of
of the
the page
page are
are currently
currently being
being fetched.
fetched. Using
Using this
this wrapper
wrapper function
function is
is optional,
optional, but
but it
it is
is recommended
recommended to
to provide
provide a
a fallback
fallback state
state to
to `loadable`
`loadable` if
if you
you choose
choose to
to write
write your
your own.



// components/loadable.js

import React
React from
from 'react';

import loadable
loadable from
from '@loadable/component';

import {
{ Loader
Loader }
} from
from '@deity/falcon-ecommerce-uikit';


export default
default component
component =>

loadable(component, {

fallback: <Loader
<Loader />




For more
more information
information see
see [`loadable`
[`loadable` on
on GitHub](https://github.com/smooth-code/loadable-components).


### Vendors
Vendors bundle


`vendors.js` is
is a
a chunk
chunk which
which combines
combines only
only the
the common
common project
project dependencies
dependencies into
into single
single file.
file. As
As they
they should
should not
not change
change often,
often, even
even between
between subsequent
subsequent releases,
releases, it
it allows
allows to
to turn
turn on
on long
long term
term caching
caching for
for rather
rather big
big files.


id: storefront

title: Storefront



import Badge
Badge from
from '@site/src/components/Badge';

import Button
Button from
from '@site/src/components/Button';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import {
{ Card
Card }
} from
from '@site/src/components/Card';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';


<h1 className="headline">

Use Deity’s
Deity’s PWA
PWA toolkit
toolkit to
to implement
implement any
any customer
customer experience,
experience, without
without affecting
affecting your
your backend.



One codebase
codebase for
for both
both native
native and
and web
web apps.
apps. This
This doesn’t
doesn’t just
just mean
mean developmental
developmental efficiency,
efficiency, but
but also
also a
a unified

customer experience
experience to
to boost
boost your
your sales.



<hr />


Falcon Server
Server is
is the
the middleware
middleware layer
layer between
between the
the front-end
front-end (Falcon
(Falcon Client)
Client) and
and the
the back-end
back-end services
services providing
providing data,
data, including
including BigCommerce,
BigCommerce, but
but simultaneously
simultaneously this
this could
could also
also be
be Wordpress,
Wordpress, Algolia,
Algolia, Stripe
Stripe or
or any
any other
other your
your business
business requires.


## Payments
Payments <Badge
<Badge variant="green">4</Badge>


<div className="flex
className="flex mb100">

<Card to="/#">

<img src="/img/icons/rings.svg"
src="/img/icons/rings.svg" />


<p>Learn what
what Deity
Deity Platform
Platform is
is and
and how
how it
it works.</p>


<Card to="/#">

<img src="/img/icons/lightning.svg"
src="/img/icons/lightning.svg" />

<h4>Getting started</h4>

<p>Jump right
right in
in and
and get
get started
started with
with Deity
Deity Platform.</p>


<Card to="/#">

<img src="/img/icons/info.svg"
src="/img/icons/info.svg" />

<h4>Key concepts</h4>

<p>Learn the
the basics
basics behind
behind Deity
Deity Platform.</p>


<Card to="/#">

<img src="/img/icons/lightbulb.svg"
src="/img/icons/lightbulb.svg" />


<p>Learn by
by doing
doing by
by following
following practical
practical tutorials.</p>




<hr />



<h1 className="mb20
className="mb20 headline2">Headline</h1>

<div className="flex
className="flex mb100">

<Card to="/#">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<p>Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.</p>


<Card to="/#">

<img src="/img/icons/data.svg"
src="/img/icons/data.svg" />


<p>Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.</p>


<Card to="/#">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<p>Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.</p>


<Card to="/#">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />


<p>Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.</p>




## Buttons


<Button target="_blank"
target="_blank" href="#">




## Code


<TabsContainer title="Code
title="Code snippet
snippet with
with tabs">





{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm start</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn start</CodeBlock>





## Adnomition


:::note Title

Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.



:::info Title

Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.



:::caution Title

Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.



:::danger Title

Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.



:::tip Title

Leo ipsum
ipsum maecenas
maecenas luctus
luctus placerat
placerat purus
purus nascetur
nascetur et
et cras.



id: static-files

title: Static
Static Files

sidebar_label: Static
Static Files



If you
you want
want a
a static
static file,
file, such
such as
as `robots.txt`
`robots.txt` or
or your
your `favicon.png`
`favicon.png` to
to be
be added
added to
to your
your build
build directory
directory you
you simply
simply need
need to
to add
add it
it to
to the
the `client/public`
`client/public` directory.
directory. This
This will
will then
then be
be accessible
accessible from
from your
your root
root directory
directory e.g.
e.g. `https://your-site/robots.txt`.












id: app-store

title: App
App Store
Store Publishing

sidebar_label: App
App Store
Store Publishing



As you
you might
might know,
know, Deity's
Deity's PWA
PWA allows
allows you
you to
to build
build and
and maintain
maintain one
one single
single **web**
**web** application
application that
that can
can be
be used
used on
on almost
almost any
any device.
device. There
There might
might be
be some
some cases
cases however
however where
where customers
customers are
are migrating
migrating from,
from, or
or still
still running
running **native**
**native** applications,
applications, in
in which
which case
case a
a direct
direct (native)
(native) alternative
alternative might
might come
come in
in handy.


It has
has been
been said
said that
that it
it is
is not
not possible
possible to
to publish
publish PWA's
PWA's into
into the
the Apple
Apple App
App Store.
Store. We
We took
took that
that as
as a
a challenge
challenge and
and **we've
**we've succeeded!**


We've published
published our
our demo
demo PWA
PWA theme
theme as
as a
a native
native app
app to
to the
the App
App Store.
Store. If
If you
you want
want to
to take
take a
a look
look yourself,
yourself, feel
feel free
free to
to check
check it
it out
out [here](https://apps.apple.com/app/deity-storefront/id1585832328).


If you
you are
are interested
interested in
in publishing
publishing your
your project
project to
to the
the App
App Store,
Store, please
please [reach
[reach out
out to
to us](https://deity.com/contact)



## Features


Our PWA
PWA in
in App
App Store
Store allows
allows you
you to
to utilise
utilise all
all the
the native
native iOS
iOS app
app functionalities.
functionalities. Such
Such features
features include,
include, among
among others,
others, being
being able
able to
to receive
receive push
push notifications
notifications and
and access
access to
to core
core data
data and
and the
the device's
device's accelerometer.


id: migration-guide

title: Migration
Migration guide

sidebar_label: Migration
Migration guide

enterprise_only: true




id: tutorials

title: Storefront
Storefront Tutorials

description: Deity
Deity Platform
Platform Cookbook,
Cookbook, examples
examples of
of every
every day
day tasks
tasks you
you might
might need
need to
to do
do when
when building
building your
your app



Our Cookbook
Cookbook is
is a
a collection
collection of
of 'recipes'
'recipes' for
for you
you to
to reference
reference and
and use
use in
in your
your own
own projects.


<img src="/img/docs/platform/noodles.svg"
src="/img/docs/platform/noodles.svg" alt="Noodle
alt="Noodle Illustration"
Illustration" width="200"
width="200" style={{margin:
style={{margin: '20px
'20px 0
0 40px
40px 0'}}
0'}} />


These 'recipes'
'recipes' vary
vary from
from simple
simple theming
theming processes
processes like
like [changing
[changing the
the logo](client/change-logo)
logo](client/change-logo) to
to more
more complex
complex integrations
integrations like
like [adding
[adding a
a new
new payment
payment provider](integrations/braintree).



:::note Something
Something missing?

Please [contact
[contact us](https://deity.com/contact)
us](https://deity.com/contact) if
if you
you want
want to
to see
see a
a specific
specific recipe
recipe or
or task
task added
added to
to our
our Cookbook.



id: faq

title: F.A.Q.

sidebar_label: F.A.Q.



## F.A.Q.


id: themeable-component

title: Creating
Creating a
a themeable
themeable component

sidebar_label: Creating
Creating a
a themeable
themeable component



:::note React
React version

In this
this guide
guide we're
we're going
going to
to be
be using
using **React
**React hooks**
hooks** added
added in
in React
React v16.8.
v16.8. If
If you're
you're using
using the
the old
old demo-v1
demo-v1 you
you will
will have
have to
to convert
convert these
these to
to lifecycle
lifecycle functions
functions (e.g.
(e.g. `componentWillMount`).




In this
this guide
guide we
we are
are going
going to
to create
create a
a themeable
themeable component.


We're going
going to
to add
add a
a countdown
countdown component.


import Countdown
Countdown from
from '../../../../../src/components/Countdown';


<Countdown seconds={30}/>


## 1.
1. Create
Create your
your component


Create the
the file
file `client/src/components/Countdown.js`


Below is
is the
the basics
basics of
of a
a countdown
countdown component
component (you
(you can
can see
see a
a working
working example
example above).




import React,
React, {
{ useState,
useState, useLayoutEffect
useLayoutEffect }
} from
from 'react';


// Change
Change the
the time
time from
from Milliseconds
Milliseconds to
to a
a useful
useful string

const formatTime
formatTime =
= timeInMs
timeInMs =>
=> {

let seconds
seconds =
= Math.floor((timeInMs
Math.floor((timeInMs /
/ 1000)
1000) %
% 60),

minutes =
= Math.floor((timeInMs
Math.floor((timeInMs /
/ (1000
(1000 *
* 60))
60)) %
% 60),

hours =
= Math.floor((timeInMs
Math.floor((timeInMs /
/ (1000
(1000 *
* 60
60 *
* 60))
60)) %
% 24);


hours =
= (hours
(hours <
< 10)
10) ?
? "0"
"0" +
+ hours
hours :
: hours;

minutes =
= (minutes
(minutes <
< 10)
10) ?
? "0"
"0" +
+ minutes
minutes :
: minutes;

seconds =
= (seconds
(seconds <
< 10)
10) ?
? "0"
"0" +
+ seconds
seconds :
: seconds;


return hours
hours +
+ ":"
":" +
+ minutes
minutes +
+ ":"
":" +
+ seconds;



export const
const Countdown
Countdown =
= ({
({ seconds
seconds })
}) =>
=> {

const millisecond
millisecond =
= 1000,

startTime =
= seconds
seconds ?
? seconds
seconds *
* millisecond
millisecond :
: millisecond
millisecond *
* 5,

[time, setTime]
setTime] =
= useState(startTime),

[isActive, setIsActive]
setIsActive] =
= useState(true);


useLayoutEffect(() =>
=> {

let tick
tick =
= setTimeout(()
setTimeout(() =>
=> {

if (time
(time <=
<= 0)
0) {


} else
else {

setTime(time -
- millisecond);


}, millisecond);


return ()
() =>
=> {



}, [time]);


return (


{isActive ?

<p>{`${formatTime(time)} until
until sale
sale begins`}</p>


<p>Sale Started</p>







## 2.
2. Export
Export your
your component

Now you've
you've created
created your
your component
component you
you will
will need
need to
to export
export it
it from
from the
the `client/src/components/index.js`
`client/src/components/index.js` file.





export *
* from
from './Countdown';



This simplifies
simplifies the
the process
process of
of importing
importing it
it in
in the
the future,
future, by
by allowing
allowing it
it to
to be
be imported
imported from
from the
the components
components folder
folder directly
directly rather
rather than
than a
a subfile.


## 3.
3. Include
Include your
your component

The next
next step
step is
is to
to include
include the
the component
component somewhere
somewhere on
on the
the page.
page. We're
We're going
going to
to add
add it
it to
to the
the header.
header. Once
Once you've
you've done
done this
this you
you should
should see
see your
your component
component appear
appear on
on the
the page...it
page...it will
will just
just be
be unstyled.





import {
{ Countdown
Countdown }
} from
from '..';


export const
const HeaderMenuBar
HeaderMenuBar =
= props
props =>
=> {


return (



<Countdown seconds={30}
seconds={30} />






## 4.
4. Make
Make your
your component
component 'themeable'


Let's head
head back
back to
to your
your component
component file
file `client/src/components/Countdown.js`
`client/src/components/Countdown.js` and
and add
add our
our `themed`
`themed` wrapper.





import {
{ Box,
Box, themed
themed }
} from
from '@deity/falcon-ui';


const CountdownLayout
CountdownLayout =
= themed({

tag: Box,

defaultTheme: {

countdownLayout: {

p: 'md',

bg: 'primary',

css: ({
({ theme
theme })
}) =>
=> ({

textAlign: 'center',

width: '100%',

p: {

color: theme.colors.secondary,

margin: 0,

fontSize: theme.fontSizes.lgTitle,









export const
const Countdown
Countdown =
= ({
({ seconds
seconds })
}) =>
=> {


return (


{isActive ?

<p>{`${formatTime(time)} until
until sale
sale begins`}</p>


<p>Sale Started</p>







We've now
now imported
imported both
both `Box`
`Box` &
& `themed`.
`themed`. We
We then
then create
create a
a new
new component
component `CountdownLayout`
`CountdownLayout` that
that is
is `themed`.


We can
can call
call this
this whatever
whatever we
we want
want but
but our
our naming
naming convention
convention suggests
suggests it
it should
should have
have a
a `Layout`
`Layout` suffix.
suffix. e.g.
e.g. `[ComponentName]Layout`.


We can
can then
then style
style this
this using
using the
the variables
variables defined
defined in
in our
our `client/src/styling/theme.js`.


## 5.
5. Add
Add translations


One last
last bit
bit of
of tidy
tidy up
up here
here is
is we've
we've got
got text
text that
that can't
can't be
be translated.


Using the
the `@deity/falcon-i18n`
`@deity/falcon-i18n` package
package we
we can
can easily
easily make
make these
these string
string translatable.




import {
{ T
T }
} from
from '@deity/falcon-i18n';




{isActive ?

<p><T id="countdown.message"
id="countdown.message" time={formatTime(time)}
time={formatTime(time)} /></p>


<p><T id="countdown.started"
id="countdown.started" /></p>










"countdown": {

"message": "{{time}}
"{{time}} until
until sale
sale starts",

"started": "Sale
"Sale Started"





## 6.
6. Code
Code Cleanup


For extra
extra brownie
brownie points
points it
it would
would be
be great
great to
to use
use our
our themeable
themeable `Text`
`Text` component
component rather
rather than
than `<p>`
`<p>` tags.
tags. This
This will
will mean
mean it's
it's both
both themeable
themeable and
and will
will adopt
adopt default
default styles
styles already
already assigned
assigned to
to the
the `<Text>`
`<Text>` component.





import {
{ Box,
Box, Text,
Text, themed
themed }
} from
from '@deity/falcon-ui';



export const
const Countdown
Countdown =
= ({
({ seconds
seconds })
}) =>
=> {


return (


{isActive ?

<Text><T id="countdown.message"
id="countdown.message" time={formatTime(time)}
time={formatTime(time)} /></Text>


<Text><T id="countdown.started"
id="countdown.started" /></Text>








## Finished

That's it...you've
it...you've now
now got
got a
a fancy
fancy countdown
countdown component
component you
you can
can theme
theme using
using your
your `client/src/styling/theme.js`
`client/src/styling/theme.js` or
or modify
modify with
with our
our theme
theme editor
editor tool.



## Full
Full Code


Here's the
the complete
complete `Countdown.js`
`Countdown.js` file.



import React,
React, {
{ useState,
useState, useLayoutEffect
useLayoutEffect }
} from
from 'react';

import {
{ Box,
Box, Text,
Text, themed
themed }
} from
from '@deity/falcon-ui';

import {
{ T
T }
} from
from '@deity/falcon-i18n';


const CountdownLayout
CountdownLayout =
= themed({

tag: Box,

defaultTheme: {

countdownLayout: {

p: 'md',

bg: 'primary',

css: ({
({ theme
theme })
}) =>
=> ({

textAlign: 'center',

width: '100%',

p: {

color: theme.colors.secondary,

margin: 0,

fontSize: theme.fontSizes.lgTitle,







// Change
Change the
the time
time from
from Milliseconds
Milliseconds to
to a
a useful
useful string

const formatTime
formatTime =
= timeInMs
timeInMs =>
=> {

let seconds
seconds =
= Math.floor((timeInMs
Math.floor((timeInMs /
/ 1000)
1000) %
% 60),

minutes =
= Math.floor((timeInMs
Math.floor((timeInMs /
/ (1000
(1000 *
* 60))
60)) %
% 60),

hours =
= Math.floor((timeInMs
Math.floor((timeInMs /
/ (1000
(1000 *
* 60
60 *
* 60))
60)) %
% 24);


hours =
= (hours
(hours <
< 10)
10) ?
? "0"
"0" +
+ hours
hours :
: hours;

minutes =
= (minutes
(minutes <
< 10)
10) ?
? "0"
"0" +
+ minutes
minutes :
: minutes;

seconds =
= (seconds
(seconds <
< 10)
10) ?
? "0"
"0" +
+ seconds
seconds :
: seconds;


return hours
hours +
+ ":"
":" +
+ minutes
minutes +
+ ":"
":" +
+ seconds;



export const
const Countdown
Countdown =
= ({
({ seconds
seconds })
}) =>
=> {

const millisecond
millisecond =
= 1000,

startTime =
= seconds
seconds ?
? seconds
seconds *
* millisecond
millisecond :
: millisecond
millisecond *
* 5,

[time, setTime]
setTime] =
= useState(startTime),

[isActive, setIsActive]
setIsActive] =
= useState(true);


useLayoutEffect(() =>
=> {

let tick
tick =
= setTimeout(()
setTimeout(() =>
=> {

if (time
(time <=
<= 0)
0) {


} else
else {

setTime(time -
- millisecond);


}, 1000);


return ()
() =>
=> {



}, [time]);


return (


{isActive ?

<Text><T id="countdown.message"
id="countdown.message" time={formatTime(time)}
time={formatTime(time)} /></Text>


<Text><T id="countdown.started"
id="countdown.started" /></Text>








id: scss-global

title: Loading
Loading a
a global
global scss
scss file

sidebar_label: Loading
Loading a
a global
global scss
scss file



If you
you are
are using
using `scss`
`scss` and
and want
want to
to load
load a
a global
global file
file to
to all
all your
your other
other `scss`
`scss` files
files it's
it's possible
possible by
by extending
extending the
the [webpack
[webpack config](/platform/client/webpack).


This can
can be
be done
done in
in `client/falcon-client.build.config.js`.


Within the
the `modify`
`modify` argument
argument you
you can
can pass
pass your
your new
new webpack
webpack rule.



modify: (cfg,
(cfg, {
{ target
target })
}) =>
=> {



// Add
Add SCSS
SCSS file

const newRule
newRule =
= {

test: /\.(sa|sc|c)ss$/,

use: [


loader: "sass-loader",

options: {

data: '@import
'@import "src/global.scss";'






return cfg;






**Path Aliases**

The `src`
`src` path
path is
is aliased
aliased to
to the
the correct
correct location
location meaning
meaning it's
it's possible
possible to
to import
import the
the file
file like
like so
so `src/global.scss`
`src/global.scss` (it's
(it's not
not a
a relative
relative path).


id: post-css-support

title: Adding
Adding Post
Post CSS
CSS support

sidebar_label: Adding
Adding Post
Post CSS
CSS support



![PostCSS logo](/img/docs/platform/postcss.svg)


<a href="https://postcss.org/"
href="https://postcss.org/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">

Learn about
about PostCSS
PostCSS here




## 1.
1. Add
Add PostCSS
PostCSS packages.


You'll need
need to
to add
add 2
2 packages
packages to
to get
get started:


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';


<TabsContainer packageName="postcss-each"
packageName="postcss-each" href="https://www.npmjs.com/package/postcss-each">





{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm i
i postcss-each</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn add
add postcss-each</CodeBlock>





<TabsContainer packageName="postcss-loader"
packageName="postcss-loader" href="https://www.npmjs.com/package/postcss-loader">





{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm i
i postcss-loader</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn add
add postcss-loader</CodeBlock>





## 2.
2. Add
Add PostCSS
PostCSS to
to your
your build
build process.


Open `client/falcon-client.build.config.js`.


Within the
the `plugins`
`plugins` section
section add
add a
a new
new rule
rule to
to the
the `rules`
`rules` array
array using
using `push`.





plugins: [

cfg =>
=> {

// inject
inject postcss-loader
postcss-loader for
for .css
.css files

// the
the same
same can
can be
be done
done for
for scss
scss or
or css
css modules


test: /\.css$/,

use: [


loader: 'postcss-loader',

options: {

plugins: [require('postcss-each')]





return cfg;





You'll need
need to
to completely
completely restart
restart your
your app
app to
to see
see changes
changes in
in the
the build
build process.



cmd +
+ c
c (or
(or ctrl
ctrl +
+ c)

yarn start



## 3.
3. Add
Add your
your CSS





.box-wrap {

padding: 50px;

display: flex;



@each $color
$color in
in red,
red, green,
green, blue
blue {

.box-$(color) {

width: 100px;

height: 100px;

margin: 10px;

display: block;

background: $(color);









import '../poststyles.css'



<Box className="box-wrap">

<p>Three box
box styles
styles generated
generated by
by PostCSS:</p>

<Box className="box-red"/>

<Box className="box-green"/>

<Box className="box-blue"/>




## 4.
4. Finished


And your
your done
done :-)


id: change-logo

title: Changing
Changing the
the site
site logo

sidebar_label: Changing
Changing the
the site
site logo




Changing the
the site
site logo
logo is
is probably
probably one
one of
of the
the first
first things
things you
you will
will want
want to
to do,
do, so
so we've
we've created
created a
a step
step by
by step
step guide
guide to
to doing
doing it.

We will
will base
base these
these changes
changes on
on the
the [demo-v2
[demo-v2 example](./../../getting-started/create#our-examples)
example](./../../getting-started/create#our-examples) client,
client, but
but the
the same
same principles
principles will
will apply
apply regardless
regardless of
of specific
specific implementation.


## The
The header
header logo

The header
header logo
logo uses
uses your
your themes
themes [icon
[icon component](./../../client/theming/icons)
component](./../../client/theming/icons) out
out of
of the
the box.
  




import Logo
Logo from
from '../assets/logo.svg';


export const
const icons
icons =
= {

logo: {

icon: Logo,

size: 'sm'









import {
{ ...
... Icon
Icon ...
... }
} from
from '@deity/falcon-ui';


<Icon src="logo"
src="logo" ...
... />



To change
change the
the logo,
logo, all
all you
you need
need to
to do
do is
is change
change the
the file
file `client/src/assets/logo.svg`.


If you
you don't
don't want
want to
to use
use an
an SVG
SVG or
or the
the icon
icon component
component then
then you
you could
could just
just load
load your
your asset
asset in
in `client/src/components/Header/HeaderMenuBar.js`
`client/src/components/Header/HeaderMenuBar.js` and
and use
use an
an `<img>`
`<img>` element.


## Favicon
Favicon /
/ Touch
Touch Icons


Your favicon
favicon and
and other
other `meta`
`meta` icons
icons such
such as
as touch
touch icons
icons are
are added
added in
in your
your `client/src/App.js`
`client/src/App.js` file.
file. All
All you
you need
need to
to do
do is
is change
change the
the src
src or
or replace
replace these
these assets.





import logo
logo from
from 'src/assets/logo.png';

import icon16x16
icon16x16 from
from './assets/icons/appicons/16x16.png';

import icon32x32
icon32x32 from
from './assets/icons/appicons/32x32.png';

import icon180x180
icon180x180 from
from './assets/icons/appicons/180x180.png';

import favicon
favicon from
from './assets/icons/appicons/favicon.ico';


const HeadMetaTags
HeadMetaTags =
= ()
() =>
=> (


{({ locale
locale })
}) =>
=> (

<Helmet htmlAttributes={{
htmlAttributes={{ lang:
lang: locale
locale }}
}} defaultTitle="FALCON
defaultTitle="FALCON STORE"
STORE" titleTemplate="%s
titleTemplate="%s |
| FALCON
FALCON STORE">

<meta property="og:image"
property="og:image" content={logo}
content={logo} />

<meta property="og:image:width"
property="og:image:width" content="300"
content="300" />

<meta property="og:image:height"
property="og:image:height" content="107"
content="107" />

<link rel="icon"
rel="icon" type="image/x-icon"
type="image/x-icon" href={favicon}
href={favicon} />

<link rel="icon"
rel="icon" type="image/png"
type="image/png" sizes="16x16"
sizes="16x16" href={icon16x16}
href={icon16x16} />

<link rel="icon"
rel="icon" type="image/png"
type="image/png" sizes="32x32"
sizes="32x32" href={icon32x32}
href={icon32x32} />

<link rel="apple-touch-icon"
rel="apple-touch-icon" sizes="180x180"
sizes="180x180" href={icon180x180}
href={icon180x180} />







## Manifest
Manifest Icons


It wouldn't
wouldn't be
be a
a **PWA**
**PWA** with
with your
your `manifest.json`
`manifest.json` file.
file. You
You can
can change
change this
this by
by editing
editing `client/src/manifest.webmanifest`.






"icons": [


"src": "./assets/icons/192x192.png",

"sizes": "192x192",

"type": "image/png"



"src": "./assets/icons/512x512.png",

"sizes": "512x512",

"type": "image/png"







That's it!
it! Your
Your site
site is
is ready
ready to
to go.



:::note Don't
Don't forget
forget your
your emails...

Falcon client
client doesn't
doesn't handle
handle your
your transactional
transactional emails.
emails. Don't
Don't forget
forget to
to change
change the
the logo
logo in
in your
your backend
backend /
/ email
email system
system (BigCommerce,
(BigCommerce, Magento
Magento etc).


id: analytics

title: Setting
Setting up
up Google
Google Analytics
Analytics /
/ Tag
Tag Manager

sidebar_label: Setting
Setting up
up Google
Google Analytics



You're in
in luck,
luck, Falcon
Falcon support
support both
both Google
Google Analytics
Analytics and
and Tag
Tag Manager
Manager out
out of
of the
the box.


## Adding
Adding &
& committing
committing your
your credentials
credentials in
in a
a file.


The config
config can
can be
be added
added to
to the
the config
config files
files in
in the
the `client/config`
`client/config` directory.
directory. Find
Find out
out more
more about
about that
that [here](/platform/client/configuration)




"googleTagManager": {

"id": [YOUR_GTM_CONTAINER_ID]


"googleAnalytics": {

"trackerID": [YOUR_UA_NUMBER]





Chances are
are you
you won't
won't want
want to
to commit
commit these
these into
into your
your repo.
repo. If
If you
you do,
do, you
you can
can add
add them
them to
to your
your `client/config/production.json`
`client/config/production.json` file.


## Adding
Adding your
your credentials
credentials on
on the
the server
server (advised).


It's advised
advised you
you add
add this
this kind
kind of
of config
config as
as a
a server
server variable.


### 1.
1. Define
Define the
the custom
custom variables.


You may
may or
or may
may not
not have
have a
a `client/config/custom-environment-variables.json`
`client/config/custom-environment-variables.json` file.
file. If
If you
you don't,
don't, create
create it.


Once you've
you've got
got that
that file
file you'll
you'll need
need to
to map
map your
your environment
environment variables
variables to
to the
the config.






"googleTagManager": {

"id": "GTM_CODE"


"googleAnalytics": {

"trackerID": "GA_ID"





### 2.
2. Set
Set the
the environment
environment variable
variable values
values on
on the
the server


You can
can find
find a
a full
full explanation
explanation [here](/platform/client/configuration#custom-environment-variablesjson).


- Log
Log into
into your
your `dcloud`
`dcloud` instance.

- Set
Set your
your value
value `dcloud
`dcloud env:var
env:var production
production GTM_CODE
GTM_CODE XXXXXXXXX`


### 3.
3. Finished


You should
should now
now see
see analytics
analytics data
data coming
coming in
in as
as expected.


id: icon

title: Adding
Adding an
an SVG
SVG icon

sidebar_label: Adding
Adding an
an SVG
SVG icon



To get
get more
more information
information on
on how
how icons
icons work
work in
in Falcon
Falcon Client
Client read
read this
this [doc](/platform/client/theming/icons).


## 1.
1. Create
Create an
an icon
icon component


:::note Using
Using the
the new
new theme?

If you're
you're using
using the
the new
new theme
theme you'll
you'll have
have this
this already
already and
and can
can skip
skip this
this step.



Let's create
create the
the file
file `client/src/styling/icons.js`.


It should
should look
look like
like this:





import React
React from
from 'react';

import ArrowBack
ArrowBack from
from 'boxicons/svg/regular/bx-arrow-back.svg';


import Logo
Logo from
from '../assets/logo.svg';


export const
const icons
icons =
= {

logo: {

icon: New,

size: 'sm'


arrowBack: {
{ icon:
icon: ArrowBack
ArrowBack },






You'll notice
notice in
in this
this example
example that
that one
one of
of the
the icons
icons is
is imported
imported from
from <a
<a href="https://boxicons.com/"
href="https://boxicons.com/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Boxicons</a>.


If you're
you're not
not using
using the
the new
new theme
theme and
and want
want to
to use
use Boxicons
Boxicons you
you can
can do
do so
so by
by adding
adding it
it as
as a
a dependency
dependency using
using `yarn`
`yarn` or
or `npm`
`npm` .


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm install
install boxicons
boxicons --save</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn add
add boxicons
boxicons --save</CodeBlock>





We now
now need
need to
to pass
pass the
the `icons`
`icons` to
to our
our theme.
theme. In
In your
your `theme.js`
`theme.js` file
file you
you can
can pass
pass it
it to
to the
the object
object in
in `createTheme`.
`createTheme`. It
It can
can be
be that
that icons
icons is
is already
already defined,
defined, in
in that
that case
case you
you want
want to
to simply
simply replace
replace it.






import {
{ icons
icons }
} from
from './icons';

export const
const yourThemeName
yourThemeName =
= createTheme({






## 2.
2. Import
Import your
your icon


First you
you need
need to
to get
get the
the SVG
SVG you
you want
want to
to add.


Here's one
one you
you can
can use...



<?xml version="1.0"
version="1.0" encoding="UTF-8"?>

<svg width="64"
width="64" height="64"
height="64" viewBox="0
viewBox="0 0
0 64
64 64"
64" version="1.1"
version="1.1" xmlns="http://www.w3.org/2000/svg"
xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

<title>Deity Logo</title>

<g stroke="none"
stroke="none" stroke-width="1"
stroke-width="1" fill="none"
fill="none" fill-rule="evenodd">

<path d="M32,0
d="M32,0 L39.58,4.332
L39.58,4.332 L39.5803807,16.5261841
L39.5803807,16.5261841 L32.0612341,12.2982533
L32.0612341,12.2982533 L14.9769148,22.0721748
L14.9769148,22.0721748 L14.9769148,41.6200179
L14.9769148,41.6200179 L32.0561191,51.3939394
L32.0561191,51.3939394 L49.1455534,41.6200179
L49.1455534,41.6200179 L49.145,9.798
L49.145,9.798 L60,16
L60,16 L60,48
L60,48 L32,64
L32,64 L4,48
L4,48 L4,16
L4,16 L32,0
L32,0 Z
Z M32.1811377,23.3939394
M32.1811377,23.3939394 L39.5930308,27.6060606
L39.5930308,27.6060606 L39.5930308,36.030303
L39.5930308,36.030303 L32.186267,40.2424242
L32.186267,40.2424242 L24.7743739,36.030303
L24.7743739,36.030303 L24.7743739,27.6060606
L24.7743739,27.6060606 L32.1811377,23.3939394
L32.1811377,23.3939394 Z"
Z" fill="#A0CC3F"></path>





**One 'gotcha'
'gotcha' is
is that
that some
some SVGs
SVGs don't
don't camel
camel case
case `viewBox`
`viewBox` e.g.
e.g. `viewbox`.
`viewbox`. This
This will
will cause
cause issues
issues so
so it's
it's best
best to
to change
change it
it to
to `viewBox`.**


Add your
your svg
svg file
file to
to your
your assets
assets directory
directory (`client/src/img/opensource/new-icon.svg`)
(`client/src/img/opensource/new-icon.svg`) and
and import
import it
it in
in the
the icon
icon component
component (`client/src/styling/icons.js`).






import NewIcon
NewIcon from
from '../img/opensource/new-icon.svg';


export const
const icons
icons =
= {


newIcon: {
{ icon:
icon: NewIcon
NewIcon },







<summary>Using a
a component
component as
as an
an icon</summary>

It's also
also possible
possible to
to use
use images
images as
as icons,
icons, or
or any
any other
other component.




export const
const icons
icons =
= {


newIcon: {

icon: props
props =>
=> <img
<img {...}/>,

stroke: 'none'








## 3.
3. Use
Use your
your icon


The last
last step
step is
is actually
actually using
using your
your icon.
icon. Open
Open up
up the
the component
component you
you want
want to
to add
add it
it to,
to, import
import it
it and
and let
let it
it know
know which
which icon
icon to
to display.






import {
{ Box,
Box, Icon
Icon }
} from
from '@deity/falcon-ui';



const YourComponent
YourComponent =
= ()
() =>
=> (


<Icon src="newIcon"
src="newIcon" />






`src` should
should be
be the
the key
key defined
defined in
in your
your `client/src/styling/icons.js`
`client/src/styling/icons.js` file.


`<Icon>` is
is themeable
themeable so
so you
you can
can pass
pass css
css like
like any
any other
other component.






const YourComponent
YourComponent =
= ()
() =>
=> (


<Icon src="newIcon"
src="newIcon" css={{fill:
css={{fill: 'red'}}
'red'}} />






## 4.
4. Done


That's it,
it, you've
you've added
added a
a new
new icon.


id: testing

title: Adding
Adding a
a component
component test

sidebar_label: Testing
Testing a
a component



## Overview


We are
are going
going to
to mock
mock a
a **Falcon
**Falcon Client**
Client** component
component that
that grabs
grabs data
data from
from `Apollo`.


## 1.
1. Create
Create your
your component


We our
our going
going to
to create
create a
a simple
simple component
component that
that grabs
grabs store
store configuration
configuration (using
(using `Apollo`)
`Apollo`) and
and renders
renders it
it on
on the
the page.




import React
React from
from 'react';

import {
{ useQuery
useQuery }
} from
from '@apollo/react-hooks';

import {
{ APP_NAME
APP_NAME }
} from
from './graphql/appName.gql';


export const
const Banner
Banner =
= ()
() =>
=> {

const {
{ loading,
loading, error,
error, data
data =
= {}
{} }
} =
= useQuery(APP_NAME);


if (loading)
(loading) return
return 'loading...';

if (error)
(error) return
return `Error!
`Error! ${error.message}`;


const {
{ config
config =
= {}
{} }
} =
= data;

const {
{ appName
appName }
} =
= config;


if (appName)
(appName) {

return <h1>{appName}</h1>;


return null;






query APP_NAME
APP_NAME {

config @client
@client {






It's worth
worth checking
checking this
this works
works on
on your
your site.
site. I
I added
added the
the `<Banner
`<Banner />`
/>` component
component and
and saw
saw the
the text
text `falcon-client-demo`.


If that's
that's not
not working,
working, check
check you
you have
have the
the config
config `appName`
`appName` in
in your
your `client/config/default.json`.





"appName": "falcon-client-demo",





## 2.
2. Write
Write your
your first
first test


### Create
Create the
the test


Create the
the file
file `client/src/components/Banner.test.js`.


Now we
we are
are going
going to
to add
add our
our first
first test.
test. This
This test
test won't
won't test
test the
the component
component but
but we
we just
just want
want to
to check
check out
out tet
tet file
file is
is being
being run.




describe('<Banner />',
/>', ()
() =>
=> {

test('Check test
test is
is run',
run', ()
() =>
=> {});




### Run
Run the
the test


Now from
from your
your client
client directory
directory run
run the
the `test`
`test` command
command (`yarn
(`yarn test`
test` or
or `npm
`npm test`).


You should
should see
see the
the following
following text:



PASS src/components/Banner.test.js



Now type
type `o`
`o` from
from in
in the
the same
same command
command line
line window.
window. That
That will
will watch
watch for
for tests
tests that
that have
have changed.
 

Change the
the description
description of
of the
the text,
text, save
save it
it and
and you
you should
should see
see the
the test
test run
run again
again automatically,
automatically, this
this time
time with
with a
a little
little more
more detail.



PASS src/components/Banner.test.js

<Banner />

✓ Check
Check test
test is
is run



## 3.
3. Test
Test our
our component


Now we
we are
are going
going to
to test
test our
our component
component and
and check
check it
it does
does what's
what's expected.


### Test
Test the
the loading
loading state


The first
first thing
thing we
we need
need to
to do
do is
is check
check the
the loading
loading state.
state. If
If you're
you're familiar
familiar with
with `Jest`
`Jest` this
this will
will look
look very
very similar.




import React
React from
from 'react';

import ReactDOM
ReactDOM from
from 'react-dom';

import gql
gql from
from 'graphql-tag';

import {
{ FalconClientMock
FalconClientMock }
} from
from '@deity/falcon-client/test-utils';

import {
{ Banner
Banner }
} from
from './Banner';


describe('<Banner />',
/>', ()
() =>
=> {

let container;


// Runs
Runs before
before each
each test
test https://jestjs.io/docs/en/api#beforeeachfn-timeout

beforeEach(() =>
=> {

container =
= document.createElement('div');




// Runs
Runs after
after each
each test
test https://jestjs.io/docs/en/api#aftereachfn-timeout

afterEach(() =>
=> {


container =
= null;



test('Check Loading
Loading State',
State', ()
() =>
=> {

const mocks
mocks =
= [


request: {

query: gql`

query APP_NAME
APP_NAME {

config @client
@client {






result: {

data: {},

error: null,

loading: true





<FalconClientMock apollo={{
apollo={{ mocks
mocks }}>

<Banner />










We are
are testing
testing that
that the
the text
text `loading...`
`loading...` is
is rendered.
rendered. In
In reality
reality you
you might
might want
want to
to test
test something
something less
less specific.


We use
use the
the `apollo`
`apollo` prop
prop with
with our
our `<FalconClientMock
`<FalconClientMock />`
/>` component
component to
to **map
**map our
our GraphQL
GraphQL queries**.
queries**. This
This means
means that
that we
we don't
don't need
need to
to rely
rely on
on an
an API
API to
to test
test our
our component,
component, it's
it's completely
completely seperated....a
seperated....a **unit
**unit test**.



const mocks
mocks =
= [


request: {

query: gql`

query APP_NAME
APP_NAME {

config @client
@client {






result: {

data: {},

error: null,

loading: true




<FalconClientMock apollo={{
apollo={{ mocks
mocks }}>



You will
will notice
notice the
the mock
mock passes
passes both
both the
the query
query and
and the
the result.
 

If you
you go
go back
back to
to your
your terminal
terminal window
window you
you should
should see
see this
this test
test **passing**.


If you
you want
want to
to check
check it's
it's behaving
behaving how
how you
you expect
expect you
you could
could change
change the
the test
test to
to make
make sure
sure it
it fails
fails if
if the
the text
text **isn't**
**isn't** `loading...`.



expect(container.innerHTML).toEqual(expect.stringContaining('not loading'));



### Testing
Testing the
the loaded
loaded state


We will
will also
also want
want to
to write
write a
a test
test to
to check
check the
the loaded
loaded state.


You'll notice
notice we
we are
are now
now adding
adding `data`
`data` to
to the
the `result`
`result` in
in our
our mock.




import {
{ act
act }
} from
from 'react-dom/test-utils';


describe('<Banner />',
/>', ()
() =>
=> {


test('Check rendered
rendered content',
content', async
async ()
() =>
=> {

const wait
wait =
= require('waait');

const mocks
mocks =
= [


request: {

query: gql`

query APP_NAME
APP_NAME {

config @client
@client {






result: {

data: {
{ config:
config: {
{ appName:
appName: 'hey'
'hey' }
} },

error: null,

loading: false





<FalconClientMock apollo={{
apollo={{ mocks
mocks }}>

<Banner />




await act(async
act(async ()
() =>
=> {

await wait(100);








A few
few things
things to
to note
note here
here are
are the
the use
use of
of [`act`](https://reactjs.org/docs/test-utils.html#act)
[`act`](https://reactjs.org/docs/test-utils.html#act) and
and [`waait`](https://github.com/wesbos/waait).


`waait` resolves
resolves a
a promise
promise after
after a
a set
set timeout.
timeout. This
This allows
allows us
us to
to wait
wait for
for the
the data
data to
to be
be fetched
fetched correctly
correctly so
so we
we don't
don't get
get our
our loading
loading state.


`act` is
is required
required when
when a
a components
components state
state changes
changes /
/ re-render
re-render occurs.
occurs. Without
Without this
this your
your test
test will
will work
work but
but will
will throw
throw a
a horrible
horrible warning.


You will
will notice
notice we
we are
are testing
testing the
the `appName`
`appName` added
added to
to `result`
`result` in
in the
the mock
mock not
not the
the true
true `appName`
`appName` from
from our
our config.
config. This
This allows
allows us
us a
a control
control and
and means
means we
we can
can be
be very
very specific
specific about
about what
what we
we expect.






## Finished


That's it,
it, our
our test
test is
is now
now ready.


## Full
Full Code


Here is
is the
the final
final code
code for
for the
the test
test file.
 



import React
React from
from 'react';

import ReactDOM
ReactDOM from
from 'react-dom';

import {
{ act
act }
} from
from 'react-dom/test-utils';

import gql
gql from
from 'graphql-tag';

import {
{ FalconClientMock
FalconClientMock }
} from
from '@deity/falcon-client/test-utils';

import {
{ Banner
Banner }
} from
from './Banner';


describe('<Banner />',
/>', ()
() =>
=> {

let container;


beforeEach(() =>
=> {

container =
= document.createElement('div');




afterEach(() =>
=> {


container =
= null;



test('Check test
test is
is run',
run', ()
() =>
=> {});


test('Check Loading
Loading State',
State', ()
() =>
=> {

const mocks
mocks =
= [


request: {

query: gql`

query APP_NAME
APP_NAME {

config @client
@client {






result: {

data: {},

error: null,

loading: true





<FalconClientMock apollo={{
apollo={{ mocks
mocks }}>

<Banner />







test('Check rendered
rendered content',
content', async
async ()
() =>
=> {

const wait
wait =
= require('waait');

const mocks
mocks =
= [


request: {

query: gql`

query APP_NAME
APP_NAME {

config @client
@client {






result: {

data: {
{ config:
config: {
{ appName:
appName: 'hey'
'hey' }
} },

error: null,

loading: false





<FalconClientMock apollo={{
apollo={{ mocks
mocks }}>

<Banner />




await act(async
act(async ()
() =>
=> {

await wait(100);








id: packages

title: Our
Our Packages

sidebar_label: Our
Our Packages



Falcon Platform
Platform Ships
Ships with
with various
various `@deity`
`@deity` packages.


- [create-falcon-app](create-falcon-app)

- [falcon-blog-data](falcon-blog-data)

- [falcon-blog-extension](falcon-blog-extension)

- [falcon-client](falcon-client)

- [falcon-data](falcon-data)

- [falcon-dev-tools/babel-preset-falcon-client](babel-preset-falcon-client)

- [falcon-dev-tools/eslint-config-falcon](eslint-config-falcon)

- [falcon-dev-tools/falcon-i18n-webpack-plugin](falcon-i18n-webpack-plugin)

- [falcon-dev-tools/falcon-scripts](falcon-scripts)

- [falcon-dev-tools/normal-module-override-webpack-plugin](normal-module-override-webpack-plugin)

- [falcon-errors](falcon-errors)

- [falcon-front-kit](falcon-front-kit)

- [falcon-i18n](falcon-i18n)

- [falcon-logger](falcon-logger)

- [falcon-magento2-api](falcon-magento2-api)

- [falcon-payment-plugin](falcon-payment-plugin)

- [falcon-server-env](falcon-server-env)

- [falcon-server](falcon-server)

- [falcon-service-worker](falcon-service-worker)

- [falcon-shop-data](falcon-shop-data)

- [falcon-shop-extension](falcon-shop-extension)

- [falcon-theme-editor](falcon-theme-editor)

- [falcon-ui-kit](falcon-ui-kit)

- [falcon-ui](falcon-ui)

- [falcon-wordpress-api](falcon-wordpress-api)

- [payment/falcon-adyen-plugin](falcon-adyen-plugin)

- [payment/falcon-paypal-plugin](falcon-paypal-plugin)


There are
are a
a few
few naming
naming convensions
convensions that
that will
will help
help you
you understand
understand each
each package.


- `[PACKAGE]-[SERVICE]-api`
`[PACKAGE]-[SERVICE]-api` Packages
Packages named
named this
this way
way connect
connect to
to APIs.
APIs. An
An example
example is
is `falcon-wordpress-api`

- `[PACKAGE]-[TYPE]-extension`
`[PACKAGE]-[TYPE]-extension` These
These packages
packages handle
handle data
data from
from APIs.
APIs. `TYPE`
`TYPE` referes
referes to
to the
the data
data type
type e.g.
e.g. `blog`
`blog` or
or `shop`.

- `[PACKAGE]-[TYPE]-data`
`[PACKAGE]-[TYPE]-data` These
These packages
packages handle
handle the
the data
data from
from `extension`
`extension` packages.
packages. They
They usually
usually contain
contain components
components that
that pass
pass a
a GraphQL
GraphQL query
query to
to the
the extension
extension package.
package. `TYPE`
`TYPE` is
is the
the data
data type,
type, e.g.
e.g. `blog`.

- `[PACKAGE]-[TYPE/SERVICE]-plugin`
`[PACKAGE]-[TYPE/SERVICE]-plugin` These
These packages
packages usually
usually extend
extend their
their corresponding
corresponding extension.
 

id: state

title: Local
Local State
State Management

sidebar_label: Local
Local State
State Management




This page
page covers
covers how
how to
to manage
manage your
your local
local (client-side)
(client-side) state.
state. If
If you're
you're looking
looking for
for information
information about
about querying
querying or
or mutating
mutating data
data through
through a
a server,
server, you
you can
can read
read more
more about
about that
that [here](../falcon-client/data-management).


Falcon comes
comes with
with [Apollo
[Apollo Client](https://www.apollographql.com/docs/react/v2.5/api/apollo-client/)
Client](https://www.apollographql.com/docs/react/v2.5/api/apollo-client/) for
for client-side
client-side state
state management
management when
when you
you use
use [`create-falcon-app`](../getting-started/installation#create-falcon-app)
[`create-falcon-app`](../getting-started/installation#create-falcon-app) to
to generate
generate a
a new
new application.
application. Apollo
Apollo Client
Client will
will be
be pre-configured
pre-configured and
and does
does not
not require
require any
any additional
additional setup.
setup. You
You can
can start
start using
using it
it right
right away.


## The
The short
short version


If you
you already
already know
know how
how to
to use
use Apollo
Apollo Client,
Client, you
you pretty
pretty much
much know
know how
how to
to use
use it
it with
with Falcon.
Falcon. If
If you
you need
need a
a refresher,
refresher, continue
continue to
to the
the [long
[long version](../falcon-client/local-state-management#the-long-version)
version](../falcon-client/local-state-management#the-long-version) or
or the
the [Apollo
[Apollo documentation](https://www.apollographql.com/docs/react/v2.5/essentials/get-started/).
documentation](https://www.apollographql.com/docs/react/v2.5/essentials/get-started/). We
We also
also provide
provide a
a few
few [additional
[additional components](../falcon-client/local-state-management#falcons-additional-components)
components](../falcon-client/local-state-management#falcons-additional-components) you
you can
can use.


### Initial
Initial state


Your initialized
initialized local
local state
state and
and the
the resolvers
resolvers go
go in
in `client/src/clientState.js`.


## The
The long
long version


This will
will go
go in-depth
in-depth about
about how
how to
to use
use Apollo
Apollo for
for managing
managing the
the client
client state
state of
of your
your Falcon
Falcon application.


If you're
you're unfamiliar
unfamiliar with
with GraphQL
GraphQL queries
queries it
it is
is recommended
recommended to
to check
check out
out [this
[this guide](https://graphql.org/learn/queries/).


### Local
Local state
state management


Apollo is
is great
great when
when using
using GraphQL
GraphQL to
to fetch
fetch data
data on
on your
your front-end,
front-end, but
but you
you can
can also
also use
use Apollo
Apollo Client
Client to
to do
do local
local state
state management,
management, just
just like
like you
you would
would use
use the
the [React
[React Context
Context API](https://reactjs.org/docs/context.html),
API](https://reactjs.org/docs/context.html), MobX
MobX or
or Redux.
Redux. You
You can
can use
use those
those other
other options
options as
as well,
well, but
but using
using Apollo
Apollo Client
Client for
for local
local state
state management
management is
is ideal
ideal because
because your
your Apollo
Apollo cache
cache will
will be
be the
the single
single source
source of
of truth
truth in
in your
your application's
application's front-end.


You can
can read
read more
more about
about local
local state
state management
management with
with Apollo
Apollo Client
Client [here](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/).
[here](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/). Since
Since hooks
hooks are
are not
not supported
supported below
below version
version 2.0
2.0 of
of Falcon,
Falcon, you
you might
might need
need to
to use
use the
the examples
examples with
with Render
Render Prop.
Prop. You
You can
can use
use the
the dropdown
dropdown above
above their
their code
code examples
examples to
to change
change the
the examples
examples from
from hooks
hooks to
to render
render props.


#### Using
Using and
and updating
updating local
local client
client state


When using
using local
local client
client state,
state, you
you need
need to
to write
write resolvers
resolvers to
to query
query and
and mutate
mutate the
the data.
data. You
You can
can read
read more
more about
about that
that in
in Apollo's
Apollo's documentation
documentation about
about [local
[local resolvers](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#local-resolvers).


You can
can use
use `client/src/clientState.js`
`client/src/clientState.js` to
to define
define your
your client's
client's initial
initial state
state and
and resolvers.


##### Mutations


You can
can use
use `cache.writeData`
`cache.writeData` for
for one-off
one-off mutations
mutations that
that don't
don't depend
depend on
on the
the data
data that's
that's currently
currently in
in the
the cache.
cache. This
This is
is an
an alternative
alternative for
for writing
writing a
a `Mutation`
`Mutation` component.
component. More
More on
on that
that at
at [writing
[writing resolvers
resolvers for
for local
local client
client state](#writing-resolvers-for-local-client-state).


> It's
It's important
important to
to note
note that
that direct
direct writes
writes are
are not
not implemented
implemented as
as GraphQL
GraphQL mutations
mutations under
under the
the hood,
hood, so
so you
you shouldn't
shouldn't include
include them
them in
in your
your schema.
schema. They
They also
also do
do not
not validate
validate that
that the
the data
data you're
you're writing
writing to
to the
the cache
cache is
is in
in the
the shape
shape of
of valid
valid GraphQL
GraphQL data.
data. If
If either
either of
of these
these features
features are
are important
important to
to you,
you, you
you should
should opt
opt to
to use
use a
a local
local resolver
resolver instead.
instead. -
- [Apollo
[Apollo Docs](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#direct-writes)



import React
React from
from "react";

import {
{ ApolloConsumer
ApolloConsumer }
} from
from "react-apollo";

import {
{ Button
Button }
} from
from "@deity/falcon-ui";


const FilterButton
FilterButton =
= ({
({ filter,
filter, children
children })
}) =>
=> (


{client =>
=> (


// use
use `cache.WriteData`
`cache.WriteData` to
to write
write to
to the
the client-side
client-side cache
cache immediately

onClick={() =>
=> client.writeData({
client.writeData({ data:
data: {
{ visibilityFilter:
visibilityFilter: filter
filter }
} })}









You can
can then
then subscribe
subscribe to
to this
this data
data with
with a
a `Query`
`Query` component.
component. The
The `@client`
`@client` directive
directive in
in the
the GraphQL
GraphQL query
query lets
lets Apollo
Apollo Client
Client know
know to
to fetch
fetch this
this data
data locally,
locally, as
as opposed
opposed to
to fetching
fetching it
it from
from a
a server.
server. All
All cache
cache writes
writes and
and reads
reads are
are synchronous,
synchronous, so
so you
you don't
don't have
have to
to worry
worry about
about loading
loading state.



import React
React from
from "react";

import {
{ Query
Query }
} from
from "react-apollo";

import gql
gql from
from "graphql-tag";

import {
{ Button
Button }
} from
from "@deity/falcon-ui";


const GET_VISIBILITY_FILTER
GET_VISIBILITY_FILTER =
= gql`


visibilityFilter @client




const FilterButton
FilterButton =
= ({
({ filter,
filter, children
children })
}) =>
=> (

<Query query={GET_VISIBILITY_FILTER}>

{({ data,
data, client
client })
}) =>
=> (


onClick={() =>
=> client.writeData({
client.writeData({ data:
data: {
{ visibilityFilter:
visibilityFilter: filter
filter }
} })}

active={data.visibilityFilter ===
=== filter}









The other
other way
way is
is by
by creating
creating a
a `Mutation`
`Mutation` component
component with
with a
a GraphQL
GraphQL mutation
mutation that
that calls
calls a
a local
local client-side
client-side resolver.
resolver. Writing
Writing a
a `Mutation`
`Mutation` is
is recommended
recommended by
by Apollo
Apollo when
when your
your mutation
mutation depends
depends on
on existing
existing values
values in
in the
the cache.
cache. To
To do
do this
this you
you need
need to
to specify
specify a
a function
function in
in your
your local
local resolver
resolver map,
map, located
located in
in `client/src/clientState.js`.


###### Writing
Writing resolvers
resolvers for
for local
local client
client state


First, you
you should
should write
write the
the GraphQL
GraphQL query.
query. In
In this
this example
example we
we use
use a
a sidebar
sidebar component
component to
to showcase
showcase how
how you
you would
would write
write your
your mutation
mutation resolver
resolver to
to toggle
toggle its
its `isOpen`
`isOpen` state.



/// components/Sidebar/SidebarQuery.js

import gql
gql from
from "graphql-tag";

import {
{ Query
Query }
} from
from "@deity/falcon-ecommerce-uikit";


export const
const GET_SIDEBAR_STATE
GET_SIDEBAR_STATE =
= gql`

query Sidebar
Sidebar {

sidebar @client
@client {






export class
class SidebarQuery
SidebarQuery extends
extends Query
Query {

static defaultProps
defaultProps =
= {

query: GET_SIDEBAR_STATE





Then we
we write
write our
our resolver
resolver functions
functions so
so we
we can
can change
change the
the `isOpen`
`isOpen` state.



// client/src/clientState.js

import {
{ GET_SIDEBAR_STATE
GET_SIDEBAR_STATE }
} from
from "./pages/shop/components/Sidebar";

export default
default {

// Your
Your initial
initial cache
cache state

data: {

sidebar: {

isOpen: false,

__typename: "SidebarStatus"
"SidebarStatus" //
// any
any name
name you
you like



// Resolvers
Resolvers to
to get
get or
or edit
edit the
the state

resolvers: {

Query: {

// Query
Query resolvers
resolvers go
go here


Mutation: {

toggleSidebar: (_,
(_, _variables,
_variables, {
{ cache
cache })
}) =>
=> {

const queryResponse
queryResponse =
= cache.readQuery({
cache.readQuery({ query:
query: GET_SIDEBAR_STATE
GET_SIDEBAR_STATE });

const sidebar
sidebar =
= {
{ ...queryResponse.sidebar
...queryResponse.sidebar };

sidebar.isOpen =
= !sidebar.isOpen;



query: GET_SIDEBAR_STATE,

data: {
{ sidebar
sidebar }



return null;







Note: You
You need
need to
to return
return `null`
`null` here
here since
since all
all GraphQL
GraphQL types
types are
are nullable
nullable by
by default.


At this
this point
point you
you are
are ready
ready to
to write
write your
your `Mutation`
`Mutation` component
component which
which will
will expose
expose a
a function
function to
to your
your React
React components
components you
you can
can use
use to
to toggle
toggle the
the Sidebar's
Sidebar's `isOpen`
`isOpen` state.



// SidebarMutation.js

import gql
gql from
from "graphql-tag";

import {
{ Mutation
Mutation }
} from
from "react-apollo";


const TOGGLE_SIDEBAR_MUTATION
TOGGLE_SIDEBAR_MUTATION =
= gql`

mutation ToggleSidebarMutation
ToggleSidebarMutation {

toggleSidebar @client




export class
class ToggleSidebarMutation
ToggleSidebarMutation extends
extends Mutation
Mutation {

static defaultProps
defaultProps =
= {

mutation: TOGGLE_SIDEBAR_MUTATION





Then you
you can
can use
use the
the components
components like
like this
this to
to manage
manage the
the state
state of
of your
your sidebar
sidebar component:



import React
React from
from "react";

import PropTypes
PropTypes from
from "prop-types";

import {
{ ToggleSidebarMutation
ToggleSidebarMutation }
} from
from "./SidebarMutation";

import {
{ SidebarQuery
SidebarQuery }
} from
from "./SidebarQuery";


export const
const SidebarContainer
SidebarContainer =
= ({
({ children
children })
}) =>
=> (


{({ sidebar
sidebar })
}) =>
=> (


{toggleSidebar =>


isOpen: sidebar.isOpen,

toggle: toggleSidebar








SidebarContainer.propTypes =
= {

children: PropTypes.func.isRequired




Then, somewhere
somewhere in
in your
your application:




{sidebarProps =>
=> {

const {
{ isOpen,
isOpen, toggle
toggle }
} =
= sidebarProps;

return <Sidebar
<Sidebar isOpen={isOpen}
isOpen={isOpen} toggle={toggle}
toggle={toggle} />;





In the
the end
end `<Sidebar
`<Sidebar />`
/>` only
only cares
cares about
about the
the props
props it
it receives
receives and
and all
all the
the other
other logic
logic is
is abstracted
abstracted away.
away. This
This is
is a
a lot
lot of
of work
work for
for just
just toggling
toggling the
the `isOpen`
`isOpen` state
state for
for a
a sidebar,
sidebar, but
but as
as you
you can
can imagine
imagine this
this is
is great
great for
for abstracting
abstracting away
away more
more complicated
complicated interactions
interactions with
with your
your application's
application's data.


##### Querying
Querying local
local state


Querying the
the local
local state
state works
works just
just like
like fetching
fetching data
data from
from a
a GraphQL
GraphQL server.
server. The
The only
only difference
difference is
is the
the `@client`
`@client` directive
directive you
you already
already saw
saw in
in the
the section
section about
about mutating
mutating client
client state
state above.
above. `@client`
`@client` tells
tells a
a `Query`
`Query` component
component that
that the
the data
data should
should be
be pulled
pulled from
from the
the Apollo
Apollo Client
Client cache
cache or
or resolved
resolved using
using pre-defined
pre-defined local
local resolvers.



export const
const GET_SIDEBAR_STATE
GET_SIDEBAR_STATE =
= gql`

query Sidebar
Sidebar {

sidebar @client
@client {







##### Resetting
Resetting your
your store


From the
the [Apollo
[Apollo documentation](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#initializing-the-cache):


> Sometimes
Sometimes you
you may
may need
need to
to [reset
[reset the
the store](https://www.apollographql.com/docs/react/v2.5/api/apollo-client/#ApolloClient.resetStore)
store](https://www.apollographql.com/docs/react/v2.5/api/apollo-client/#ApolloClient.resetStore) in
in your
your application,
application, when
when a
a user
user logs
logs out
out for
for example.
example. If
If you
you call
call `client.resetStore`
`client.resetStore` anywhere
anywhere in
in your
your application,
application, you
you will
will likely
likely want
want to
to initialize
initialize your
your cache
cache again.
again. You
You can
can do
do this
this using
using the
the `client.onResetStore`
`client.onResetStore` method
method to
to register
register a
a callback
callback that
that will
will call
call `cache.writeData`
`cache.writeData` again.


##### Local
Local data
data query
query flow


Here's [an
[an example
example from
from the
the Apollo
Apollo documentation](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#initializing-the-cache)
documentation](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#initializing-the-cache) about
about a
a query
query that
that fetches
fetches both
both local
local client
client state
state with
with `@client`
`@client` and
and some
some data
data from
from a
a GraphQL
GraphQL server.


##### Intregrating
Intregrating `@client`
`@client` into
into remote
remote queries


Adding new
new GraphQL
GraphQL object
object types
types to
to your
your resolver
resolver map
map is
is a
a way
way to
to combine
combine local
local and
and remote
remote queries.
queries. To
To do
do this
this you
you can
can add
add a
a new
new key
key like
like `Member`
`Member` in
in your
your `client/src/clientState.js`:



export default
default {

data: {

/* Your
Your initital
initital state
state */


resolvers: {

Query: {

/* ...
... */


Mutation: {

/* ...
... */


Member: {

isLoggedIn() {

return someInternalLoginVerificationFunction();







The result
result of
of this
this is
is that
that the
the `isLoggedIn`
`isLoggedIn` property
property will
will be
be available
available when
when you
you query
query a
a `Member`.
`Member`. In
In this
this case
case the
the `@client`
`@client` directive
directive is
is required
required to
to let
let Apollo
Apollo Client
Client know
know this
this data
data should
should be
be returned
returned from
from your
your client
client as
as opposed
opposed to
to getting
getting fetched
fetched from
from a
a server.


This allows
allows you
you to
to mix
mix data
data from
from a
a server
server as
as well
well as
as data
data from
from your
your client
client in
in a
a single
single query.



export const
const GET_SIDEBAR_STATE
GET_SIDEBAR_STATE =
= gql`

query Sidebar
Sidebar {

Member {


isLoggedIn @client






For more
more information,
information, continue
continue reading
reading on
on the
the Apollo
Apollo Documentation
Documentation about
about [intregrating
[intregrating `@client`
`@client` into
into remote
remote queries](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#integrating-client-into-remote-queries).


There are
are some
some things
things to
to consider
consider when
when integrating
integrating `@client`
`@client` into
into remote
remote queries.


- [Fetch
[Fetch policies](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#working-with-fetch-policies).


- [Forcing
[Forcing resolvers
resolvers to
to run
run `@client`
`@client` parts
parts on
on every
every request](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#forcing-resolvers-with-clientalways-true).
request](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#forcing-resolvers-with-clientalways-true). Use
Use this
this carefully,
carefully, as
as it
it can
can impact
impact performance.


- [Using
[Using `@client`
`@client` fields
fields as
as variables
variables (in
(in both
both remote
remote and
and other
other `@client`
`@client` queries)](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#using-client-fields-as-variables).


## Additional
Additional resources


### Apollo
Apollo about
about local
local state
state management.


- [Apollo
[Apollo cache
cache API's
API's most
most relevant
relevant methods
methods and
and common
common use
use cases](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#managing-the-cache)


- [Client-side
[Client-side schema](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#client-side-schema)


- [Code
[Code splitting
splitting resolvers
resolvers with
with `addResolvers`
`addResolvers` and
and `setResolvers`
`setResolvers` using
using `loadable`](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#code-splitting)


- [Apollo
[Apollo Client
Client local
local state
state API](https://www.apollographql.com/docs/react/v2.5/essentials/local-state/#code-splitting)


### Learning
Learning GraphQL


- [How
[How to
to GraphQL](https://www.howtographql.com/)


- [Official
[Official GraphQL
GraphQL Learn
Learn section](https://graphql.org/learn/)


- [Official
[Official GraphQL
GraphQL specification](https://graphql.github.io/graphql-spec/)


id: data

title: Data
Data Management

sidebar_label: Data
Data Management




This page
page covers
covers how
how to
to query
query and
and update
update data.
data. If
If you're
you're looking
looking for
for information
information about
about local
local state
state managemment
managemment or
or ways
ways to
to combine
combine queries
queries to
to the
the server
server with
with client-side
client-side queries,
queries, you
you can
can read
read more
more about
about that
that [here](../falcon-client/local-state-management).


Falcon comes
comes with
with [Apollo
[Apollo Client](https://www.apollographql.com/docs/react/v2.5/api/apollo-client/)
Client](https://www.apollographql.com/docs/react/v2.5/api/apollo-client/) for
for client-side
client-side state
state management
management when
when you
you use
use [`create-falcon-app`](../getting-started/installation#create-falcon-app)
[`create-falcon-app`](../getting-started/installation#create-falcon-app) to
to generate
generate a
a new
new application.
application. Apollo
Apollo Client
Client will
will be
be pre-configured
pre-configured and
and does
does not
not require
require any
any additional
additional setup.
setup. You
You can
can start
start using
using it
it right
right away.


## The
The short
short version


If you
you already
already know
know how
how to
to use
use Apollo
Apollo Client,
Client, you
you pretty
pretty much
much know
know how
how to
to use
use it
it with
with Falcon.
Falcon. If
If you
you need
need a
a refresher,
refresher, continue
continue to
to the
the [long
[long version](#the-long-version)
version](#the-long-version) or
or the
the [Apollo
[Apollo documentation](https://www.apollographql.com/docs/react/v2.5/essentials/get-started/).
documentation](https://www.apollographql.com/docs/react/v2.5/essentials/get-started/). We
We also
also provide
provide a
a few
few [additional
[additional components](#falcons-additional-components)
components](#falcons-additional-components) you
you can
can use.


### Fetching
Fetching and
and sending
sending data
data from
from and
and to
to the
the server


Falcon extends
extends and
and is
is compatible
compatible with
with Apollo's
Apollo's standard
standard `Query`
`Query` and
and `Mutation`
`Mutation` components.


## Falcon's
Falcon's additional
additional components


Falcon comes
comes with
with a
a few
few pre-defined
pre-defined queries
queries and
and mutations
mutations when
when you
you create
create a
a project
project with
with [`create-falcon-app`](../getting-started/installation#create-falcon-app).
[`create-falcon-app`](../getting-started/installation#create-falcon-app). These
These are
are primarily
primarily from
from our
our `@deity/falcon-front-kit`
`@deity/falcon-front-kit` package
package and
and can
can be
be of
of great
great use
use when
when starting
starting out
out with
with an
an eCommerce
eCommerce application
application with
with an
an integrated
integrated blog.


Something you
you will
will see
see in
in our
our optional
optional components
components is
is a
a custom
custom `Query`
`Query` component
component with
with the
the query
query added
added as
as a
a default
default prop.
prop. This
This can
can come
come in
in handy
handy if
if you
you use
use the
the same
same query
query in
in multiple
multiple files.



export class
class CustomerQuery
CustomerQuery extends
extends Query
Query {

static defaultProps
defaultProps =
= {

query: GET_CUSTOMER





You can
can also
also use
use our
our wrapper
wrapper `Query`
`Query` component,
component, which
which extends
extends Apollo's
Apollo's `Query`
`Query` component.
component. The
The wrapper
wrapper component
component will
will handle
handle loading
loading and
and error
error states
states for
for you.
you. You
You can
can use
use our
our `Query`
`Query` component
component in
in the
the same
same way
way you
you would
would use
use the
the Apollo
Apollo Client
Client version.



import {
{ GET_BLOG_POST
GET_BLOG_POST }
} from
from "./my-queries";

import {
{ Query
Query }
} from
from "@deity/falcon-data";


export class
class BlogPostQuery
BlogPostQuery extends
extends Query
Query {

static defaultProps
defaultProps =
= {

query: GET_BLOG_POST





## The
The long
long version


This will
will go
go in-depth
in-depth about
about how
how to
to use
use Apollo
Apollo for
for managing
managing the
the client
client state
state of
of your
your Falcon
Falcon application.


If you're
you're unfamiliar
unfamiliar with
with GraphQL
GraphQL queries
queries it
it is
is recommended
recommended to
to check
check out
out [this
[this guide](https://graphql.org/learn/queries/).


### Fetching
Fetching data
data (Query
(Query component)


The `Query`
`Query` API
API is
is pretty
pretty simple
simple if
if you're
you're familiar
familiar with
with React
React and
and the
the [Render
[Render Props](https://reactjs.org/docs/render-props.html)
Props](https://reactjs.org/docs/render-props.html) pattern.


React will
will call
call the
the render
render prop
prop function
function you
you provide
provide with
with an
an object
object from
from Apollo
Apollo Client
Client containing
containing `loading`,
`loading`, `error`,
`error`, and
and `data`
`data` properties
properties that
that you
you can
can use
use to
to render
render your
your UI.



import gql
gql from
from "graphql-tag";

import {
{ Query
Query }
} from
from "react-apollo";


const GET_PRODUCT
GET_PRODUCT =
= gql`

query Product($id:
Product($id: ID!,
ID!, $path:
$path: String!)
String!) {

product(id: $id)
$id) {



price {




gallery {








class ProductQuery
ProductQuery extends
extends Query<ProductResponse>
Query<ProductResponse> {

static defaultProps
defaultProps =
= {

query: GET_PRODUCT,

fetchPolicy: "cache-and-network"




const Product
Product =
= ({
({ id,
id, path
path })
}) =>
=> (

<ProductQuery variables={{
variables={{ id,
id, path
path }}>

{({ loading,
loading, error,
error, data:
data: {
{ product
product }
} })
}) =>
=> {

if (loading)
(loading) return
return "Loading...";

if (error)
(error) return
return `Error!
`Error! ${error.message}`;


return (


<ProductGallery items={product.gallery}
items={product.gallery} />



<ProductPrice {...product.price}
{...product.price} fontSize="xl"
fontSize="xl" />

<ProductTierPrices items={product.tierPrices}
items={product.tierPrices} />








The `Query`
`Query` component
component subscribes
subscribes to
to the
the data
data through
through an
an observable.
observable. The
The result
result is
is first
first checked
checked in
in the
the Apollo
Apollo Client
Client cache.
cache. If
If the
the result
result isn't
isn't in
in the
the cache,
cache, it
it will
will make
make a
a request
request to
to the
the server.
server. When
When the
the data
data is
is received
received from
from the
the server,
server, it
it will
will be
be stored
stored in
in the
the cache.


If you
you need
need near
near real-time
real-time data
data you
you can
can read
read more
more about
about that
that in
in the
the [Apollo
[Apollo documentation](https://www.apollographql.com/docs/react/v2.5/essentials/queries/#polling-and-refetching).


If you
you need
need to
to notify
notify the
the user
user when
when you
you are
are refetching
refetching data
data or
or if
if their
their network
network status
status has
has changes,
changes, you
you can
can read
read more
more about
about that
that in
in the
the [Apollo
[Apollo documentation](https://www.apollographql.com/docs/react/v2.5/essentials/queries/#loading-and-error-state).


#### Manually
Manually firing
firing a
a query



import React,
React, {
{ Component
Component }
} from
from "react";

import {
{ ApolloConsumer
ApolloConsumer }
} from
from "react-apollo";


class DelayedQuery
DelayedQuery extends
extends Component
Component {

state =
= {
{ product:
product: null
null };


onProductFetched =
= product
product =>
=> this.setState(()
this.setState(() =>
=> ({
({ product
product }));


render() {

return (


{client =>
=> (


{this.state.product &&
&& (

<img src={this.state.product.gallery.thumbnail}
src={this.state.product.gallery.thumbnail} />



onClick={async ()
() =>
=> {

const {
{ data
data }
} =
= await
await client.query({

query: GET_PRODUCT,

variables: {
{ id:
id: this.props.id,
this.props.id, path:
path: this.props.path
this.props.path }





Get product
product photo!










### Sending
Sending data
data (Mutation
(Mutation component)


Here is
is [a
[a guide
guide about
about GraphQL
GraphQL mutations](http://graphql.org/learn/queries/#mutations)
mutations](http://graphql.org/learn/queries/#mutations) if
if you're
you're unfamiliar
unfamiliar with
with GraphQL
GraphQL mutations
mutations or
or would
would like
like a
a refresher.
refresher. The
The `Mutation`
`Mutation` component
component uses
uses [render
[render props](https://reactjs.org/docs/render-props.html)
props](https://reactjs.org/docs/render-props.html) just
just like
like the
the `Query`
`Query` component.
component. If
If you
you prefer
prefer video,
video, you
you can
can also
also watch
watch [this
[this video
video about
about the
the `Mutation`
`Mutation` component
component by
by Sara
Sara Vieira](https://www.youtube.com/watch?v=2SYa0F50Mb4&feature=youtu.be).


React will
will call
call the
the render
render prop
prop function
function you
you provide
provide with
with a
a mutate
mutate function
function and
and an
an object
object with
with your
your mutation
mutation result
result containing
containing loading,
loading, error,
error, called,
called, and
and data
data properties



import gql
gql from
from "graphql-tag";

import {
{ Mutation
Mutation }
} from
from "react-apollo";


const ADD_TODO
ADD_TODO =
= gql`

mutation AddTodo($type:
AddTodo($type: String!)
String!) {

addTodo(type: $type)
$type) {







const AddTodo
AddTodo =
= ()
() =>
=> {

let input;


return (

<Mutation mutation={ADD_TODO}>

{(addTodo, {
{ data
data })
}) =>
=> (


onSubmit={e =>
=> {


addTodo({ variables:
variables: {
{ type:
type: input.value
input.value }
} });

input.value =
= "";




ref={node =>
=> {

input =
= node;



<button type="submit">Add
type="submit">Add Todo</button>








The mutate
mutate function
function (`addTodo`)
(`addTodo`) optionally
optionally takes
takes `variables`,
`variables`, [`optimisticResponse`](https://www.apollographql.com/docs/react/v2.5/features/optimistic-ui/#gatsby-focus-wrapper),
[`optimisticResponse`](https://www.apollographql.com/docs/react/v2.5/features/optimistic-ui/#gatsby-focus-wrapper), `refetchQueries`,
`refetchQueries`, and
and `update`;
`update`; however,
however, you
you can
can also
also pass
pass in
in those
those values
values as
as props
props to
to the
the `Mutation`
`Mutation` component.


By default
default mutated
mutated data
data is
is not
not immediately
immediately reflected
reflected in
in Query
Query components
components that
that depend
depend on
on that
that piece
piece of
of data.
data. This
This is
is because
because the
the `Query`
`Query` component
component does
does not
not know
know the
the `Mutation`
`Mutation` component
component has
has changed
changed the
the data.
data. The
The Apollo
Apollo cache
cache needs
needs to
to be
be updated
updated after
after a
a mutation.


Sometimes when
when you
you perform
perform a
a mutation,
mutation, your
your GraphQL
GraphQL server
server and
and your
your Apollo
Apollo cache
cache become
become out
out of
of sync.
sync. This
This happens
happens when
when the
the update
update you're
you're performing
performing depends
depends on
on data
data that
that is
is already
already in
in the
the cache;
cache; for
for example,
example, deleting
deleting and
and adding
adding items
items to
to a
a list.
list. We
We need
need a
a way
way to
to tell
tell Apollo
Apollo Client
Client to
to update
update the
the query
query for
for the
the list
list of
of items.


This is
is where
where the
the `update`
`update` function
function comes
comes in.
in. The
The `update`
`update` function
function is
is called
called with
with the
the Apollo
Apollo cache
cache as
as the
the first
first argument.
argument. The
The cache
cache has
has several
several utility
utility functions
functions such
such as
as `cache.readQuery`
`cache.readQuery` and
and `cache.writeQuery`
`cache.writeQuery` that
that allow
allow you
you to
to read
read and
and write
write queries
queries to
to the
the cache
cache with
with GraphQL
GraphQL as
as if
if it
it were
were a
a server.


Note: In
In case
case of
of the
the `update`
`update` function,
function, when
when you
you call
call `cache.writeQuery`,
`cache.writeQuery`, the
the `update`
`update` internally
internally calls
calls `broadcastQueries`,
`broadcastQueries`, so
so queries
queries listening
listening to
to the
the changes
changes will
will update.
update. Anywhere
Anywhere else,
else, `cache.writeQuery`
`cache.writeQuery` would
would just
just write
write to
to the
the cache,
cache, and
and the
the changes
changes would
would not
not be
be immediately
immediately broadcasted.


See the
the detailed
detailed [caching
[caching guide](https://www.apollographql.com/docs/react/v2.5/advanced/caching/)
guide](https://www.apollographql.com/docs/react/v2.5/advanced/caching/) by
by Apollo
Apollo for
for more
more information
information about
about cache
cache methods.


The second
second argument
argument to
to the
the update
update function
function is
is an
an object
object with
with a
a data
data property
property containing
containing your
your mutation
mutation result.
result. If
If you
you specify
specify an
an [optimistic
[optimistic response](https://www.apollographql.com/docs/react/v2.5/features/optimistic-ui/),
response](https://www.apollographql.com/docs/react/v2.5/features/optimistic-ui/), your
your update
update function
function will
will be
be called
called twice:
twice: once
once with
with your
your optimistic
optimistic result,
result, and
and another
another time
time with
with your
your actual
actual result.
result. You
You can
can use
use your
your mutation
mutation result
result to
to update
update the
the cache
cache with
with cache.writeQuery.


Here's an
an example
example from
from Apollo's
Apollo's documentation:



const GET_TODOS
GET_TODOS =
= gql`

query GetTodos
GetTodos {





const AddTodo
AddTodo =
= ()
() =>
=> {

let input;


return (



update={(cache, {
{ data:
data: {
{ addTodo
addTodo }
} })
}) =>
=> {

const {
{ todos
todos }
} =
= cache.readQuery({
cache.readQuery({ query:
query: GET_TODOS
GET_TODOS });


query: GET_TODOS,

data: {
{ todos:
todos: todos.concat([addTodo])
todos.concat([addTodo]) }




{addTodo =>
=> (


onSubmit={e =>
=> {


addTodo({ variables:
variables: {
{ type:
type: input.value
input.value }
} });

input.value =
= "";




ref={node =>
=> {

input =
= node;



<button type="submit">Add
type="submit">Add Todo</button>








Not every
every mutation
mutation requires
requires an
an update
update function.
function. If
If you're
you're updating
updating a
a single
single item,
item, you
you usually
usually don't
don't need
need an
an update
update function
function as
as long
long as
as you
you return
return the
the item's
item's `id`
`id` and
and the
the property
property you
you updated.
updated. While
While this
this may
may seem
seem like
like magic,
magic, this
this is
is actually
actually a
a benefit
benefit of
of Apollo's
Apollo's normalized
normalized cache,
cache, which
which splits
splits out
out each
each object
object with
with an
an `id`
`id` into
into its
its own
own entity
entity in
in the
the cache.
cache. If
If you
you try
try updating
updating a
a todo,
todo, you'll
you'll notice
notice that
that the
the UI
UI updates
updates immediately.
immediately. Even
Even though
though we
we don't
don't plan
plan on
on using
using the
the mutation
mutation return
return result
result in
in our
our UI,
UI, we
we still
still need
need to
to return
return the
the `id`
`id` and
and the
the property
property we
we updated
updated in
in order
order for
for our
our UI
UI to
to update
update reactively.


If you'd
you'd like
like to
to dive
dive deeper
deeper into
into the
the Apollo
Apollo cache's
cache's normalization
normalization strategy,
strategy, check
check out
out their
their [advanced
[advanced caching
caching guide](https://www.apollographql.com/docs/react/v2.5/advanced/caching/).



const UPDATE_TODO
UPDATE_TODO =
= gql`

mutation UpdateTodo($id:
UpdateTodo($id: String!,
String!, $type:
$type: String!)
String!) {

updateTodo(id: $id,
$id, type:
type: $type)
$type) {








#### Loading
Loading and
and error
error states


In the
the render
render prop
prop function,
function, we
we can
can destructure
destructure `loading`
`loading` and
and `error`
`error` properties
properties off
off the
the mutation
mutation result.
result. The
The `Mutation`
`Mutation` component
component also
also has
has `onCompleted`
`onCompleted` and
and `onError`
`onError` props
props in
in case
case you
you would
would like
like to
to provide
provide callbacks
callbacks instead.
instead. Additionally,
Additionally, the
the mutation
mutation result
result object
object also
also has
has a
a `called`
`called` boolean
boolean that
that tracks
tracks whether
whether or
or not
not the
the mutate
mutate function
function has
has been
been called.


## Local
Local state
state management


Continue reading
reading about
about managing
managing your
your local
local state
state [here](../falcon-client/local-state-management).


## Additional
Additional resources


### Learning
Learning GraphQL


- [How
[How to
to GraphQL](https://www.howtographql.com/)


- [Official
[Official GraphQL
GraphQL Learn
Learn section](https://graphql.org/learn/)


- [Official
[Official GraphQL
GraphQL specification](https://graphql.github.io/graphql-spec/)



id: testing

title: Testing

sidebar_label: Testing



## Overview


`falcon-client` exposes
exposes `FalconClientMock`
`FalconClientMock` component
component which
which allows
allows you
you to
to setup
setup application
application context
context inside
inside unit
unit test
test environment.

`FalconClientMock` can
can receive
receive props
props for
for mock
mock version
version of
of React
React context
context provider
provider components
components used
used by
by `falcon-client`
`falcon-client` internally:


- `apollo:
`apollo: object`
object` -
- props
props for
for `MockProvider`
`MockProvider` component
component from
from `react-apollo`

- `router:
`router: object`
object` props
props for
for `MemoryRouter`
`MemoryRouter` component
component from
from `react-router-dom`

- `asyncComponent:
`asyncComponent: object`
object` -
- props
props for
for `AsyncComponentProvider`
`AsyncComponentProvider` component
component from
from `react-async-component`

- `i18next:
`i18next: object`
object` -
- props
props for
for `I18nextProvider`
`I18nextProvider` component
component from
from `react-i18next`

- `helmet:
`helmet: object`
object` -
- props
props for
for `HelmetProvider`
`HelmetProvider` component
component from
from `react-helmet-async`


Tests should
should be
be named
named `[component].test.js`.


<a href="https://jestjs.io/"
href="https://jestjs.io/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">

<img src="/img/docs/platform/jest.svg"
src="/img/docs/platform/jest.svg" alt="Jest
alt="Jest Logo"
Logo" width="100"
width="100" style={{
style={{ marginBottom:
marginBottom: 20
20 }}
}} />



Under the
the hood
hood `FalconClientMock`
`FalconClientMock` uses
uses [Jest](https://jestjs.io/)
[Jest](https://jestjs.io/) and
and has
has access
access to
to all
all the
the same
same [mock
[mock functions](https://jestjs.io/docs/en/mock-functions).


## Running
Running Tests


Tests can
can be
be run
run in
in the
the command
command line
line from
from your
your `client`
`client` directory
directory using
using `npm`
`npm` or
or `yarn`.
`yarn`. This
This will
will run
run **all**
**all** tests.


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm test</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn test</CodeBlock>





### Options


Running the
the `test`
`test` command
command will
will run
run all
all tests,
tests, you
you will
will then
then have
have access
access to
to the
the following
following options:


- Press
Press `a`
`a` to
to run
run all
all tests.

- Press
Press `f`
`f` to
to run
run only
only failed
failed tests.

- Press
Press `o`
`o` to
to only
only run
run tests
tests related
related to
to changed
changed files.

- Press
Press `p`
`p` to
to filter
filter by
by a
a filename
filename regex
regex pattern.

- Press
Press `t`
`t` to
to filter
filter by
by a
a test
test name
name regex
regex pattern.

- Press
Press `q`
`q` to
to quit
quit watch
watch mode.

- Press
Press `Enter`
`Enter` to
to trigger
trigger a
a test
test run.


## Usage


In this
this example
example we
we are
are testing
testing the
the `Banner`
`Banner` component.


`describe()` expects
expects 2
2 arguments,
arguments, `name`
`name` and
and `fn`.


`name` will
will appear
appear in
in your
your console
console to
to help
help you
you identify
identify the
the tests,
tests, we
we advise
advise using
using the
the component
component name
name here.



describe('<Banner />',
/>', ...



<img src="/img/docs/platform/test-screengrab.png"
src="/img/docs/platform/test-screengrab.png" alt="test
alt="test screengrab"
screengrab" width="400"
width="400" style={{
style={{ marginBottom:
marginBottom: 20
20 }}
}} />


Inside the
the function
function (`fn`)
(`fn`) passed
passed to
to `describe`
`describe` you
you can
can run
run your
your tests.


We advise
advise familiarizing
familiarizing yourself
yourself with
with [Jest](https://jestjs.io/)
[Jest](https://jestjs.io/) before
before writing
writing tests.





import React
React from
from 'react';

import ReactDOM
ReactDOM from
from 'react-dom';

import {
{ FalconClientMock
FalconClientMock }
} from
from '@deity/falcon-client/test-utils';

import {
{ Banner
Banner }
} from
from './Banner';


describe('<Banner />',
/>', ()
() =>
=> {

const div
div =
= document.createElement('div');

test('Renders correct
correct content',
content', ()
() =>
=> {



<Banner />









In this
this simple
simple test
test we
we check
check that
that the
the `<Banner
`<Banner />`
/>` component
component renders
renders `<p>Banner</p>`.


## Cookbook


We've created
created a
a few
few example
example tests
tests and
and added
added them
them to
to our
our [Cookbook](/platform/cookbook/client/testing).


id: key-concepts

title: Key
Key Concepts

sidebar_label: Key
Key Concepts



## Key
Key Concepts


id: schema-json

title: Schema
Schema Markup
Markup /
/ Rich
Rich Results

sidebar_label: Schema
Schema Markup
Markup /
/ Rich
Rich Results



## Overview


Falcon UI
UI Kit
Kit comes
comes complete
complete with
with a
a few
few handy
handy components
components to
to provide
provide your
your app
app with
with Schema
Schema markup
markup in
in the
the form
form of
of JSON.


To test
test your
your app
app you
you can
can use
use [Googles
[Googles rich
rich results
results testing
testing tool](https://search.google.com/test/rich-results).


For full
full schema
schema markup
markup docs
docs please
please see
see [schema.org](https://schema.org/docs/gs.html).



## Featues


- Organisation

- Product

- Product
Product list

- Blog
Blog post

- Blog
Blog list



### Organisation
Organisation Schema


[Full docs](https://schema.org/Organization)


Ideally the
the organisation
organisation schema
schema component
component will
will be
be added
added to
to your
your route
route `App.js`
`App.js` file
file so
so it
it exists
exists on
on all
all page.



import {
{ OrganizationSchema
OrganizationSchema }
} from
from '@deity/falcon-ui-kit';

import logo
logo from
from 'src/assets/logo.png';


















The props
props expected
expected are:


- `logo`
`logo` -
- Path
Path to
to site
site logo

- `name`
`name` -
- Site
Site /
/ App
App name

- `url`
`url` -
- Organisation
Organisation URL
URL (probably
(probably your
your sites
sites URL)

- `sameAs`
`sameAs` -
- Array
Array or
or organisation
organisation URLs
URLs (normally
(normally social
social network
network links)


### Product
Product Schema


[Full docs](https://schema.org/Product)


The product
product schema
schema should
should be
be added
added to
to your
your route
route product
product component
component (`client/src/pages/shop/Product.js`
(`client/src/pages/shop/Product.js` in
in our
our example
example apps).


The product
product schema
schema expects
expects a
a `product`
`product` prop.
prop. This
This should
should be
be an
an object:



type product
product =
= {

name: string,

description: string

thumbnail: string

price: string

sku: string

urlPath: string





import {
{ ProductSchema
ProductSchema }
} from
from '@deity/falcon-ui-kit';


<ProductSchema product={product}
product={product} />



### Product
Product List
List Schema


[Full docs](https://schema.org/Product)


The product
product list
list uses
uses the
the product
product schema
schema but
but is
is imported
imported into
into our
our `ProductCard`
`ProductCard` component.


### Blog
Blog Post
Post Schema


[Full docs](https://schema.org/Blog)


The blog
blog post
post component
component is
is added
added to
to the
the root
root blog
blog post
post component
component (`client/src/pages/blog/Post.js`
(`client/src/pages/blog/Post.js` in
in our
our example).


It expects
expects 1
1 prop,
prop, `blog`.
`blog`. This
This should
should be
be an
an object
object with
with blog
blog post
post information:



type blogSchemaInfo
blogSchemaInfo =
= {
 
title: string,

image: string,

date: Date,

modified: Date,

excerpt: string,

author: string,

slug: string,

content: string





import {
{ FormattedDate,
FormattedDate, Image,
Image, BlogPostSchema
BlogPostSchema }
} from
from '@deity/falcon-ui-kit';


<BlogPostSchema blog={blogSchemaInfo}
blog={blogSchemaInfo} />



### Blog
Blog List
List Schema


[Full docs](https://schema.org/Blog)


The blog
blog list
list schema
schema uses
uses the
the same
same component
component as
as the
the blog
blog post
post but
but is
is added
added to
to the
the `BlogPostCard`
`BlogPostCard` component.


id: browser-support

title: Browser
Browser Support

sidebar_label: Browser
Browser Support



<img src="/img/browsers.svg"
src="/img/browsers.svg" alt="Browser
alt="Browser Logos"
Logos" width="400"
width="400" style={{
style={{ marginBottom:
marginBottom: 20
20 }}
}} />



We actively
actively support
support and
and test
test the
the **latest
**latest 2**
2** versions
versions of
of **Google
**Google Chrome**,
Chrome**, **FireFox**,
**FireFox**, **Safari**,
**Safari**, **Edge**
**Edge** &
& **Opera**.


This is
is not
not to
to say
say other
other browsers
browsers won't
won't work,
work, just
just that
that we
we don't
don't test
test them.
them. If
If you
you need
need additonal
additonal support
support for
for your
your app
app or
or find
find that
that something
something isn't
isn't working
working please
please contact
contact us.




Icons made
made by
by <a
<a href="https://www.flaticon.com/authors/pixel-perfect"
href="https://www.flaticon.com/authors/pixel-perfect" rel="noopener
rel="noopener noreferrer"
noreferrer" target="_blank"
target="_blank" title="Pixel
title="Pixel perfect">Pixel
perfect">Pixel perfect</a>


id: overview

title: Theming
Theming Overview

sidebar_label: Overview



:::note Falcon
Falcon Client
Client ships
ships with
with `@deity/falcon-ui`.

This contains
contains a
a powerful
powerful `ThemeProvider`
`ThemeProvider` and
and a
a library
library of
of composable,
composable, themeable,
themeable, design-system-driven
design-system-driven UI
UI components.


It's worth
worth looking
looking at
at <a
<a href="https://falcon-ui.docs.deity.io/"
href="https://falcon-ui.docs.deity.io/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">these
noreferrer">these docs</a>
docs</a> for
for detailed
detailed theming
theming information.



## Don't
Don't want
want to
to read
read the
the docs?

Here's a
a quick
quick introduction
introduction to
to theming
theming Falcon
Falcon Platform.


<iframe width="560"
width="560" height="315"
height="315" src="https://www.youtube.com/embed/W8WoLoF54kI?rel=0"
src="https://www.youtube.com/embed/W8WoLoF54kI?rel=0" frameborder="0"
frameborder="0" allow="accelerometer;
allow="accelerometer; autoplay;
autoplay; encrypted-media;
encrypted-media; gyroscope;
gyroscope; picture-in-picture"
picture-in-picture" allowFullScreen></iframe>


## Overview

`@deity/falcon-ui` comes
comes with
with a
a `ThemeProvider`
`ThemeProvider` out
out of
of the
the box.
box. This
This allows
allows us
us to
to have
have shared
shared and
and global
global styles
styles (written
(written in
in js)
js) across
across your
your application.


Out of
of the
the box
box Falcon
Falcon Platform
Platform also
also supports
supports [**css**
[**css** and
and **scss**](./css-sass).


:::note Writing
Writing CSS
CSS in
in ReactJs

If you're
you're new
new to
to writing
writing CSS
CSS in
in ReactJs,
ReactJs, it's
it's worth
worth reading
reading <a
<a href="https://www.w3schools.com/react/react_css.asp"
href="https://www.w3schools.com/react/react_css.asp" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">these
noreferrer">these docs</a>.



## Global
Global Styles


Global styles
styles can
can be
be passed
passed to
to the
the `ThemeProvider`
`ThemeProvider` as
as a
a prop.


It expects
expects an
an object
object of
of styles
styles in
in the
the following
following format:



export const
const globalCss
globalCss =
= {

body: {

margin: 0,

overflowX: 'hidden'





If desired,
desired, you
you can
can also
also export
export a
a function
function that
that takes
takes the
the current
current theme
theme as
as a
a parameter:



export const
const globalCss
globalCss =
= theme
theme =>
=> ({

body: {

background: theme.colors.primary





By default
default the
the `ThemeProvider`
`ThemeProvider` component
component is
is included
included in
in `client/src/App.js`.
`client/src/App.js`. The
The `globalCss`
`globalCss` object
object is
is normal
normal exported
exported in
in your
your `client/src/styling/theme.js`
`client/src/styling/theme.js` file.


**If you're
you're not
not using
using the
the new
new theme
theme the
the `theme.js`
`theme.js` file
file can
can be
be found
found here:
here: `client/src/theme.js`**



<ThemeProvider theme={props.theme}
theme={props.theme} globalCss={globalCss}>





## Creating
Creating a
a Theme


The `ThemeProvider`
`ThemeProvider` expects
expects a
a `prop`,
`prop`, `theme`.
`theme`. This
This is
is where
where we
we define
define out
out global
global /
/ theme
theme variables.


To create
create a
a `theme`
`theme` we
we use
use the
the function
function `createTheme`.
`createTheme`. This
This is
is normally
normally done
done in
in `client/src/styling/theme.js`.


`createTheme` extends
extends the
the **default
**default theme**.
theme**. This
This can
can be
be found
found here
here -
- `@deity/falcon-ui/src/theme/theme.ts`.




import {
{ createTheme
createTheme }
} from
from '@deity/falcon-ui';


export const
const yourThemeName
yourThemeName =
= createTheme({

colors: {

primaryLight: '#555855'





We then
then pass
pass that
that as
as a
a **prop**
**prop** to
to the
the `ThemeProvider`
`ThemeProvider` from
from `ThemeEditorState`
`ThemeEditorState` (usually
(usually in
in `client/src/App.js`).






import {
{ ThemeEditor,
ThemeEditor, ThemeEditorState
ThemeEditorState }
} from
from '@deity/falcon-theme-editor';

import {
{ yourThemeName,
yourThemeName, globalCss
globalCss }
} from
from './styling/theme';



<ThemeEditorState initial={yourThemeName}>

{props =>
=> (


<ThemeProvider theme={props.theme}
theme={props.theme} globalCss={globalCss}>





           


We now
now have
have access
access to
to this
this `theme`
`theme` when
when writing
writing css
css or
or creating
creating a
a [`themed`
[`themed` component](#themed-components).



## How
How the
the theme
theme works


### Theme
Theme fallback

Any theme
theme created
created using
using `createTheme`,
`createTheme`, falls
falls back
back to
to the
the default
default theme
theme defined
defined in
in `@deity/falcon-ui/src/theme/theme.ts`.
`@deity/falcon-ui/src/theme/theme.ts`. Your
Your new
new theme
theme will
will replace
replace variables
variables from
from this
this if
if defined.


### How
How object
object keys
keys are
are mapped
mapped to
to CSS
CSS properties


You will
will notice
notice that
that the
the theme
theme is
is nested
nested with
with keys
keys such
such as
as `colors`,
`colors`, `spacing`,
`spacing`, `fontSizes`
`fontSizes` etc.


These are
are mapped
mapped to
to css
css properties
properties meaning
meaning that
that the
the correct
correct value
value is
is passed.


You will
will also
also notice
notice some
some props
props are
are shortcuts
shortcuts for
for the
the css
css property,
property, e.g.
e.g. `m="xxl"`
`m="xxl"` is
is used
used instead
instead of
of `margin="xxs"`.
 

[Find out
out more
more about
about css
css mapping
mapping and
and shortcuts](./css-mapping)


### Responsive
Responsive Styling


If you
you want
want a
a property
property to
to change
change based
based on
on window
window width
width based
based media
media queries
queries you
you can
can pass
pass it
it an
an object.
object. Each
Each object
object key
key refers
refers to
to a
a breakpoint
breakpoint (these
(these can
can be
be defined
defined in
in your
your `theme.js`
`theme.js` if
if you
you don't
don't want
want to
to keep
keep the
the core
core ones
ones `@deity/falcon-ui/src/theme/theme.ts`).
`@deity/falcon-ui/src/theme/theme.ts`). These
These breakpoints
breakpoints create
create mobile
mobile first
first css
css (`@media
(`@media and
and (max-width:
(max-width: <breakpoint>`).






xs: 'xs',

sm: 'sm'









breakpoints: {

xs: 0,

sm: 640,

md: 860,

lg: 1280,

xl: 1920




### Adding
Adding complex
complex css


If you
you want
want to
to add
add more
more complex
complex css,
css, for
for instance
instance styling
styling child
child selectors,
selectors, pseudo
pseudo elements
elements or
or state
state changes
changes you
you can
can do
do this
this in
in the
the `css`
`css` prop.


It's also
also possible
possible to
to access
access the
the `theme`
`theme` object
object here
here so
so you
you can
can still
still use
use global
global variables.


**n.b. You
You can't
can't use
use CSS
CSS shortcuts
shortcuts like
like `mb`
`mb` for
for `marginBottom`
`marginBottom` in
in the
the CSS
CSS prop**





<Box css={({
css={({ theme
theme })
}) =>
=> {

'&:focus': {

outline: `1px
`1px dotted
dotted ${theme.colors.secondary}`


span: {

color: theme.colors.primary







id: components

title: Themed
Themed Components

sidebar_label: Themed
Themed Components



`@deity/falcon-ui` UI
UI components
components such
such as
as `Box`,
`Box`, `Text`
`Text` etc
etc are
are all
all built
built as
as themeable
themeable components.


This means
means they
they will
will accept
accept props
props such
such as
as `m`
`m` for
for margin,
margin, and
and values
values from
from the
the `theme`
`theme` such
such as
as `xxs`
`xxs` for
for spacing.




<Box py="xs">

Content here




To make
make your
your custom
custom component
component 'themeable'
'themeable' you
you will
will need
need to
to use
use the
the `themed`
`themed` function.




import {
{ Box,
Box, themed
themed }
} from
from '@deity/falcon-ui';


const MyComponentLayout
MyComponentLayout =
= themed({

tag: Box,

defaultTheme: {

myComponentLayout: {

py: 'xs'






Content here




You will
will notice
notice that
that we
we have
have suffixed
suffixed the
the names
names with
with **layout**.
**layout**. This
This is
is a
a helpful
helpful convention
convention to
to easily
easily recognize
recognize when
when a
a component
component is
is a
a `themed`
`themed` layout.


## Changing
Changing the
the html
html element
element of
of a
a component


If you
you want
want to
to change
change the
the html
html element
element of
of a
a themed
themed component
component it's
it's as
as simple
simple as
as passing
passing a
a prop
prop (`as`).




<Box as="section">

Content here




This will
will render
render a
a `<section>`
`<section>` tag
tag rather
rather than
than a
a `<div>`.


id: fonts

title: Custom
Custom Fonts

sidebar_label: Custom
Custom Fonts



## Loading
Loading Fonts


### Local
Local fonts


If you
you are
are hosting
hosting a
a font
font yourself
yourself you'll
you'll need
need to
to add
add the
the font
font files
files to
to your
your `client/src/assets`
`client/src/assets` directory.


You'll also
also need
need a
a css
css file
file in
in the
the same
same directory
directory that
that loads
loads the
the fonts
fonts using
using `@font-face`.


**File Structure**


|- client

|- src

|- assets

|- fontName








@font-face {

font-family: 'fontName';

font-style: normal;

font-weight: 400;

font-display: swap;

src: local('fontName'),
local('fontName'), url('fontFile.woff2')
url('fontFile.woff2') format('woff2'),

url('fontFile.woff') format('woff');




After that
that you'll
you'll need
need to
to load
load this
this css
css file
file globally
globally in
in your
your `client/src/App.js`
`client/src/App.js` file.



import './assets/fontName/fontName.css';



### Google
Google Fonts


If you're
you're using
using a
a hosted
hosted font,
font, such
such as
as a
a Google
Google font
font we
we recommend
recommend importing
importing it
it in
in a
a css
css file.


Within the
the `client/src/assets/`
`client/src/assets/` directory
directory add
add a
a css
css file
file `fontName.css`.


In this
this file
file add
add the
the Google
Google import
import code:



@import url('https://fonts.googleapis.com/css?family=Source+Sans+Pro&display=swap');



As with
with local
local fonts,
fonts, you'll
you'll now
now need
need to
to import
import the
the css
css file
file in
in `client/src/App.js`



import './assets/fontName/fontName.css';




## Using
Using Fonts


You may
may want
want your
your font
font to
to be
be used
used globally
globally or
or as
as a
a theme
theme variable
variable to
to be
be used
used on
on a
a component
component specific
specific basis.


### Global


Adding your
your font
font globally
globally is
is simple.
simple. All
All you
you need
need to
to do
do is
is edit
edit your
your `client/src/styling/theme.js`
`client/src/styling/theme.js` file.


This should
should have
have a
a `globalCss`
`globalCss` object
object that
that is
is later
later used
used when
when building
building your
your app.



export const
const globalCss
globalCss =
= {

html: {


'fontName, sans-serif',





### Theme
Theme Variables


If you
you want
want to
to use
use the
the font
font as
as a
a variable
variable you
you can
can simply
simply add
add it
it to
to `client/src/styling/theme.js`.


You'll notice
notice a
a `font`
`font` key
key in
in `falconThemeV2`.
`falconThemeV2`. You
You can
can simply
simply replace
replace the
the font
font there.



fonts: {


'fontName, sans-serif',

mono: 'Courier
'Courier New,
New, monospace'




:::note Performance
Performance Boost

We really
really recommend
recommend using
using `font-display:
`font-display: swap`
swap` or
or `&display=swap`
`&display=swap` to
to help
help with
with render
render blocking
blocking and
and performance.
performance. <a
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display"
href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Learn
noreferrer">Learn about
about font
font display
display here</a>.



id: css-mapping

title: CSS
CSS Mapping

sidebar_label: CSS
CSS Mapping



`@deity/falcon-ui` uses
uses a
a mapping
mapping function
function to
to define
define 2
2 things:


- CSS
CSS property
property shortcuts,
shortcuts, 'responsive
'responsive props'

- Which
Which key
key from
from the
the theme
theme object
object is
is used
used for
for each
each CSS
CSS property.


## CSS
CSS Shortcuts
Shortcuts /
/ Responsive
Responsive Props


To keep
keep your
your code
code slim
slim `@deity/falcon-ui`
`@deity/falcon-ui` maps
maps certain
certain component
component props
props to
to css
css properties.





<Box m="xl">...



In the
the above
above example
example `m`
`m` relates
relates to
to **margin**.


### Assigning
Assigning a
a blank
blank object
object to
to a
a CSS
CSS Shortcut
Shortcut /
/ Responsive
Responsive Prop



display: {},



In the
the above
above example
example we
we have
have assigned
assigned `display`
`display` and
and empty
empty object.
object. This
This allows
allows for
for the
the property
property to
to be
be recognized
recognized and
and used
used for
for the
the theming
theming of
of components.


Another benefit,
benefit, provided
provided by
by TypeScript
TypeScript -
- the
the property
property `display`
`display` will
will be
be hinted
hinted to
to you
you via
via IntelliSense
IntelliSense as
as a
a valid
valid property.



<Box display="block">



The property
property can
can be
be assigned
assigned a
a string
string as
as a
a value.


### Shortcut
Shortcut map



m: {

cssProp: 'margin',

themeProp: 'spacing'


mt: {

cssProp: 'marginTop',

themeProp: 'spacing'


ml: {

cssProp: 'marginLeft',

themeProp: 'spacing'


mr: {

cssProp: 'marginRight',

themeProp: 'spacing'


mb: {

cssProp: 'marginBottom',

themeProp: 'spacing'


mx: {

themeProp: 'spacing',

transformToCss: value
value =>
=> ({

marginLeft: value,

marginRight: value



my: {

themeProp: 'spacing',

transformToCss: value
value =>
=> ({

marginTop: value,

marginBottom: value




p: {

cssProp: 'padding',

themeProp: 'spacing'


pt: {

cssProp: 'paddingTop',

themeProp: 'spacing'


pl: {

cssProp: 'paddingLeft',

themeProp: 'spacing'


pr: {

cssProp: 'paddingRight',

themeProp: 'spacing'


pb: {

cssProp: 'paddingBottom',

themeProp: 'spacing'


px: {

themeProp: 'spacing',

transformToCss: value
value =>
=> ({

paddingLeft: value,

paddingRight: value



py: {

themeProp: 'spacing',

transformToCss: value
value =>
=> ({

paddingTop: value,

paddingBottom: value




height: {

themeProp: 'sizes'


minHeight: {

themeProp: 'sizes'


maxHeight: {

themeProp: 'sizes'



width: {

themeProp: 'sizes'


minWidth: {

themeProp: 'sizes'


maxWidth: {

themeProp: 'sizes'



size: {

themeProp: 'sizes',

transformToCss: value
value =>
=> ({

height: value,

width: value



minSize: {

themeProp: 'sizes',

transformToCss: value
value =>
=> ({

minHeight: value,

minWidth: value



maxSize: {

themeProp: 'sizes',

transformToCss: value
value =>
=> ({

maxHeight: value,

maxWidth: value




gridGap: {

themeProp: 'spacing'


gridRowGap: {

themeProp: 'spacing'


gridColumnGap: {

themeProp: 'spacing'



color: {

cssProp: 'color',

themeProp: 'colors'


bg: {

cssProp: 'backgroundColor',

themeProp: 'colors'


fill: {

themeProp: 'colors'


stroke: {

themeProp: 'colors'



borderColor: {

themeProp: 'colors'



bgFullWidth: {

themeProp: 'colors',

transformToCss: value
value =>
=> ({

position: 'relative',

zIndex: 1,

':before': {

content: '""',

width: '200vw',

height: '100%',

background: value,

position: 'absolute',

left: '-50vw',

right: '50vw',

top: 0,

zIndex: -1





fontSize: {

themeProp: 'fontSizes'


fontFamily: {

themeProp: 'fonts'



lineHeight: {

themeProp: 'lineHeights'


fontWeight: {

themeProp: 'fontWeights'


letterSpacing: {

themeProp: 'letterSpacings'



border: {

themeProp: 'borders'


borderTop: {

themeProp: 'borders'


borderRight: {

themeProp: 'borders'


borderBottom: {

themeProp: 'borders'


borderLeft: {

themeProp: 'borders'



borderRadius: {

themeProp: 'borderRadius'



boxShadow: {

themeProp: 'boxShadows'



position: {},


transitionTimingFunction: {

themeProp: 'easingFunctions'



transitionDuration: {

themeProp: 'transitionDurations'



opacity: {

themeProp: 'opacities'



textDecoration: {

themeProp: 'textDecorations'



top: {},

right: {},

bottom: {},

left: {},


display: {},


visibility: {},


alignItems: {},

justifyContent: {},

flexWrap: {},

flexDirection: {},

flex: {},

alignContent: {},

justifySelf: {},

justifyItems: {},

textAlign: {},

alignSelf: {},

order: {},

flexBasis: {},


gridColumn: {},

gridRow: {},

gridAutoFlow: {},

gridAutoRows: {},

gridAutoColumns: {},

gridTemplateRows: {},

gridTemplateColumns: {},

gridTemplateAreas: {},

gridArea: {},

gridTemplate: {},


overflow: {},

overflowX: {},

overflowY: {},


cursor: {}





## Theme
Theme object
object mapping


When you
you create
create a
a theme
theme it
it has
has various
various keys;
keys; `colors`,
`colors`, `fontSizes`.
`fontSizes`. Each
Each of
of these
these then
then contains
contains values.
values. These
These are
are mapped
mapped to
to css
css properties
properties meaning
meaning that
that the
the correct
correct value
value is
is passed.





export const
const falconThemeV2
falconThemeV2 =
= createTheme({

colors: {

primary: '#262828',

secondary: '#EEEDEB'


spacing: {

xxs: 4,

xs: 8


fontSizes: {

xxs: 11,

xs: 12









<Box color='primary'
color='primary' py='xxs'>





In the
the above
above example
example you
you can
can see
see the
the **prop**,
**prop**, `py="xxs"`.
`py="xxs"`. In
In the
the theme
theme object
object you
you can
can there
there is
is both
both `spacing.xxs`
`spacing.xxs` and
and `fontSizes.xxs`.
`fontSizes.xxs`. This
This is
is where
where the
the mapping
mapping comes
comes in.


If you
you look
look in
in `@deity/falcon-ui/src/theme/responsiveprops.ts`
`@deity/falcon-ui/src/theme/responsiveprops.ts` you
you will
will see
see where
where these
these properties
properties are
are mapped.
mapped. You
You will
will see
see the
the `themeProp`
`themeProp` which
which refers
refers to
to which
which **key**
**key** in
in the
the **theme**
**theme** object,
object, and
and `cssProp`
`cssProp` which
which is
is the
the css
css property
property it's
it's mapped
mapped to.





m: {

themeProp: 'spacing';




### Property
Property map



m: {

themeProp: 'spacing'


mt: {

themeProp: 'spacing'


ml: {

themeProp: 'spacing'


mr: {

themeProp: 'spacing'


mb: {

themeProp: 'spacing'


mx: {

themeProp: 'spacing',


my: {

themeProp: 'spacing',


p: {

themeProp: 'spacing'


pt: {

themeProp: 'spacing'


pl: {

themeProp: 'spacing'


pr: {

themeProp: 'spacing'


pb: {

themeProp: 'spacing'


px: {

themeProp: 'spacing',


py: {

themeProp: 'spacing',


height: {

themeProp: 'sizes'


minHeight: {

themeProp: 'sizes'


maxHeight: {

themeProp: 'sizes'


width: {

themeProp: 'sizes'


minWidth: {

themeProp: 'sizes'


maxWidth: {

themeProp: 'sizes'


size: {

themeProp: 'sizes',


minSize: {

themeProp: 'sizes',


maxSize: {

themeProp: 'sizes',


gridGap: {

themeProp: 'spacing'


gridRowGap: {

themeProp: 'spacing'


gridColumnGap: {

themeProp: 'spacing'


color: {

themeProp: 'colors'


bg: {

themeProp: 'colors'


fill: {

themeProp: 'colors'


stroke: {

themeProp: 'colors'


borderColor: {

themeProp: 'colors'


bgFullWidth: {

themeProp: 'colors',


fontSize: {

themeProp: 'fontSizes'


fontFamily: {

themeProp: 'fonts'


lineHeight: {

themeProp: 'lineHeights'


fontWeight: {

themeProp: 'fontWeights'


letterSpacing: {

themeProp: 'letterSpacings'


border: {

themeProp: 'borders'


borderTop: {

themeProp: 'borders'


borderRight: {

themeProp: 'borders'


borderBottom: {

themeProp: 'borders'


borderLeft: {

themeProp: 'borders'


borderRadius: {

themeProp: 'borderRadius'


boxShadow: {

themeProp: 'boxShadows'


transitionTimingFunction: {

themeProp: 'easingFunctions'


transitionDuration: {

themeProp: 'transitionDurations'


opacity: {

themeProp: 'opacities'


textDecoration: {

themeProp: 'textDecorations'




:::note Unmapped
Unmapped properties

If you
you want
want to
to add
add CSS
CSS that
that isn't
isn't mapped
mapped you
you can
can pass
pass a
a <a
<a href="https://www.w3schools.com/react/react_css.asp"
href="https://www.w3schools.com/react/react_css.asp" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">normal
noreferrer">normal css
css object</a>
object</a> to
to the
the css
css prop
prop e.g.
e.g. `css={{
`css={{ top:
top: 0
0 }}`





## Utility
Utility Functions


### Negative
Negative Spacings


This function
function aims
aims to
to provide
provide you
you with
with additional
additional `spacing`
`spacing` properties
properties by
by adding
adding a
a negative
negative version
version of
of the
the positive
positive number
number properties
properties which
which are
are defined
defined in
in the
the theme's
theme's `spacing`
`spacing` object.



// mapNegativeSpacings(theme:
mapNegativeSpacings(theme: Theme):
Theme): Theme

const themeWithNegativeSpacings
themeWithNegativeSpacings =
= mapNegativeSpacings(theme);



It accomplishes
accomplishes the
the goal
goal by
by taking
taking the
the positive
positive number's
number's key
key and
and and
and prefixing
prefixing it
it with
with a
a `-`
`-` and
and multiplying
multiplying the
the number
number value
value by
by `-1`.



export const
const defaultBaseTheme
defaultBaseTheme =
= {

spacing: {

auto: 'auto',

none: 0,

xs: 8,

sm: 16,

md: 24,

lg: 32,

xl: 40,

xxl: 48,

xxxl: 64,

full: '100%',





The above
above theme
theme will
will be
be replaced
replaced by
by the
the one
one below
below via
via the
the use
use of
of the
the utility
utility function.



export const
const defaultBaseTheme
defaultBaseTheme =
= {

spacing: {

auto: 'auto',

none: 0,

xs: 8,

sm: 16,

md: 24,

lg: 32,

xl: 40,

xxl: 48,

xxxl: 64,

full: '100%',


-xs: -8,

-sm: -16,

-md: -24,

-lg: -32,

-xl: -40,

-xxl: -48,

-xxxl: -64






### Grid
Grid Sizes


This function
function allows
allows you
you to
to generate
generate custom
custom properties
properties for
for the
the `sizes`
`sizes` object.



// gridSizes(columnAmount:
gridSizes(columnAmount: number,
number, theme:
theme: Theme)

const themeWithGridSizes
themeWithGridSizes =
= gridSizes(8,
gridSizes(8, theme);



By providing
providing a
a `columnAmount`,
`columnAmount`, the
the function
function will
will divide
divide 100%
100% by
by the
the `columnAmount`,
`columnAmount`, that
that will
will be
be the
the increment
increment amount.
amount. Each
Each property
property will
will be
be calculated
calculated by
by performing
performing a
a sum
sum of
of the
the previous
previous value
value and
and of
of the
the increment
increment amount
amount and
and mapped
mapped to
to a
a key
key representing
representing the
the fraction.


The above-defined
above-defined code
code will
will result
result in
in the
the following
following `sizes`
`sizes` properties:



export const
const defaultBaseTheme
defaultBaseTheme =
= {

sizes: {

'1/8': '12.5%',

'2/8': '25%',

'3/8': '37.5%',

'4/8': '50%',

'5/8': '62.5%',

'6/8': '75%',

'7/8': '87.5%',





id: css-sass

title: CSS
CSS /
/ Sass
Sass support

sidebar_label: CSS
CSS /
/ Sass
Sass support



To add
add your
your styles
styles using
using a
a `css`
`css` or
or `scss`
`scss` file
file simply
simply import
import it.





.myBlock {

background: red;








import './styles.scss';



<div className="myBlock">

Block with
with a
a red
red background




### Global
Global SCSS
SCSS files


Want to
to include
include global
global `scss`
`scss` files
files for
for you
you variables,
variables, mixins
mixins and
and function?
function? [Check
[Check out
out our
our cookbook](/platform/cookbook/client/scss-global).


### POST
POST CSS


Want to
to use
use Post
Post CSS
CSS files
files for
for you
you variables,
variables, mixins
mixins and
and function?
function? [Check
[Check out
out our
our cookbook](/platform/cookbook/client/post-css-support).


id: icons

title: Site
Site Icons

sidebar_label: Site
Site Icons



Falcon Client
Client comes
comes with
with an
an Icon
Icon component
component `@deity/falcon-ui`.
`@deity/falcon-ui`. This
This component
component expects
expects you
you to
to have
have icons
icons set
set in
in your
your theme.





export const
const yourThemeName
yourThemeName =
= createTheme({


icons: {}




If you're
you're using
using the
the `demo-v2`
`demo-v2` example,
example, you'll
you'll see
see a
a `client/src/styling/icons.js`
`client/src/styling/icons.js` file.
file. This
This is
is imported
imported into
into your
your theme.





import {
{ icons
icons }
} from
from './icons';

export const
const yourThemeName
yourThemeName =
= createTheme({









import Icon
Icon from
from '..//img/opensource/icon.svg';


export const
const icons
icons =
= {


newIcon: {
{ icon:
icon: NewIcon
NewIcon },





The `client/src/styling/icons.js`
`client/src/styling/icons.js` component
component exports
exports and
and object
object with
with each
each icon
icon included.
included. We
We have
have the
the <a
<a href="https://boxicons.com/"
href="https://boxicons.com/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">boxicons
noreferrer">boxicons package</a>
package</a> included
included so
so you
you have
have access
access to
to all
all these
these icons
icons right
right from
from the
the start.




import User
User from
from 'boxicons/svg/regular/bx-user.svg';

import Logo
Logo from
from '..//img/opensource/logo.svg';


export const
const icons
icons =
= {

logo: {

icon: Logo,

size: 'sm'


account: {
{ icon:
icon: User
User },





You can
can also
also add
add your
your SVG
SVG directly
directly into
into the
the icon
icon component
component rather
rather than
than importing
importing it.





export const
const icons
icons =
= {


loader: {

icon: props
props =>
=> (

<svg viewBox="0
viewBox="0 0
0 50
50 50"
50" {...props}>



transform="rotate(241.969 25
25 25)"






from="0 25
25 25"

to="360 25
25 25"











id: cli-commands

title: CLI
CLI Commands

sidebar_label: CLI
CLI Commands



Falcon Client
Client is
is part
part of
of Falcon
Falcon Platform
Platform and
and is
is included
included when
when using
using [create-falcon-app](../getting-started/create).


## Falcon
Falcon Client
Client Commands


From the
the `client`
`client` directory
directory you
you can
can run
run the
the following
following commands
commands (in
(in your
your terminal).


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';


### Start







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm start</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn start</CodeBlock>





This will
will call
call the
the `falcon-client`
`falcon-client` executable
executable to
to start
start up
up the
the client
client process
process with
with Node.js.




- `--inspect=[host:port]`
`--inspect=[host:port]` -
- To
To debug
debug the
the node
node server.
server. This
This will
will start
start the
the node
node server
server and
and enable
enable the
the inspector
inspector agent.
agent. The
The =[host:port]
=[host:port] is
is optional
optional and
and defaults
defaults to
to `=127.0.0.1:9229`.
`=127.0.0.1:9229`. <a
<a href="https://nodejs.org/en/docs/guides/debugging-getting-started/"
href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">See
noreferrer">See the
the Node.js
Node.js debugging
debugging guide
guide for
for more
more information</a>.

- `--inspect-brk=[host:port]`
`--inspect-brk=[host:port]` -
- This
This is
is the
the same
same as
as --inspect,
--inspect, but
but will
will also
also break
break before
before user
user code
code starts.
starts. (to
(to give
give a
a debugger
debugger time
time to
to attach
attach before
before early
early code
code runs).


**Useful Variants**


- `start:dbg`
`start:dbg` -
- An
An alias
alias for
for `--inspect`

- `start:dbg-brk`
`start:dbg-brk` -
- An
An alias
alias for
for `--inspect-brk`


### Test


This run
run the
the test
test watcher
watcher (<a
(<a href="https://jestjs.io/"
href="https://jestjs.io/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Jest</a>)
noreferrer">Jest</a>) in
in an
an interactive
interactive mode.
mode. By
By default,
default, runs
runs tests
tests related
related to
to files
files changed
changed since
since the
the last
last commit.







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm test</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn test</CodeBlock>





### Build


Builds the
the app
app for
for production,
production, and
and outputs
outputs to
to the
the `./build`
`./build` folder.


The build
build is
is minified
minified and
and the
the filenames
filenames include
include the
the hashes.
hashes. Your
Your app
app is
is ready
ready to
to be
be deployed!







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm build:prod</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn build:prod</CodeBlock>





### Size


Runs an
an interactive
interactive zoomable
zoomable treemap
treemap of
of output
output files
files to
to visualize
visualize their
their size.
size. Report
Report will
will be
be automatically
automatically open
open in
in default
default browser
browser at
at `http://localhost:8888`.







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm size</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn size</CodeBlock>





### Restart


If your
your application
application is
is running,
running, and
and you
you need
need to
to manually
manually restart
restart your
your server,
server, you
you do
do not
not need
need to
to completely
completely kill
kill and
and rebundle
rebundle your
your application.
application. Instead
Instead you
you can
can just
just type
type `rs`
`rs` and
and press
press enter
enter in
in terminal.






id: configuration

title: Configuration

sidebar_label: Configuration



Falcon Client
Client configuration
configuration can
can be
be found
found in
in the
the `client/config`
`client/config` directory.


For more
more details
details see
see our
our [configuration
[configuration docs](/platform/configuration/overview)
docs](/platform/configuration/overview) and
and our
our [client
[client config
config docs](/platform/configuration/client).




id: client

title: Falcon
Falcon Client
Client Configuration

sidebar_label: Falcon
Falcon Client



Configs are
are stored
stored as
as an
an object
object in
in [Apollo
[Apollo State](/platform/client/state).


`config` has
has **no
**no schema**
schema** meaning
meaning you
you can
can add
add anything
anything you
you like.


## Google
Google Analytics
Analytics Example


This example
example shows
shows how
how to
to retrieve
retrieve and
and use
use these
these configs
configs in
in your
your components.





query ANALYTICS
ANALYTICS {

config @client
@client {

googleAnalytics {







We pass
pass our
our query
query to
to `withApollo`
`withApollo` to
to access
access configs.
configs. This
This passes
passes `client`
`client` as
as a
a prop:



const {
{ client
client }
} =
= props;



This can
can then
then be
be used
used to
to query
query the
the Apollo
Apollo stateL



const {
{ config
config }
} =
= client.readQuery({
client.readQuery({ query:
query: ANALYTICS
ANALYTICS })
}) ||
|| {};



**See the
the full
full example
example component**



import React
React from
from 'react';

import {
{ withApollo
withApollo }
} from
from '@apollo/react-hoc';

import GAnalytics
GAnalytics from
from 'ganalytics';

import {
{ ANALYTICS
ANALYTICS }
} from
from '../graphql/analytics.gql';


let ga
ga =
= null;


export default
default WrappedComponent
WrappedComponent =>
=> {

const WithAnalytics
WithAnalytics =
= props
props =>
=> {

if (process.browser
(process.browser &&
&& !ga)
!ga) {

const {
{ client
client }
} =
= props;

const {
{ config
config }
} =
= client.readQuery({
client.readQuery({ query:
query: ANALYTICS
ANALYTICS })
}) ||
|| {};

const {
{ googleAnalytics
googleAnalytics }
} =
= config
config ||
|| {};

const {
{ trackerID
trackerID }
} =
= googleAnalytics
googleAnalytics ||
|| {};


if (trackerID)
(trackerID) {

ga =
= new
new GAnalytics(trackerID,
GAnalytics(trackerID, {},
{}, true);




return <WrappedComponent
<WrappedComponent {...props}
{...props} ga={ga}
ga={ga} />;



return withApollo(WithAnalytics);




This same
same principle
principle can
can used
used for
for all
all client
client configs.


id: files

title: File
File structure

sidebar_label: File
File structure



## Key
Key Files
Files and
and Folders


This is
is **not**
**not** a
a **complete
**complete list**
list** of
of files
files and
and folders.
folders. Just
Just the
the **key
**key files**
files** you'll
you'll need
need to
to know
know about
about to
to get
get started.


<div class="codeBlock">

client/<br />

    |- <a
<a href="#build">build</a><br
href="#build">build</a><br />

    |- <a
<a href="#config">config</a><br
href="#config">config</a><br />

    |- <a
<a href="#i18n">i18n</a><br
href="#i18n">i18n</a><br />

    <a href="#indexjs">index.js</a><br
href="#indexjs">index.js</a><br />

    <a href="#moduleOverridejs">moduleOverride.js</a><br
href="#moduleOverridejs">moduleOverride.js</a><br />

    |- <a
<a href="#node_modules">node_modules</a><br
href="#node_modules">node_modules</a><br />

    <a href="#packagejson">package.json</a><br
href="#packagejson">package.json</a><br />

    <a href="#prettierconfigjs">prettier.config.js</a><br
href="#prettierconfigjs">prettier.config.js</a><br />

    |- <a
<a href="#public">public</a><br
href="#public">public</a><br />

    |- src<br
src<br />

        <a href="#srcappjs">App.js</a><br
href="#srcappjs">App.js</a><br />

        |- <a
<a href="#srcassets">assets</a><br
href="#srcassets">assets</a><br />

        |- <a
<a href="#srccomponents">components</a><br
href="#srccomponents">components</a><br />

        <a href="#srcmanifestwebmanifest">manifest.webmanifest</a><br
href="#srcmanifestwebmanifest">manifest.webmanifest</a><br />

        |- <a
<a href="#srcpages">pages</a><br
href="#srcpages">pages</a><br />

        |- styling<br
styling<br />

            <a href="#srcstylingiconjs">icon.js</a><br
href="#srcstylingiconjs">icon.js</a><br />

            <a href="#srcstylingthemejs">theme.js</a><br
href="#srcstylingthemejs">theme.js</a><br />

    <a href="#swjs">sw.js</a>





### build

The build
build directory
directory contains
contains the
the built
built assets
assets for
for your
your site.
site. This
This should
should not
not be
be committed
committed to
to your
your git
git repo.


### config

The config
config directory
directory contains
contains Falcon
Falcon Client
Client config
config json
json files
files (`default.json`,
(`default.json`, `production.json`
`production.json` etc).
etc). In
In these
these files
files you'll
you'll be
be able
able to
to configure
configure things
things like
like the
the port
port Falcon
Falcon Client
Client is
is running
running on.
 

### i18n

This directory
directory contains
contains your
your sites
sites translations.
translations. The
The structure
structure is
is `<language>/translations.json`.
`<language>/translations.json`. e.g.
e.g. `en/translations.json`
`en/translations.json` for
for english
english translations.


### index.js

This is
is where
where everything
everything starts.
starts. Other
Other that
that exporting
exporting the
the app
app and
and client
client state
state nothing
nothing much
much happens
happens here.


### moduleOverride.js

From this
this file
file you
you can
can override
override components
components from
from within
within node
node packages.
packages. This
This is
is create
create if
if you
you want
want to
to change
change a
a component
component from
from `@deity/falcon-ui-kit`
`@deity/falcon-ui-kit` for
for example.
example. [Find
[Find out
out more
more about
about overriding](./overrides).


### node_modules

This is
is where
where npm
npm packages
packages are
are installed
installed to.


### package.json

This defines
defines project
project details
details including
including package
package requirements.


### prettier.config.js

Falcon Platform
Platform uses
uses <a
<a href="https://prettier.io/"
href="https://prettier.io/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Prettier</a>
noopener">Prettier</a> for
for code
code formatting.
formatting. You
You can
can change
change the
the config
config in
in this
this file.


### public

This folder
folder is
is publicly
publicly accessible.
accessible. You
You can
can use
use it
it for
for files
files such
such as
as `robots.txt`.


### src/App.js

This file
file contains
contains your
your app.
app. Everything
Everything in
in Falcon
Falcon Client
Client starts
starts here.
here. A
A lot
lot happens
happens in
in this
this file
file including
including mapping
mapping components
components to
to routes.


### src/assets

This is
is where
where static
static assets
assets live.
live. It's
It's a
a great
great place
place to
to put
put files
files like
like touch
touch icons
icons and
and other
other similar
similar images.


### src/components

This is
is the
the home
home to
to your
your global
global components
components such
such as
as the
the header.


### src/manifest.webmanifest

This file
file contains
contains your
your sites
sites `manifest.json`
`manifest.json` config.


### src/pages

This is
is the
the home
home to
to page
page &
& page
page specific
specific components.
components. You'll
You'll find
find most
most of
of the
the checkout
checkout and
and shop
shop components
components in
in here.


### src/styling/icon.js

This file
file exports
exports SVG
SVG icons
icons to
to be
be used
used throughout
throughout the
the site.
 

### src/styling/theme.js

This file
file contains
contains your
your theme
theme variables
variables such
such as
as colors
colors and
and spacing.
spacing. [More
[More information
information on
on theming](./theming/overview).
 

### sw.js

This is
is compiled
compiled into
into your
your sites
sites service
service worker.
worker. You
You can
can add
add to
to this
this if
if you
you need
need custom
custom service
service worker
worker code.


id: installation

title: Installation

sidebar_label: Installation

description: How
How to
to get
get started
started with
with Falcon
Falcon Platform





## Basic
Basic setup
setup steps


Getting started
started with
with Falcon
Falcon Platform
Platform can
can be
be broken
broken down
down into
into a
a few
few simple
simple steps.


1. [Prerequisites](../../platform/getting-started/prerequisites)

2. [Setup
[Setup Dcloud](../../platform/getting-started/dcloud)

3. [Get
[Get access
access to
to our
our private
private NPM
NPM packages](../../platform/getting-started/npm)

4. [Create
[Create and
and configure
configure your
your app](c../../platform/getting-started/reate)

5. [Create
[Create and
and configure
configure your
your code
code repository](../../platform/getting-started/repository)

6. [Configure
[Configure your
your environment](../../platform/getting-started/configure)

7. [Manage
[Manage and
and deploy
deploy your
your app](../../platform/deployment/overview)


id: webpack

title: Webpack
Webpack /
/ build
build config

sidebar_label: Webpack
Webpack /
/ build
build config



You can
can extend
extend your
your sites
sites Webpack
Webpack configuration
configuration in
in `client/falcon-client.build.config.js`.


This is
is an
an optional
optional build-time
build-time configuration
configuration file
file which
which is
is used
used to
to set
set up
up the
the entire
entire build
build process.
process. Bellow,
Bellow, there
there is
is an
an example
example of
of `falcon-client.build.config.js`
`falcon-client.build.config.js` file
file content
content with
with defaults:





module.exports =
= {

devServerPort: 3001,

clearConsole: true,

useWebmanifest: false,

i18n: {},

envToBuildIn: [],

plugins: [],

moduleOverride: {}




- `devServerPort:
`devServerPort: number`
number` -
- (default:
(default: `3001`)
`3001`) webpack
webpack dev
dev server
server (HMR)
(HMR) port

- `clearConsole:
`clearConsole: boolean`
boolean` -
- (default:
(default: `true`)
`true`) determines
determines whether
whether console
console should
should be
be cleared
cleared when
when starting
starting script

- `useWebmanifest:
`useWebmanifest: boolean`
boolean` -
- (default:
(default: `false`)
`false`) determines
determines whether
whether [Web
[Web App
App Manifest](/platform/client/files#srcmanifestwebmanifest)
Manifest](/platform/client/files#srcmanifestwebmanifest) should
should be
be processed
processed via
via webpack
webpack and
and included
included in
in output
output bundle

- `i18n:
`i18n: object`
object` -
- (default:
(default: `{}`)
`{}`) internationalization
internationalization configuration,
configuration, [see
[see the
the details](/v2019/platform/falcon-client/internationalization#configuration)

- `envToBuildIn`
`envToBuildIn` -
- (default:
(default: `[]`)
`[]`) an
an array
array of
of environment
environment variable
variable names
names which
which should
should be
be build
build in
in into
into bundle,
bundle, [see
[see the
the details](#environment-variables)

- `plugins`
`plugins` -
- (default:
(default: `[]`)
`[]`) an
an array
array of
of plugins
plugins which
which can
can modify
modify underlying
underlying [webpack
[webpack configuration](#webpack).

- `moduleOverride`
`moduleOverride` -
- (default:
(default: `{}`)
`{}`) array
array of
of module
module names
names to
to override,
override, [see
[see the
the details](./overrides)


Falcon Client
Client provides
provides you
you much
much more
more build
build configuration
configuration options.
options. You
You can
can find
find all
all of
of them
them described
described in
in [Build
[Build process
process configuration](#build-process-configuration)
configuration](#build-process-configuration) section.


## Build
Build process
process configuration


Falcon Client
Client comes
comes with
with all
all necessary
necessary features
features and
and development
development tools
tools turned
turned on
on by
by default:


- Universal
Universal [HMR](https://webpack.js.org/concepts/hot-module-replacement/)
[HMR](https://webpack.js.org/concepts/hot-module-replacement/) -
- page
page auto-reload
auto-reload if
if you
you make
make edits
edits (on
(on both
both backend
backend and
and frontend)

- Latest
Latest JavaScript
JavaScript achieved
achieved via
via babel
babel 7
7 compiler.

- ESLint
ESLint with
with [Prettier](https://github.com/prettier/prettier)
[Prettier](https://github.com/prettier/prettier) -
- to
to keep
keep your
your code
code base
base clean
clean and
and consistent

- Jest
Jest test
test runner
runner setup
setup with
with sensible
sensible defaults.


However, you
you can
can still
still modify
modify Falcon
Falcon Client
Client defaults


## Examples


Checkout out
out our
our **cookbook**
**cookbook** for
for examples
examples of
of changing
changing the
the build
build process.


- [Adding
[Adding a
a global
global SCSS
SCSS file](../cookbook/client/scss-global)

- [Adding
[Adding Post
Post CSS
CSS support](../cookbook/client/post-css-support)


id: overrides

title: Overriding
Overriding Components

sidebar_label: Overriding
Overriding Components



:::note Only
Only override
override what
what you
you need

We will
will occasionally
occasionally be
be pushing
pushing changes
changes to
to our
our components.
components. If
If they
they have
have been
been overridden
overridden you
you won't
won't automatically
automatically get
get these
these changes
changes when
when you
you upgrade.



Falcon Platform
Platform makes
makes overriding
overriding components
components very
very simple.


Within the
the client
client directory
directory you'll
you'll find
find a
a `moduleOverride.js`
`moduleOverride.js` file.


You can
can use
use this
this to
to override
override components
components pulled
pulled in
in from
from external
external packages.



module.exports =
= {

'<original_file>': '<new_file>',




So to
to override
override a
a UI
UI component
component from
from `@deity/falcon-ui`
`@deity/falcon-ui` it
it would
would look
look like
like this:



module.exports =
= {

'@deity/falcon-ui/dist/components/Input': 'src/components/Input',




### Fixing
Fixing imports


It's worth
worth noting
noting that
that you
you may
may need
need to
to **change
**change some
some of
of the
the imports**
imports** from
from relative
relative to
to absolute:


From this:


import {
{ Icon
Icon }
} from
from './../Icon';



To this:


import {
{ Icon
Icon }
} from
from '@deity/falcon-ui';



## Watch
Watch our
our 'how
'how to'
to' guide

<iframe width="560"
width="560" height="315"
height="315" src="https://www.youtube.com/embed/caaWQ1S-lOQ?rel=0"
src="https://www.youtube.com/embed/caaWQ1S-lOQ?rel=0" frameborder="0"
frameborder="0" allow="accelerometer;
allow="accelerometer; autoplay;
autoplay; encrypted-media;
encrypted-media; gyroscope;
gyroscope; picture-in-picture"
picture-in-picture" allowFullScreen></iframe>


id: caching

title: Caching

sidebar_label: Caching



## Overview


Caching occurs
occurs in
in a
a few
few different
different forms
forms with
with Falcon
Falcon Platform.
Platform. You
You have
have asset
asset caches
caches via
via the
the browser
browser and
and a
a service
service worker,
worker, and
and data
data caches
caches handled
handled by
by Falcon
Falcon Server
Server (GraphQL).


## Falcon
Falcon Client


Webpack generates
generates unique
unique chunk
chunk names
names during
during each
each build.
build. These
These chunks
chunks are
are set
set to
to have
have a
a cache
cache lifetime
lifetime of
of 1
1 year.
year. This
This means
means the
the a
a users
users will
will get
get a
a new
new version
version of
of your
your code
code each
each time
time you
you deploy
deploy new
new changes
changes (run
(run the
the build
build script).
script). See
See our
our [code
[code splitting](/storefront/code-splitting)
splitting](/storefront/code-splitting) guide
guide for
for more
more information.


Our service
service worker
worker will
will cache
cache these
these static
static assets
assets in
in local
local storage.


We have
have 2
2 components
components to
to help
help with
with this
this and
and to
to prevent
prevent that
that users
users are
are getting
getting served
served stale
stale content.
content. These
These are
are imported
imported from
from our
our `@deity/falcon-service-worker`
`@deity/falcon-service-worker` package.
package. They
They will
will show
show users
users a
a message
message to
to fetch
fetch new
new content
content if
if changes
changes are
are detected.





import {
{ ServiceWorkerRegistrar,
ServiceWorkerRegistrar, ServiceWorker
ServiceWorker }
} from
from '@deity/falcon-service-worker';






{({ isWaiting,
isWaiting, skipWaiting
skipWaiting })
}) =>

isWaiting ?
? (


Site has
has updated.
updated. To
To see
see changes
changes close
close other
other tabs
tabs or

<Button size="ms"
size="ms" p="xs"
p="xs" m="sm"
m="sm" onClick={()
onClick={() =>
=> skipWaiting()}>

click here



) :
: null







## Falcon
Falcon Server


Falcon Server
Server also
also adds
adds a
a layer
layer of
of caching
caching for
for all
all it's
it's requests.
requests. Read
Read our
our [Falcon
[Falcon Server
Server caching](/v2019/platform/falcon-server/caching)
caching](/v2019/platform/falcon-server/caching) docs.


id: technical

title: Technical
Technical Information

sidebar_label: Technical
Technical Information



Falcon Client
Client is
is the
the frontend
frontend for
for your
your Falcon
Falcon Platform
Platform App.


It's built
built using
using ReactJS
ReactJS and
and connects
connects Falcon
Falcon Server
Server via
via GraphQL.


## Core
Core Technologies


### Components

- <a
<a href="https://reactjs.org/"
href="https://reactjs.org/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">ReactJs
noreferrer">ReactJs (v16)</a>


### State
State management

- <a
<a href="https://www.apollographql.com/"
href="https://www.apollographql.com/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Apollo</a>


### Build

- <a
<a href="https://webpack.js.org/"
href="https://webpack.js.org/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Webpack</a>

- <a
<a href="https://babeljs.io/"
href="https://babeljs.io/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Babel</a>


### Testing

- <a
<a href="https://jestjs.io/"
href="https://jestjs.io/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Jest</a>


id: about

title: What
What is
is Falcon
Falcon Client?

sidebar_label: About



Falcon Client
Client serves
serves as
as your
your PWA
PWA theme.
theme. It's
It's a
a set
set of
of ReactJs
ReactJs components
components that
that build
build up
up your
your UI.


It's the
the entrypoint
entrypoint for
for frontend
frontend features
features of
of the
the Falcon
Falcon Platform
Platform stack.
stack. It
It provides
provides app
app building
building capabilities
capabilities and
and features
features which
which can
can be
be used
used to
to create
create your
your application.


Falcon Client
Client includes
includes everything
everything you
you need
need to
to create
create a
a fully
fully functioning
functioning PWA
PWA with
with offline
offline support,
support, optimum
optimum performance
performance and
and server
server side
side rendering.


id: translations

title: Internationalization

sidebar_label: Internationalization




Internationalization is
is based
based on
on [i18next](https://www.i18next.com/).


## Basics


All i18n
i18n resources
resources should
should be
be placed
placed in
in `./i18n`
`./i18n` directory,
directory, and
and folder
folder structure
structure should
should follow
follow pattern
pattern `{{lng}}/{{ns}}.json`.
`{{lng}}/{{ns}}.json`. Which
Which means
means each
each language
language needs
needs to
to have
have own
own directory
directory with
with `json`
`json` file
file per
per namespace:












Default namespace
namespace is
is `translations`
`translations` and
and there
there is
is also
also fallback
fallback configured
configured to
to it,
it, in
in case
case if
if translation
translation key
key can
can not
not be
be found
found in
in other
other namespaces.


HMR for
for translation
translation files
files is
is supported.


## Configuration


Configuration options
options base
base on
on [i18next](https://www.i18next.com/overview/configuration-options)
[i18next](https://www.i18next.com/overview/configuration-options) and
and you
you can
can change
change them
them via
via configuration
configuration `config.i18n`
`config.i18n` exported
exported from
from `bootstrap.js`
`bootstrap.js` file:


- `lng:
`lng: string`
string` -
- (default:
(default: `en`)
`en`) default
default application
application language

- `fallbackLng:
`fallbackLng: string`
string` -
- (default:
(default: `en`)
`en`) language
language to
to use
use if
if translations
translations in
in selected
selected language
language are
are not
not available

- `whitelist:
`whitelist: string[]`
string[]` -
- (default:
(default: `['en']`)
`['en']`) available
available languages,
languages, it
it may
may be
be be
be narrowed,
narrowed, if
if installed
installed extensions
extensions does
does not
not support
support all
all of
of specified

- `ns:
`ns: string[]`
string[]` -
- (default:
(default: `['translations']`)
`['translations']`) namespaces
namespaces used
used by
by application

- `debug:
`debug: boolean`
boolean` -
- (default:
(default: `false`)
`false`) i18next
i18next debug
debug mode
mode switch

- `resources:
`resources: object`
object` -
- (default:
(default: `undefined`)
`undefined`) allows
allows to
to inject
inject translations
translations inline,
inline, useful
useful during
during testing


### node.js

Node.js has
has rich
rich [internationalization
[internationalization support](https://nodejs.org/api/intl.html#intl_internationalization_support),
support](https://nodejs.org/api/intl.html#intl_internationalization_support), however,
however, more
more of
of them
them are
are disabled
disabled because
because it
it requires
requires very
very large
large ICU
ICU data
data file
file which
which is
is not
not provided
provided by
by Node.js
Node.js by
by default.
default. In
In order
order to
to enable
enable it,
it, you
you need
need to
to provide
provide a
a path
path to
to ICU
ICU data
data file
file at
at runtime.
runtime. `falcon-client`
`falcon-client` will
will try
try to
to resolve
resolve that
that path
path to
to ICU
ICU data
data file
file automatically,
automatically, but
but only
only in
in development
development (`falcon-client
(`falcon-client start`).
start`). In
In production,
production, you
you need
need to
to configure
configure it
it according
according to
to your
your needs,
needs, [here](https://nodejs.org/api/intl.html#intl_providing_icu_data_at_runtime)
[here](https://nodejs.org/api/intl.html#intl_providing_icu_data_at_runtime) you
you can
can find
find available
available techniques.


By default
default node.js
node.js does
does not
 
## React
React components


Using i18next
i18next directly
directly in
in react
react is
is clumsy,
clumsy, so
so we
we provide
provide Components
Components to
to make
make it
it very
very easy


### I18n
I18n Component


`<I18n>` is
is a
a component
component rendering
rendering render
render props:


- `t:
`t: i18next.TranslationFunction`
i18next.TranslationFunction` -
- i18next
i18next translation
translation function
function [see
[see the
the details](https://www.i18next.com/overview/api#t)

- `i18n:
`i18n: i18next.i18n`
i18next.i18n` -
- fully
fully initialized
initialized i18next
i18next instance
instance [see
[see the
the details](https://www.i18next.com/overview/api#api)


It is
is useful
useful in
in cases
cases when
when you
you would
would like
like to
to have
have an
an access
access to
to `t`
`t` function
function to
to get
get a
a translated
translated text
text inline:




{t =>
=> <Image
<Image src={items[0].full}
src={items[0].full} alt={t("productGallery.imageAlt")}
alt={t("productGallery.imageAlt")} />}




or you
you need
need to
to have
have an
an access
access to
to `i18next`
`i18next` instance
instance to
to change
change the
the language:




{(_t, i18n)
i18n) =>
=> (



onChange={x =>
=> i18n.changeLanguage(x.code)}






### T
T Component


As in
in many
many places
places you
you will
will need
need to
to render
render a
a translated
translated text
text as
as children
children of
of other
other Component,
Component, we
we introduce
introduce `<T
`<T />`
/>` Component
Component which
which behaves
behaves exactly
exactly like
like `i18next.TranslationFunction`.
`i18next.TranslationFunction`. To
To get
get translated
translated string
string for
for the
the given
given key
key you
you need
need to
to use
use `id`
`id` prop
prop instead
instead of
of `key`
`key` as
as it
it is
is reserved
reserved keyword
keyword in
in `jsx`




<T id="home.title"
id="home.title" />



// <h1>Home
<h1>Home Page<h1>



Other [translationFunction
[translationFunction options](https://www.i18next.com/translation-function/essentials#overview-options)
options](https://www.i18next.com/translation-function/essentials#overview-options) are
are accepted
accepted in
in an
an unchanged
unchanged form,
form, for
for example,
example, to
to pass



// product.productsLeftInStock_plural
product.productsLeftInStock_plural =
= "{{product}}
"{{product}} has
has {{count}}
{{count}} products
products left
left in
in stock"
stock" */



<T id="product.productsLeftInStock"
id="product.productsLeftInStock" product="Zoe
product="Zoe Tank"
Tank" count={3}
count={3} />



// ->
-> <span>Zoe
<span>Zoe Tank
Tank has
has 3
3 products
products left
left in
in stock<span>



### Conventions


Some React
React Components
Components implement
implement handy
handy conventions
conventions to
to makes
makes translations
translations easier.
easier. They
They also
also improve
improve the
the shape
shape of
of translation
translation resource
resource files
files as
as it
it imposes
imposes a
a certain
certain way
way of
of organization.
organization. But
But please
please bear
bear in
in mind
mind that
that none
none of
of them
them are
are required
required and
and there
there is
is no
no need
need to
to follow
follow them.


#### Forms


`FormFields` can
can use
use its
its `name`
`name` attribute
attribute to
to build
build translation
translation key
key for
for its
its label
label or
or placeholder
placeholder based
based on
on translation
translation context
context set
set via
via `i18nId`
`i18nId` property
property on
on `Form`
`Form` component.
component. The
The rules
rules are:


- `FormField`
`FormField` label
label -
- `[Form.i18nId].[FormField.name]FieldLabel`

- `FormField`
`FormField` placeholder
placeholder -
- `[Form.i18nId].[FormField.name]FieldPlaceholder`


In the
the following
following example,
example, email
email `FormField`
`FormField` will
will have
have an
an automatically
automatically translated
translated label
label if
if a
a translation
translation for
for the
the `signIn.emailFieldLabel`
`signIn.emailFieldLabel` key
key (and
(and placeholder,
placeholder, when
when `signIn.emailFieldPlaceholder`)
`signIn.emailFieldPlaceholder`) will
will be
be found.



import {
{ FormField,
FormField, Form
Form }
} from
from "@deity/falcon-ecommerce-uikit";


() =>
=> (

<Form i18nId="signIn">

<FormField name="email"
name="email" type="email"
type="email" required
required autoComplete="email"
autoComplete="email" />

// ...





Above rules
rules would
would be
be overwritten
overwritten by
by usage
usage of
of regular
regular `label`
`label` or
or `placeholder`
`placeholder` attributes
attributes of
of `FormField`
`FormField` component.


## Using
Using default
default resources


Default resources
resources (if
(if configured)
configured) will
will be
be merged
merged with
with your
your custom
custom translations
translations from
from `./i18n`
`./i18n` directory.


To use
use default
default resources
resources you
you need
need to
to install
install `@deity/falcon-i18n`
`@deity/falcon-i18n` npm
npm module
module (or
(or any
any other
other compatible)
compatible) which
which contains
contains default
default translations



npm install
install --save
--save @deity/falcon-i18n



Then in
in `falcon-client.build.config.js`
`falcon-client.build.config.js` file
file you
you need
need to
to update
update `i18n`
`i18n` configuration.
configuration. Add
Add `@deity/falcon-i18n`
`@deity/falcon-i18n` package
package name
name into
into `resourcePackages`
`resourcePackages` array.


Imported package
package (like
(like `@deity/falcon-i18n`)
`@deity/falcon-i18n`) can
can contain
contain more
more languages
languages and/or
and/or namespaces
namespaces than
than you
you are
are interested
interested in.
in. So
So if
if you
you don't
don't want
want to
to use
use all
all of
of them
them (to
(to save
save bundle
bundle size,
size, or
or just
just not
not to
to use
use some
some namespace
namespace as
as it's
it's not
not relevant
relevant to
to your
your project)
project) you
you can
can filter
filter them
them out
out by
by using
using `filter`
`filter` option
option -
- that
that will
will instruct
instruct webpack
webpack to
to skip
skip items
items not
not listed
listed in
in the
the `filter`
`filter` property.



module.exports =
= {

i18n: {

resourcePackages: ["@deity/falcon-i18n"],

filter: {

lng: ["en"],

ns: ["translations"]






Above example
example configuration
configuration will
will deliver
deliver to
to your
your project
project default
default `translations`
`translations` namespace
namespace from
from English
English language.


### Options


- `mainSource:
`mainSource: string`
string` -
- relative
relative path
path to
to your
your custom
custom i18n
i18n resources
resources which
which should
should extend
extend defaults

- `defaultSources:
`defaultSources: string[]`
string[]` -
- array
array of
of absolute
absolute paths
paths to
to resources
resources which
which should
should be
be merged
merged to
to your
your custom
custom i18n
i18n resources

- `output:
`output: string`
string` -
- relative
relative path
path to
to output
output directory

- `filter.lng:
`filter.lng: string[]`
string[]` -
- array
array of
of language
language codes
codes to
to filter
filter `defaultSources`
`defaultSources` directories,
directories, if
if any,
any, then
then only
only matching
matching will
will be
be returned,
returned, otherwise
otherwise all
all of
of them

- `filter.ns:
`filter.ns: string[]`
string[]` -
- array
array of
of namespace
namespace codes
codes to
to filter
filter `defaultSources`
`defaultSources` directories,
directories, if
if any,
any, then
then only
only matching
matching will
will be
be returned,
returned, otherwise
otherwise all
all of
of them


All paths
paths should
should point
point to
to directories
directories with
with file
file structure
structure compatible
compatible with
with `{{lng}}/{{ns}}.json`
`{{lng}}/{{ns}}.json` pattern,
pattern, e.g:











id: menu-navbar

title: Menu
Menu Navbar
Navbar with
with depth

sidebar_label: Menu
Menu Navbar



By default
default the
the MenuNavbar
MenuNavbar renders
renders up
up to
to 3
3 layers
layers of
of navigation
navigation levels
levels items
items who
who could
could be
be styled
styled trough
trough overriding
overriding styles.


:::note Required
Required dependencies

#### Client

- `@deity/falcon-ui-kit@v2.7.22`
 
#### Server

- demo-v1
demo-v1 -
- `@deity/falcon-magento2-api@v2.7.22`

- demo-v2
demo-v2 -
- `@deity/falcon-bigcommerce-api@v2.7.22`



## Example
Example simple
simple MenuNavbar

The most
most basic
basic implementation
implementation renders
renders the
the multi
multi level
level menu
menu on
on all
all devices.





import React
React from
from 'react';

import {
{ MenuQuery
MenuQuery }
} from
from '@deity/falcon-shop-data';

import {
{ MenuNavbar
MenuNavbar }
} from
from '@deity/falcon-ui-kit';


export const
const MenuNavBar
MenuNavBar =
= ()
() =>
=> {

return (


{({ data:
data: {
{ menu
menu }
} })
}) =>

<MenuNavbar items={menu}
items={menu} />







## Exemple
Exemple of
of navbar
navbar with
with sidebar
sidebar support
support for
for mobile
mobile (demo-v2)

You have
have full
full control
control how
how to
to deal
deal with
with the
the navigation
navigation menu
menu on
on different
different devices.
devices. To
To only
only show
show the
the `MenuNavbar`
`MenuNavbar` on
on larger
larger screens
screens dispay
dispay atributes
atributes could
could be
be used
used as
as follow.




import React
React from
from 'react';

import {
{ MenuQuery
MenuQuery }
} from
from '@deity/falcon-shop-data';

import {
{ Button,
Button, Box,
Box, Text,
Text, Icon
Icon }
} from
from '@deity/falcon-ui';

import {
{ MenuNavbar
MenuNavbar }
} from
from '@deity/falcon-ui-kit';

import {
{ useSidebarContainer
useSidebarContainer }
} from
from '@deity/falcon-front-kit';

import {
{ T,
T, useI18n
useI18n }
} from
from '@deity/falcon-i18n';

import {
{ SIDEBAR_TYPE
SIDEBAR_TYPE }
} from
from 'src/components';

import {
{ WideWrapper
WideWrapper }
} from
from '../WideWrapper';


export const
const MenuNavBar
MenuNavBar =
= ()
() =>
=> {

const {
{ t
t }
} =
= useI18n();

const sidebar
sidebar =
= useSidebarContainer();


return (


// Don't
Don't render
render navbar
navbar on
on small
small screen,
screen, but
but show
show toggle
toggle button
button that

// triggers
triggers sidebar
sidebar navigation




onClick={() =>
=> sidebar.open(SIDEBAR_TYPE.menu,
sidebar.open(SIDEBAR_TYPE.menu, undefined,
undefined, 'left')}


<Icon src="menu"/>

<Text><T id="navbar.openMobile"
id="navbar.openMobile" /></Text>


      
// Only
Only display
display MenuNavbar
MenuNavbar on
on medium
medium screens

<Box display={{
display={{ xs:
xs: 'none',
'none', md:
md: 'block'
'block' }}>

<MenuQuery>{({ data:
data: {
{ menu
menu }
} })
}) =>
=> <MenuNavbar
<MenuNavbar items={menu}
items={menu} />}</MenuQuery>







## Customize
Customize MenuNavbar
MenuNavbar styling

Trough the
the theme
theme object
object styling
styling can
can be
be overridden
overridden a
a follow;



export const
const falconTheme
falconTheme =
= createTheme({

navbarItem: {

css: {

'> .themed-link':
.themed-link': {

// Add
Add underline
underline link
link in
in navbar

textDecoration: 'underline',


'.themed-list-item >
> .themed-link':
.themed-link': {

// Remove
Remove underline
underline of
of second
second child
child layer
layer and
and change
change color

textDecoration: 'none',








id: storefront

title: Storefront

hide_title: true



import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Badge
Badge from
from '@site/src/components/Badge';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';



<h1 className="headline
className="headline mb20">Focus
mb20">Focus on
on customer
customer experience
experience to
to exceed
exceed expectations</h1>

<p className="desc">Deity
className="desc">Deity commerce
commerce platform
platform comes
comes with
with highly
highly engaging
engaging PWA
PWA and
and native
native storefronts
storefronts to
to deliver
deliver excellent
excellent experiences
experiences your
your customers
customers expect.</p>


### Don't
Don't have
have an
an account
account yet?

<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

Sign up
up for
for an
an account
account &nbsp;

<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>



<div className="mb60"></div>




## Start
Start Right
Right Away

<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/storefront/key-concepts">

<img src="/img/icons/info.svg"
src="/img/icons/info.svg" />

<h4>Key concepts</h4>

<p>Storefront serves
serves as
as your
your PWA
PWA theme
theme and
and more.</p>


<Card to="/storefront/getting-started">

<img src="/img/icons/lightning.svg"
src="/img/icons/lightning.svg" />

<h4>Getting started</h4>

<p>Storefront is
is included
included in
in the
the Deity
Deity Platform.</p>


<Card to="/platform/support/tutorials">

<img src="/img/icons/lightbulb.svg"
src="/img/icons/lightbulb.svg" />


<p>Learn by
by doing
doing by
by following
following practical
practical tutorials.</p>






## Learn
Learn the
the Basics

<h3 className="mt0">Creating
className="mt0">Creating themes
themes <Button
<Button variant="outline"
variant="outline" size="medium"
size="medium" href="/storefront/building-experiences">View
href="/storefront/building-experiences">View all
all →</Button></h3>


<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/storefront/theming/overview">

<img src="/img/icons/shop.svg"
src="/img/icons/shop.svg" />




        



<Card variant="horizontal"
variant="horizontal" to="/storefront/theming/css-mapping">

<img src="/img/icons/css.svg"
src="/img/icons/css.svg" />


<h5>CSS Mapping</h5>


        




<div className="flex
className="flex brighten
brighten mb60">

<Card variant="horizontal"
variant="horizontal" to="/storefront/theming/components">

<img src="/img/icons/tabs.svg"
src="/img/icons/tabs.svg" />


<h5>Themed Components</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/storefront/theming/fonts">

<img src="/img/icons/textt.svg"
src="/img/icons/textt.svg" />


<h5>Custom Fonts</h5>


        





<h3 className="mt0">Building
className="mt0">Building experiences
experiences <Button
<Button variant="outline"
variant="outline" size="medium"
size="medium" href="/storefront/theming">View
href="/storefront/theming">View all
all →</Button></h3>


<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/storefront/menu-navbar">

<img src="/img/icons/treestructure.svg"
src="/img/icons/treestructure.svg" />


<h5>Menu Navbar</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/storefront/overrides">

<img src="/img/icons/swap.svg"
src="/img/icons/swap.svg" />


<h5>Overriding Components</h5>


        




<div className="flex
className="flex brighten
brighten mb100">

<Card variant="horizontal"
variant="horizontal" to="/storefront/routing">

<img src="/img/icons/navigation.svg"
src="/img/icons/navigation.svg" />




        



<Card variant="horizontal"
variant="horizontal" to="/storefront/meta-data">

<img src="/img/icons/code.svg"
src="/img/icons/code.svg" />


<h5>Meta Data</h5>


        





## Advanced
Advanced Features

<div className="negative-view-all"><Button
className="negative-view-all"><Button variant="outline"
variant="outline" size="medium"
size="medium" href="/storefront/advanced">View
href="/storefront/advanced">View all
all →</Button></div>


<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/storefront/data">

<img src="/img/icons/data.svg"
src="/img/icons/data.svg" />


<h5>Data Management</h5>


This page
page covers
covers how
how to
to query
query and
and update
update data.




<Card variant="horizontal"
variant="horizontal" to="/storefront/state">

<img src="/img/icons/cylinder.svg"
src="/img/icons/cylinder.svg" />


<h5>Local State
State Management</h5>


This page
page covers
covers how
how to
to manage
manage your
your local
local (client-side)
(client-side) state.





<div className="flex
className="flex mb100
mb100 brighten">

<Card variant="horizontal"
variant="horizontal" to="/storefront/translations">

<img src="/img/icons/translate.svg"
src="/img/icons/translate.svg" />


<h5>Internationalization &
& Translations</h5>


Internationalization is
is based
based on
on i18next.




<Card variant="horizontal"
variant="horizontal" to="/storefront/code-splitting">

<img src="/img/icons/filejs.svg"
src="/img/icons/filejs.svg" />


<h5>Code Splitting</h5>


This feature
feature splits
splits your
your code
code into
into various
various bundles
bundles which
which are
are loaded
loaded on
on demand.








id: key-concepts

title: Key
Key Concepts

sidebar_label: Key
Key Concepts

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


:::note Composer
Composer version
version 3

If you
you have
have existing
existing project
project based
based on
on Falcon
Falcon Platform
Platform v2.x
v2.x please
please [contact
[contact us
us for
for the
the migration
migration guide](../platform/support/contact)



_(todo: This
This page
page needs
needs more
more general,
general, high
high level
level information
information about
about Falcon
Falcon Server)_


## Falcon
Falcon Server
Server 3


The focus
focus for
for Falcon
Falcon Server
Server 3
3 is
is to
to provide
provide much
much better
better internal
internal structure
structure which
which leads
leads to
to much
much more
more possibilities
possibilities when
when it
it comes
comes to
to extending
extending entire
entire platform.


In order
order to
to do
do so
so we
we have
have implemented
implemented inversion
inversion of
of control
control pattern
pattern based
based on
on [InversifyJS](https://github.com/inversify/InversifyJS).
[InversifyJS](https://github.com/inversify/InversifyJS). Thanks
Thanks to
to this
this developers
developers have
have much
much more
more control
control over
over the
the way
way how
how extensions
extensions are
are loaded,
loaded, initialized
initialized and
and managed
managed during
during request
request processing.


Additionally, all
all the
the subsystems
subsystems ([Event
([Event Handlers](./modules/common-services/event-handlers.md),
Handlers](./modules/common-services/event-handlers.md), [Data
[Data Sources](./modules/common-services/data-sources.md),
Sources](./modules/common-services/data-sources.md), [Rest
[Rest Endpoints](./modules/common-services/rest-endpoints.md))
Endpoints](./modules/common-services/rest-endpoints.md)) of
of Falcon
Falcon Server
Server now
now use
use the
the same
same mechanism
mechanism and
and can
can be
be registered
registered in
in the
the same
same way.


See [Modules](./modules/about.md)
[Modules](./modules/about.md) section
section for
for more
more information.


id: composer

title: Composer


import Badge
Badge from
from '@site/src/components/Badge';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem,
TabItem, ChangelogItem
ChangelogItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';


# Deity
Deity Composer


<p className="desc">Learn
className="desc">Learn about
about the
the latest
latest and
and previous
previous releases
releases of
of Deity
Deity Composer.</p>


<div className="hr"
className="hr" />

<div className="date">November
className="date">November 20th,
20th, 2022</div>


## Deity
Deity Composer
Composer v2.41
v2.41 <Badge
<Badge variant="green">Stable</Badge>


<TabsContainer packageName="@deity/deity-composer">





{ label:
label: 'Updates',
'Updates', value:
value: 'updates'
'updates' },

{ label:
label: 'Packages',
'Packages', value:
value: 'packages'
'packages' }



<TabItem value="updates">

<ChangelogItem variant="breaking">Fixed
variant="breaking">Fixed several
several critical
critical bugs
bugs that
that caused
caused the
the app
app to
to crash</ChangelogItem>

<ChangelogItem variant="hotfix">Improved
variant="hotfix">Improved security
security by
by implementing
implementing two-factor
two-factor authentication</ChangelogItem>



description="Non facere
facere doloremque
doloremque est
est laudantium
laudantium Quis
Quis Ut
Ut illo
illo ut
ut consequatur
consequatur iste
iste et
et dolor
dolor nesciunt
nesciunt et
et perspiciatis
perspiciatis aperiam
aperiam sit
sit explicabo
explicabo vitae!
vitae! Complete
Complete overhaul
overhaul of
of the
the app's
app's design
design and
and user
user experience

Added new
new feature
feature Z,
Z, which
which allows
allows users
users to
to do
do XYZ

Improved security
security by
by implementing
implementing two-factor
two-factor authentication

Fixed several
several critical
critical bugs
bugs that
that caused
caused the
the app
app to
to crash"


Updated user
user interface
interface for
for a
a more
more modern
modern look


<ChangelogItem variant="feature"
variant="feature" description="Non
description="Non facere
facere doloremque
doloremque est
est laudantium
laudantium Quis
Quis Ut
Ut illo
illo ut
ut consequatur">

Added ability
ability to
to customize
customize the
the app's
app's interface


<ChangelogItem variant="improvement">Improved
variant="improvement">Improved performance
performance and
and reduced
reduced loading
loading times</ChangelogItem>

<ChangelogItem variant="improvement">Improved
variant="improvement">Improved performance
performance of
of feature
feature Y</ChangelogItem>

<ChangelogItem variant="bugfix">Added
variant="bugfix">Added a
a method
method for
for getting
getting the
the current
current branch.</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed bug
bug that
that caused
caused login
login issues
issues for
for some
some users</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed several
several minor
minor bugs
bugs and
and improved
improved overall
overall stability
stability of
of the
the app</ChangelogItem>

<ChangelogItem variant="deprecated">changed
variant="deprecated">changed the
the version
version number</ChangelogItem>


<TabItem value="packages">

<CodeBlock language="json">

{`"devDependencies": {

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"






<hr />

<div className="date">November
className="date">November 19th,
19th, 2021</div>


## Deity
Deity Composer
Composer v2.40
v2.40 <Badge
<Badge variant="green">Stable</Badge>


<p className="desc">

This release
release brings
brings all
all kinds
kinds of
of exciting
exciting new
new features,
features, quality
quality of
of life
life and
and performance
performance improvements
improvements plus
plus a
a lot
lot of

bugfixes. Read
Read our
our blog
blog for
for a
a more
more detailed
detailed rundown.



<TabsContainer packageName="@deity/deity-composer">





{ label:
label: 'Updates',
'Updates', value:
value: 'updates'
'updates' },

{ label:
label: 'Packages',
'Packages', value:
value: 'packages'
'packages' }



<TabItem value="updates">

<ChangelogItem variant="bugfix">Added
variant="bugfix">Added a
a method
method for
for getting
getting the
the current
current branch.</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed bug
bug that
that caused
caused login
login issues
issues for
for some
some users</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed several
several minor
minor bugs
bugs and
and improved
improved overall
overall stability
stability of
of the
the app</ChangelogItem>

<ChangelogItem variant="deprecated">changed
variant="deprecated">changed the
the version
version number</ChangelogItem>


<TabItem value="packages">

<CodeBlock language="json">

{`"devDependencies": {

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"







id: geoip

title: GeoIP

sidebar_label: GeoIP



## Overview


All requests
requests the
the go
go through
through our
our cloud
cloud hosting
hosting a
a proxied
proxied by
by `nginx`.
 

We append
append headers
headers based
based on
on the
the GeoIP
GeoIP to
to these
these requests.










:::note Location
Location Accuracy

Currently we
we can
can only
only ensure
ensure the
the accuracy
accuracy of
of country
country data
data and
and not
not city,
city, postcode
postcode or
or region.
region. We
We recommend
recommend only
only using
using country.



## Accessing
Accessing GeoIP
GeoIP information
information in
in Falcon
Falcon Server
Server (Enterprise
(Enterprise Only)


We have
have api
api packages
packages available
available to
to get
get GeoIP
GeoIP Data
Data in
in the
the middleware.


If you're
you're an
an enterprise
enterprise customer
customer and
and you've
you've modified
modified your
your Falcon
Falcon Server
Server instance
instance you'll
you'll need
need to
to check
check the
the following:


**1. Adding
Adding our
our packages
packages as
as server
server dependencies**


Inside your
your `server`
`server` directory
directory run



yarn add
add @deity/falcon-geo-ip-api,

yarn add
add @deity/falcon-geo-location-extension,



**2. Adding
Adding the
the data
data source**


In your
your `server/config/default.json`
`server/config/default.json` add
add the
the following
following as
as a
a data
data source:




"apis": {

 
"geo-ip-api": {

"package": "@deity/falcon-geo-ip-api",

"config": {}







**3. Adding
Adding the
the extension**


In your
your `server/config/default.json`
`server/config/default.json` add
add the
the following
following as
as an
an extension:




"extensions": {


"geo-location": {

"package": "@deity/falcon-geo-location-extension",

"config": {

"api": "geo-ip-api"






## Accessing
Accessing GeoIP
GeoIP information
information in
in Falcon
Falcon Client.


Geographic data
data is
is available
available to
to the
the entire
entire client
client app
app via
via a
a context
context provider.


The data
data provided
provided contains:


**name |
| object
object key**


- Country
Country code
code |
| `country`

- Region
Region |
| `region`

- City
City |
| `city`

- Post
Post Code
Code |
| `postCode`


Our `@deity/falcon-front-kit`
`@deity/falcon-front-kit` contains
contains a
a handy
handy component
component to
to access
access this
this information.



import {
{ GeoLocation
GeoLocation }
} from
from '@deity/falcon-front-kit'}



{data =>
=> {

const {
{ country,
country, region,
region, city,
city, postCode
postCode }
} =
= data;

return <p>Address
<p>Address data:
data: {city},
{city}, {region},
{region}, {postCode},
{postCode}, {country}</p>;





## Testing
Testing GeoIP
GeoIP locally


GeoIP data
data is
is added
added via
via our
our cloud
cloud platform
platform so
so is
is NOT
NOT available
available for
for local
local development.


If you
you want
want to
to access
access it
it locally
locally you
you have
have 2
2 options:


1. Connect
Connect to
to a
a cloud
cloud instance
instance of
of Falcon
Falcon Server
Server (this
(this is
is already
already the
the case
case for
for all
all non-enterprise
non-enterprise customers)


2. Fake
Fake the
the headers.
headers. This
This can
can easily
easily be
be done
done using
using a
a borwser
borwser extension
extension such
such as
as [bewisse](https://bewisse.com/modheader/help/).
[bewisse](https://bewisse.com/modheader/help/). The
The headers
headers are
are below
below and
and aren't
aren't case
case sensitive:










## Getting
Getting GeoIP
GeoIP information
information in
in your
your own
own API
API packages
packages (Enterprise
(Enterprise Only)


If you
you want
want to
to access
access the
the GeoIP
GeoIP headers
headers in
in your
your custom
custom data
data source
source you
you can
can get
get it
it from
from `context.koa.request`.




import {
{ ApiDataSource
ApiDataSource }
} from
from '@deity/falcon-server-env';

import type
type {
{ Request
Request }
} from
from 'koa';


export default
default class
class MyCustomAPI
MyCustomAPI extends
extends ApiDataSource
ApiDataSource {

async geoLocation(obj,
geoLocation(obj, params,
params, context)
context) {

return this.getLocationFromRequest(context.koa.request);



async getLocationFromRequest(request:
getLocationFromRequest(request: Request)
Request) {

return {

country: request.get('X-GeoIP-Country'),

region: request.get('X-GeoIP-Region-Name'),

city: request.get('X-GeoIP-City'),

postCode: request.get('X-GeoIP-Postal-Code')






id: mailer

title: Mail
Mail Component

sidebar_label: Mail
Mail Component


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


## Overview
 

Out of
of the
the box
box our
our middleware
middleware allows
allows emails
emails to
to be
be sent
sent easily
easily using
using our
our `@deity/falcon-mailer`
`@deity/falcon-mailer` package.
package. Under
Under the
the hood
hood this
this uses
uses [Node
[Node Mailer](https://nodemailer.com/about/).


## Configuration


:::note Each
Each mail
mail service
service is
is different

Depending on
on the
the service
service you're
you're using
using your
your **smtp**
**smtp** config
config might
might vary.
vary. Please
Please refer
refer to
to the
the [nodemailer
[nodemailer docs](https://nodemailer.com/smtp/).
docs](https://nodemailer.com/smtp/). We
We pass
pass the
the config
config object
object as
as is.



To configure
configure our
our mailer
mailer component
component add
add it
it to
to your
your `server`
`server` config
config as
as a
a component.
component. This
This config
config might
might vary
vary depending
depending on
on your
your setup.




"components": {

"mailer": {

"package": "@deity/falcon-mailer",

"config": {

"transport": {

"service": "[MAILER_SERVICE]",

"auth": {

"user": "[MAILER_USER]",

"pass": "[MAILER_PASSWORD]"



"send": {

"from": "[MAILER_FROM_ADDRESS]"








- `MAILER_SERVICE`
`MAILER_SERVICE` -
- this
this is
is the
the service
service you'd
you'd like
like to
to use.
use. See
See a
a list
list of
of [supported
[supported values
values here](https://nodemailer.com/smtp/well-known/).

- `MAILER_USER`
`MAILER_USER` -
- the
the username
username for
for the
the service
service above

- `MAILER_PASSWORD`
`MAILER_PASSWORD` -
- the
the password
password for
for the
the service
service above

- `MAILER_FROM_ADDRESS`
`MAILER_FROM_ADDRESS` -
- the
the from
from address,
address, e.g
e.g `Falcon
`Falcon Shop
Shop <deity.falcon.mailer@gmail.io>`


## Usage


Out of
of the
the box
box we
we use
use the
the mailer
mailer packages
packages `sendEmail`
`sendEmail` method
method to
to handle
handle password
password reset
reset requests
requests when
when the
the integrated
integrated shop
shop doesn't
doesn't offer
offer this
this functionality
functionality out
out of
of the
the box.

For now
now this
this only
only includes
includes **BigCommerce**
**BigCommerce** and
and **commercetools**
**commercetools** integrations.


### Loading
Loading the
the mailer
mailer component


You can
can easily
easily inject
inject the
the mailer
mailer component
component into
into your
your data
data source
source package
package by
by injecting
injecting it
it into
into the
the classes
classes constructor.




import {
{ injectable,
injectable, inject,
inject, optional
optional }
} from
from 'inversify';



export class
class YourCustomDataSource
YourCustomDataSource extends
extends FalconRESTDataSource
FalconRESTDataSource {



@inject('mailer') @optional()
@optional() protected
protected mailer:
mailer: any

) {







### Using
Using the
the mailer
mailer component


Once injected
injected you
you can
can easily
easily use
use the
the `sendEmail`
`sendEmail` method.










id: dynamic-routing

title: Dynamic
Dynamic Routing
Routing in
in Falcon
Falcon Server

sidebar_label: Dynamic
Dynamic Routing

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>



id: extending-falcon-server

title: Extending
Extending Falcon
Falcon Server

sidebar_label: Extending
Extending Falcon
Falcon Server

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


id: extending-composer

title: Extending
Extending Composer

sidebar_label: Extending
Extending Composer

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


Falcon-Server provides
provides its
its own
own base
base GraphQL
GraphQL Schema,
Schema, that
that defines
defines data
data types,
types, queries

and mutations,
mutations, so
so every
every Extension
Extension could
could use
use its
its types
types and
and extend
extend them.


Currently, Deity
Deity provides
provides the
the following
following list
list of
of officially
officially supported
supported extensions:


- [Shop
[Shop Extension](./shop-extension)

- [Blog
[Blog Extension](./blog-extension)

- [Search
[Search Extension](./search-extension)

- [GeoLocation
[GeoLocation Extension](./geolocation-extension)


Each of
of these
these can
can of
of course
course be
be extended
extended with
with custom
custom features
features that
that are
are specific
specific for
for particular
particular implementation.


## Extending
Extending GraphQL
GraphQL context
context with
with extension


Besides providing
providing schema
schema for
for GraphQL
GraphQL server,
server, extensions
extensions can
can also
also provide
provide function
function that
that modifies
modifies GraphQL
GraphQL execution
execution context
context which
which is
is available
available in
in resolvers.


To do
do so,
so, the
the extension
extension must
must return
return `context`
`context` property
property which
which is
is an
an object
object or
or function
function that
that creates
creates object.
object. That
That object
object will
will be
be merged
merged with
with default
default context
context values
values and
and context
context values
values returned
returned from
from other
other extensions.


This is
is ApolloServer's
ApolloServer's feature
feature exposed
exposed by
by Falcon
Falcon Server
Server and
and you
you can
can read
read more
more about
about it
it [here](https://www.apollographql.com/docs/apollo-server/data/resolvers/#the-context-argument)


Code snipped
snipped below
below shows
shows the
the basic
basic usage.



// example
example extension
extension that
that adds
adds "key":
"key": "value"
"value" pair
pair to
to the
the GraphQL
GraphQL context

module.exports =
= ()
() =>
=> ({

context: ({
({ ctx
ctx })
}) =>
=> {

return {

key: 'value'





// then
then in
in resolver's
resolver's code
code it
it will
will be
be available
available under
under context.key


someQueryResolver: (obj,
(obj, input,
input, context,
context, info)
info) {

console.log('Key value:',
value:', context.key);






Internally for
for example
example [Falcon
[Falcon GeoLocation
GeoLocation Extension](./geolocation-extension)
Extension](./geolocation-extension) uses
uses that
that mechanism
mechanism to
to inject
inject geo
geo location
location data
data to
to each
each request's
request's context.



<!-- ** configurationconfiguration -- ThereThere areare somesome exceptionsexceptions toto thisthis e.g.e.g. searchsearch modulesmodules shouldshould bebe configuredconfigured last.last. -->
id: dynamic-routes

title: Dynamic
Dynamic Route
Route Resolver

sidebar_label: Dynamic
Dynamic Route
Route Resolver

enterprise_only: true



`DynamicRouteResolver` handles
handles dynamic
dynamic route
route resolution
resolution for
for the
the client
client application.

When a
a user
user goes
goes to
to a
a page
page that
that is
is not
not defined
defined in
in React
React routing
routing -
- then
then the
the client
client will
will ask
ask the
the back-end
back-end for
for the
the type
type of
of content
content for
for that
that particular
particular url:


- It
It asks
asks every
every extension
extension to
to get
get "fetch
"fetch URL
URL priority"
priority" from
from the
the assigned
assigned API
API DataSource
DataSource instance

- It
It sorts
sorts API
API DataSource
DataSource instances
instances that
that are
are able
able to
to determine
determine dynamic
dynamic content
content type
type by
by their
their "priority"

- It
It calls
calls `fetchUrl`
`fetchUrl` method
method on
on every
every available
available API
API DataSource
DataSource until
until it
it gets
gets a
a proper
proper response


## Example


The simplest
simplest example
example is
is handling
handling content
content from
from shop
shop and
and blog.
blog. Let's
Let's say
say we
we want
want to
to resolve
resolve content
content for
for `/sport.html`



class Magento2Api
Magento2Api {

getFetchUrlPriority(url) {

// if
if url
url ends
ends with
with .html
.html then
then it's
it's highly
highly possible
possible that
that it
it should
should be
be handed
handed by
by shop

// because
because it
it might
might be
be a
a product
product page
page under
under url
url generated
generated by
by Magento

return url.endsWith('.html')
url.endsWith('.html') ?
? ApiUrlPriority.HIGH
ApiUrlPriority.HIGH :
: ApiUrlPriority.NORMAL;



fetchUrl(obj, args,
args, context,
context, info)
info) {

// implementation
implementation of
of the
the resolver






class WordpressApi
WordpressApi {

getFetchUrlPriority(url) {

// return
return just
just static
static value
value so
so others
others can
can be
be higher
higher or
or lower

return ApiUrlPriority.NORMAL;



fetchUrl(obj, args,
args, context,
context, info)
info) {

// implementation
implementation of
of the
the resolver





`DynamicRouteResolver` will
will try
try to
to call
call `getFetchUrlPriority(url)`
`getFetchUrlPriority(url)` method
method for
for both
both extensions:


- ShopExtension/Magento2Api
ShopExtension/Magento2Api will
will return
return `ApiUrlPriority.HIGH`

- BlogExtension/WordpressApi
BlogExtension/WordpressApi will
will return
return `ApiUrlPriority.NORMAL`


So in
in that
that case
case `DynamicRouteResolver`
`DynamicRouteResolver` will
will call
call `ShopExtension.fetchUrl()`
`ShopExtension.fetchUrl()` first,
first, if
if that
that call
call returns
returns `null`,

it will
will call
call `BlogExtension.fetchUrl()`
`BlogExtension.fetchUrl()` second.


By **default**
**default** the
the API
API priority
priority order
order is
is the
the order
order they
they are
are added
added in
in your
your `server/config/default.json`
`server/config/default.json` file.
file. With
With the
the first
first API
API being
being checked
checked first.
first. If
If the
the priorities
priorities are
are the
the same
same this
this order
order will
will be
be used.


We provide
provide these
these orders:




export enum
enum ApiUrlPriority
ApiUrlPriority {

HIGHEST =
= 1,

HIGH =
= 2,

NORMAL =
= 3,

LOW =
= 4,

LOWEST =
= 5,

OFF =
= 0




## DynamicRouteResolver
DynamicRouteResolver result
result structure


The correct
correct response
response must
must match
match the
the following
following structure:




"id": 1,

"path": "/foo.html",

"type": "foo-type",

"redirect": false




- `id`
`id` -
- must
must represent
represent a
a unique
unique ID
ID for
for your
your back-end

- `path`
`path` -
- must
must represent
represent a
a canonical
canonical path
path for
for your
your entity
entity (this
(this will
will be
be used
used for
for a
a possible
possible redirection
redirection situation)

- `type`
`type` -
- must
must represent
represent a
a unique
unique entity
entity type
type that
that will
will be
be later
later used
used by
by `DynamicRoute`
`DynamicRoute` component
component on
on `falcon-client`

- `redirect`
`redirect` -
- must
must set
set a
a flag
flag whether
whether the
the given
given URL
URL must
must be
be redirected
redirected to
to the
the `path`
`path` address
address (to
(to ensure
ensure canonical
canonical URL)


## Requirements


If any
any extension
extension should
should handle
handle dynamic
dynamic routing
routing it
it should
should implement
implement both
both methods:


- `getFetchUrlPriority(url)`
`getFetchUrlPriority(url)` -
- accepts
accepts url
url (`string`)
(`string`) that
that should
should be
be resolved
resolved and
and returns
returns the
the priority
priority (`number`)
(`number`) for
for the
the extension

- `fetchUrl(obj,
`fetchUrl(obj, args,
args, context,
context, info)`
info)` -
- fetches
fetches the
the data
data from
from the
the remote
remote source
source or
or performs
performs any
any other
other async
async logic
logic to
to determine

the type
type of
of the
the given
given url
url and
and returns
returns a
a correct
correct result
result or
or `null`
`null` (if
(if the
the given
given URL
URL is
is not
not determined
determined by
by your
your back-end)


id: event-hooks

title: Event
Event Hooks

sidebar_label: Event
Event Hooks

enterprise_only: true



## Overview


Falcon Server
Server emits
emits several
several event
event hooks
hooks that
that can
can be
be used
used to
to add
add your
your own
own custom
custom code.


We use
use [this
[this package](https://www.npmjs.com/package/eventemitter2)
package](https://www.npmjs.com/package/eventemitter2) as
as a
a base
base for
for our
our events.


## Available
Available Events



export enum
enum Events
Events {

ERROR =
= 'falcon-server.error',


BEFORE_INITIALIZED =
= 'falcon-server.before-initialized',

AFTER_INITIALIZED =
= 'falcon-server.after-initialized',


BEFORE_STARTED =
= 'falcon-server.before-started',

AFTER_STARTED =
= 'falcon-server.after-started',


CACHE_TAG_INVALIDATE =
= 'falcon-server.cache.invalidate-tag',


BEFORE_WEB_SERVER_CREATED =
= 'falcon-server.before-web-server-created',

AFTER_WEB_SERVER_CREATED =
= 'falcon-server.after-web-server-created',


BEFORE_WEB_SERVER_REQUEST =
= 'falcon-server.before-web-server-request',

AFTER_WEB_SERVER_REQUEST =
= 'falcon-server.after-web-server-request',


BEFORE_API_CONTAINER_CREATED =
= 'falcon-server.before-api-container-created',

AFTER_API_CONTAINER_CREATED =
= 'falcon-server.after-api-container-created',


BEFORE_EXTENSION_CONTAINER_CREATED =
= 'falcon-server.before-extension-container-created',

AFTER_EXTENSION_CONTAINER_CREATED =
= 'falcon-server.after-extension-container-created',


BEFORE_COMPONENTS_REGISTERED =
= 'falcon-server.before-components-registered',

AFTER_COMPONENTS_REGISTERED =
= 'falcon-server.after-components-registered',


BEFORE_APOLLO_SERVER_CREATED =
= 'falcon-server.before-apollo-server-created',

AFTER_APOLLO_SERVER_CREATED =
= 'falcon-server.after-apollo-server-created',


BEFORE_ENDPOINTS_REGISTERED =
= 'falcon-server.before-endpoints-registered',

AFTER_ENDPOINTS_REGISTERED =
= 'falcon-server.after-endpoints-registered',


API_DATA_SOURCE_REGISTERED =
= 'falcon-server.api-data-source-registered',

EXTENSION_REGISTERED =
= 'falcon-server.extension-registered'




## How
How it
it works


To use
use one
one of
of these
these events
events you'll
you'll need
need to
to first
first import
import `Events`
`Events` enum
enum from
from `'@deity/falcon-server-env'`.


You can
can then
then use
use `eventEmitter`
`eventEmitter` to
to intercept
intercept these
these events.


`eventEmitter` is
is a
a public
public prop
prop for
for the
the `FalconServer`
`FalconServer` class
class and
and is
is passed
passed to
to our
our API
API data
data source
source and
and endpoint
endpoint packages.



## Usage


### Watching
Watching an
an event





const {
{ Events
Events }
} =
= require('@deity/falcon-server-env');




const server
server =
= new
new FalconServer(config);


server.eventEmitter.on(Events.ERROR, async
async data
data =>
=> {

// ERROR
ERROR code
code here



server.eventEmitter.on(Events.AFTER_INITIALIZED, async
async data
data =>
=> {

// AFTER_INITIALIZED
AFTER_INITIALIZED code
code here






### Emitting
Emitting an
an event


Due to
to the
the way
way API
API data
data sources
sources are
are initiated
initiated we
we don't
don't advise
advise watching
watching for
for events
events in
in them.


You can
can however
however `emit`
`emit` a
a new
new or
or existing
existing event.


**API data
data source
source package**


const {
{ Events
Events }
} =
= require('@deity/falcon-server-env');


export default
default class
class YourClass
YourClass extends
extends ApiDataSource
ApiDataSource {

  
yourMethod() {

// New
New event

this.eventEmitter.emit('event.name', value1,
value1, value2);


// Existing
Existing event

this.eventEmitter.emit(Events.ERROR, value1,
value1, value2);






### Emitting
Emitting Errors


Errors in
in our
our API
API data
data source
source packages
packages automatically
automatically `emit`
`emit` the
the `Events.ERROR`
`Events.ERROR` event
event so
so you
you can
can latch
latch onto
onto this
this in
in `server/index.js`
`server/index.js` if
if you
you want
want to
to log
log your
your errors
errors using
using a
a 3rd
3rd party
party service.
 

id: extension-scopes

title: Extension
Extension Scopes
Scopes in
in Falcon
Falcon Server

sidebar_label: Extension
Extension Scopes

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


id: redirects

title: Redirects

sidebar_label: Redirects



## Overview


Redirects can
can be
be added
added in
in 2
2 ways.
ways. Either
Either in
in a
a flat
flat file
file (you'll
(you'll need
need Falcon
Falcon Server
Server access
access for
for this),
this), or,
or, they
they can
can come
come from
from your
your shops
shops API
API package.


- [Flat
[Flat Redirects](#flat-redirects-enterprise-only)

- [Shop
[Shop API
API Redirects](#shop-api-redirects)

- [Implementation](#implementation)



## Flat
Flat redirects
redirects (Enterprise
(Enterprise Only)


To add
add flat
flat redirects
redirects you
you must
must first
first create
create a
a `server/config/redirects.txt`
`server/config/redirects.txt` file.
file. You
You can
can then
then add
add your
your redirects
redirects there.
there. All
All redirects
redirects added
added to
to this
this file
file are
are treated
treated as
as `301`.


This file
file path
path can
can be
be configured
configured in
in your
your `server/config`
`server/config` files.
files. The
The config
config variable
variable is
is `redirectFile`





"redirectFile": "config/redirects.txt"
"config/redirects.txt" //
// default
default file
file path




### 1
1 to
to 1
1 redirect


The format
format of
of this
this file
file should
should have
have each
each redirect
redirect on
on a
a new
new line
line with
with the
the orgin
orgin and
and destination
destination seperated
seperated by
by a
a space.



origin destination






/product-1 /product-2



In this
this example
example the
the url
url `/product-1`
`/product-1` will
will 301
301 redirect
redirect to
to `/product-2`


### Regex
Regex support


We also
also support
support regex.
regex. Any
Any entry
entry prefixed
prefixed with
with `@`
`@` is
is considered
considered regex.





@\/product-1$ /product-2



In this
this example
example any
any url
url that
that ends
ends in
in `/product-1`
`/product-1` will
will be
be redirected
redirected to
to `/product-2`



### Query
Query string
string support


If you
you want
want to
to pass
pass query
query parameters
parameters accross
accross that
that is
is also
also possible
possible by
by assigning
assigning them
them to
to a
a variable
variable using
using `(.*)$`.


Each time
time you
you use
use the
the string
string `(.*)$`
`(.*)$` it
it is
is passed
passed as
as a
a variable
variable in
in numberical
numberical order
order to
to `$1`
`$1` and
and then
then `$2`
`$2` and
and so
so on.





@\/product-1(\?.*)?$ /product-2$1



In this
this example
example everything
everything after
after `product-1`
`product-1` is
is saved
saved as
as `$1`
`$1` and
and passed
passed to
to the
the end
end of
of the
the destination.
destination. e.g.
e.g. `https://deity.com/product-1?id=1&project=2`
`https://deity.com/product-1?id=1&project=2` =>
=> `https://deity.com/product-2?id=1&project=2`


**example 2**



@^(.*)\/product-1(.*)$ $1/product-2$2



In this
this example
example everything
everything before
before `product-1`
`product-1` is
is set
set to
to `$1`
`$1` and
and everything
everything after
after is
is set
set to
to `$2`.
`$2`. e.g.
e.g. `https://deity.com/products/product-1?id=1&project=2`
`https://deity.com/products/product-1?id=1&project=2` =>
=> `https://deity.com/products/product-2?id=1&project=2`



## Shop
Shop API
API redirects


Redirect support
support is
is directly
directly injected
injected into
into your
your shops
shops `fetchUrl()`
`fetchUrl()` method.
 

We check
check for
for URL
URL matches,
matches, if
if none
none are
are returned
returned we
we then
then query
query the
the shops
shops redirect
redirect API.
API. If
If a
a match
match is
is found
found we
we return
return an
an object:




path, //
// the
the location
location to
to be
be redirected

status //
// the
the type
type of
of redirect
redirect e.g.
e.g. 301,
301, 302,
302, 404




## Implementation


To get
get redirects
redirects to
to work
work you'll
you'll need
need to
to make
make sure
sure you
you have
have a
a `DynamicRedirect`
`DynamicRedirect` component
component in
in your
your route
route `App.js`.


This uses
uses `react-router-dom`
`react-router-dom` to
to handle
handle the
the redirect.




import React
React from
from 'react';

import {
{ Redirect
Redirect }
} from
from 'react-router-dom';


export const
const DynamicRedirect
DynamicRedirect =
= ({
({ match,
match, location,
location, staticContext
staticContext })
}) =>
=> {

const {
{ path,
path, status
status =
= 301
301 }
} =
= match.params;

if (staticContext)
(staticContext) {

staticContext.status =
= status;


return <Redirect
<Redirect from={location.pathname}
from={location.pathname} to={path}
to={path} />;







import {
{ ...,
..., DynamicRedirect
DynamicRedirect }
} from
from './components';


const App
App =
= ()
() =>
=> (


<SwitchDynamicURL onLoading={({
onLoading={({ component
component })
}) =>
=> <LoaderWrapper>{component}</LoaderWrapper>}>


<Route exact
exact type="redirect"
type="redirect" component={DynamicRedirect}
component={DynamicRedirect} />

<Route component={NotFound}
component={NotFound} />





n.b. the
the `DynamicRedirect`
`DynamicRedirect` should
should be
be passed
passed to
to the
the second
second to
to last
last `Route`
`Route` component
component to
to allow
allow the
the other
other routes
routes to
to be
be rendered
rendered with
with a
a higher
higher priority.


**server/config/redirects.txt (for
(for flat
flat redirects)**


/contact/ /contact-us/

/old-product/ /new-product/

/old-page/ /



id: adyen

title: Adyen
Adyen Integration

sidebar_label: Adyen




id: algolia

title: Algolia
Algolia Integration

sidebar_label: Algolia





<a href="https://www.algolia.com/"
href="https://www.algolia.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Algolia
Algolia site">

<img src="/img/docs/platform/algolia-logo.svg"
src="/img/docs/platform/algolia-logo.svg" alt="Algolia
alt="Algolia Logo"
Logo" width="200"/>





## Overview


Our Algolia
Algolia extension
extension is
is used
used for
for search
search and
and comes
comes out
out of
of the
the box
box with
with our
our example
example app,
app, `demo-v2`.


- `@deity/falcon-algoliasearch-api`

- `@deity/falcon-algoliasearch-component`

- `@deity/falcon-algoliasearch-endpoints`


These integrate
integrate with:


- `@deity/falcon-search-extension`

- `@deity/falcon-shop-extension`

- `@deity/falcon-server`


To see
see it
it in
in action
action please
please check
check out
out our
our [demo
[demo store](https://demo.deity.io/search).


## Supported
Supported Features


- Product
Product search

- Product
Product search
search filtering


:::note New
New features
features coming
coming soon

We are
are actively
actively developing
developing our
our Algolia
Algolia integration
integration and
and will
will adding
adding new
new features
features such
such as
as search
search term
term redirects,
redirects, suggested
suggested search
search terms
terms and
and more.
 


## Getting
Getting Started


If you're
you're using
using our
our example
example app,
app, `demo-v2`
`demo-v2` most
most of
of the
the heavy
heavy lifting
lifting will
will be
be done
done for
for you
you and
and you'll
you'll only
only need
need to
to add
add a
a few
few configurations.



You'll need
need an
an API
API attached
attached to
to your
your shop
shop extension
extension so
so Algolia
Algolia has
has a
a source
source for
for product
product data.
data. Currently
Currently this
this only
only works
works with
with our
our [BigCommerce
[BigCommerce integration](bigcommerce/overview).
 

### 1.
1. Create
Create an
an Algolia
Algolia account


Before you
you start
start you'll
you'll need
need to
to create
create an
an <a
<a href="https://www.algolia.com/"
href="https://www.algolia.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Algolia
Algolia site">Algolia</a>
site">Algolia</a> account.


<img src="/img/docs/platform/algolia-admin-2.png"
src="/img/docs/platform/algolia-admin-2.png" alt="Algolia
alt="Algolia admin"
admin" width="300"
width="300" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


Once you've
you've created
created an
an account
account you
you should
should be
be able
able to
to get
get your
your **API
**API keys**.


<img src="/img/docs/platform/algolia-admin-1.png"
src="/img/docs/platform/algolia-admin-1.png" alt="Algolia
alt="Algolia admin"
admin" width="400"
width="400" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


### 2.
2. Add
Add your
your config
config to
to Falcon
Falcon Server


The next
next thing
thing you'll
you'll need
need to
to do
do is
is add
add your
your API
API keys
keys to
to your
your config
config files.


This is
is a
a full
full list
list of
of the
the config
config you'll
you'll need.




"components": {

"algolia": {

"package": "@deity/falcon-algoliasearch-component",

"config": {

"appId": null,

"apiKey": null,

"indexName": null




"endpoints": {

"algolia": {

"package": "@deity/falcon-algoliasearch-endpoints",

"config": {

"component": "algolia",

"autoReindex": false,

"url": "/algolia-info",

"filterFieldName": "filterOptions",

"indexSettings": {

"searchableAttributes": [








"attributesForFaceting": ["categories.name",
["categories.name", "filterOptions"],

"sortOrderCustomFieldMap": {

"price": "price.regular"






"apis": {

"algolia": {

"package": "@deity/falcon-algoliasearch-api",

"config": {

"component": "algolia"




"extensions": {

"search": {

"package": "@deity/falcon-search-extension",

"config": {

"api": "algolia"








**API Config**

This should
should be
be added
added to
to your
your env
env variables
variables or
or your
your local.json.
local.json. They
They can
can all
all be
be found
found within
within your
your Algolia
Algolia admin.




"components": {

"algolia": {

"enabled": {

"__name": "ALGOLIA_ENABLED",

"__format": "json"


"config": {

"appId": "ALGOLIA_APP_ID",

"apiKey": "ALGOLIA_API_KEY",

"indexName": "ALGOLIA_INDEX_NAME"







You'll need
need the
the **admin
**admin API
API key**


<img src="/img/docs/platform/algolia-admin-key.png"
src="/img/docs/platform/algolia-admin-key.png" alt="Algolia
alt="Algolia admin"
admin" width="400"
width="400" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


You should
should also
also configure
configure your
your search
search extension
extension to
to use
use Algolia.
Algolia. This
This can
can be
be done
done in
in any
any of
of your
your config
config files
files or
or by
by setting
setting an
an environment
environment variable:



"extensions": {

"search": {

"config": {

"api": "SEARCH_API_NAME"






### 3.
3. Index
Index your
your products


Once you've
you've created
created an
an account
account and
and configured
configured it,
it, the
the last
last thing
thing to
to do
do is
is [index
[index your
your data](#indexing--managing-indexes).


## Indexing
Indexing /
/ Managing
Managing indexes


This can
can be
be broken
broken down
down into
into 3
3 sections.
sections. Configuring
Configuring what
what data
data is
is searchable,
searchable, running
running an
an initial
initial index
index and
and updating
updating indexes
indexes when
when products
products are
are updated.


### 1.
1. Configuring
Configuring your
your indexes


The first
first thing
thing you'll
you'll need
need to
to do
do is
is configure
configure what
what data
data is
is searchable.
searchable. You
You can
can also
also configure
configure **facets**
**facets** (filters)
(filters) here.


This is
is done
done in
in your
your server
server config:




"endpoints": {

"algolia": {

"package": "@deity/falcon-algoliasearch-endpoints",

"config": {

"host": "fake",

"component": "algolia",

"autoReindex": false,

"url": "/algolia-info",

"filterFieldName": "filterOptions",

"indexSettings": {

"searchableAttributes": [








"attributesForFaceting": ["categories.name",
["categories.name", "filterOptions"],

"sortOrderCustomFieldMap": {

"price": "price.regular"






  


### Deity
Deity Cloud
Cloud Environment
Environment Variables


- `ALGOLIA_ENABLED`:
`ALGOLIA_ENABLED`: [bool]
[bool] -
- is
is Algolia
Algolia enabled
 
- `ALGOLIA_APP_ID`:
`ALGOLIA_APP_ID`: Your
Your App
App ID

- `ALGOLIA_API_KEY`:
`ALGOLIA_API_KEY`: Your
Your API
API key

- `ALGOLIA_INDEX_NAME`:
`ALGOLIA_INDEX_NAME`: The
The base
base index,
index, if
if this
this index
index doesn't
doesn't exist
exist in
in Algolia
Algolia yet
yet it
it will
will be
be created
created for
for you.

- `SEARCH_API_NAME`:
`SEARCH_API_NAME`: You'll
You'll need
need to
to set
set Algolia
Algolia as
as the
the search
search API.
API. The
The value
value shoul
shoul be
be `algolia`



### 2.
2. Running
Running an
an initial
initial index


To run
run your
your initial
initial index
index you
you just
just need
need to
to use
use the
the `autoReindex`
`autoReindex` flag
flag in
in your
your config
config files.



"endpoints": {

"algolia": {

"config": {

"autoReindex": true






Now you
you just
just need
need to
to start
start your
your app
app (Falcon
(Falcon Server)
Server) and
and all
all the
the products
products will
will be
be indexed.
 

<img src="/img/docs/platform/algolia-import.png"
src="/img/docs/platform/algolia-import.png" alt="Algolia
alt="Algolia import"
import" width="300"
width="300" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


**n.b.** If
If you
you want
want to
to run
run a
a fresh
fresh reindex
reindex of
of all
all your
your products
products we
we advise
advise going
going into
into the
the Algolia
Algolia admin
admin and
and emptying
emptying your
your indexes
indexes there
there first.


This is
is a
a temporary
temporary config
config only
only needed
needed for
for the
the initial
initial index.



### 3.
3. Updating
Updating indexes
indexes when
when product
product data
data changes


To keep
keep indexes
indexes up
up to
to date
date with
with product
product data
data we
we use
use webhooks.
 

Falcon server
server has
has 2
2 events
events we
we subscribe
subscribe to
to `falcon-server.entity-updated`
`falcon-server.entity-updated` and
and `falcon-server.entity-deleted`.


`falcon-server.entity-updated` also
also runs
runs when
when new
new entries
entries (products)
(products) are
are added.


With our
our **BigCommerce**
**BigCommerce** integration
integration we
we use
use the
the WebHooks
WebHooks provided
provided by
by **BigCommerce**
**BigCommerce** to
to trigger
trigger these
these **Falcon
**Falcon Server**
Server** events
events which
which our
our `@deity/falcon-algoliasearch-endpoints`
`@deity/falcon-algoliasearch-endpoints` listens
listens for.



## Useful
Useful Links


- [Our
[Our demo
demo site](https://demo.deity.io/)

- [Algolia
[Algolia site](https://www.algolia.com/)


id: examples

title: Example
Example Integrations

enterprise_only: true



We've created
created a
a series
series of
of example
example Integrations
Integrations to
to help
help you
you understand
understand how
how to
to integrate
integrate your
your services
services with
with Falcon
Falcon Platform.


**These are
are not
not production
production ready
ready examples**


### Json
Json Placeholder

https://jsonplaceholder.typicode.com/ offers
offers free
free and
and open
open APIs
APIs for
for testing.


We've created
created a
a guide
guide showing
showing how
how to
to integrate
integrate with
with this
this and
and use
use it's
it's data
data on
on the
the frontend.


- [Basic
[Basic Integration](tutorials/jsonplaceholder)


### Contentful

https://www.contentful.com/ is
is an
an enterprise,
enterprise, API
API first
first CMS.


We've created
created a
a guide
guide showing
showing how
how to
to integrate
integrate with
with this
this and
and use
use it's
it's data
data on
on the
the frontend.


- [Basic
[Basic Integration](tutorials/contentful)

- [Routing](tutorials/contentful2)


### Braintree


https://braintreepayments.com/ is
is a
a modern
modern payment
payment service
service provider.


We've created
created a
a guide
guide showing
showing how
how to
to integrate
integrate with
with it.


- [Credit
[Credit Card](tutorials/braintree)


id: overview

title: Magento
Magento 2
2 Integration

sidebar_label: Magento
Magento 2





<a href="https://magento.com/"
href="https://magento.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Magento
Magento site">

<img src="/img/docs/platform/magento-logo.svg"
src="/img/docs/platform/magento-logo.svg" alt="Magento
alt="Magento Logo"
Logo" width="200"/>





## Overview


Falcon Platform
Platform provides
provides the
the best
best front-end
front-end experiences
experiences for
for Magento
Magento 2
2 platform.


We support
support **magento
**magento >=
>= 2.3**



Falcon magento
magento module
module is
is required
required to
to run
run with
with Falcon
Falcon Platform.

Magento module
module is
is based
based on
on core
core REST
REST API
API of
of Magento
Magento platform.


## Supported
Supported Features


We have
have covered
covered all
all features
features essential
essential for
for customer
customer shopping
shopping and
and we
we keep
keep improving
improving our
our feature
feature coverage
coverage over
over time.
time. cover
cover every
every feature.



- Cms
Cms pages

- Cms
Cms blocks

- Top
Top navigation
navigation menu

- Newsletter
Newsletter support

- Multiple
Multiple stores
stores support
support (multilanguage
(multilanguage support)

- Multiple
Multiple currency
currency support


**Catalog /
/ Product
Product list**


- Layered
Layered navigation

- Product
Product lazy
lazy load

- Sorting

- Supported
Supported product
product types:
types: simple,
simple, configurable

- Catalog
Catalog price
price rules

- Tier
Tier prices


**Catalog /
/ Product
Product Detail
Detail Page**

- Product
Product images
images &
& gallery

- Tier
Tier prices

- Sale
Sale Prices

- Configurable
Configurable product:
product: swatches




- Login

- Register

- Reset
Reset Password

- Address
Address Book

- Customer
Customer Dashboard

- Account
Account Details

- Orders




- Add
Add /
/ Remove
Remove /
/ Update
Update Items

- Add
Add /
/ Remove
Remove Coupons




- Guest
Guest /
/ Customer
Customer Checkout

- Adding
Adding new
new address
address /
/ reusing
reusing existing
existing ones

- Shipping
Shipping methods

- Various
Various payment
payment methods

- Gift
Gift cards
cards support

- Deity
Deity payment
payment portal
portal (Paypal,
(Paypal, Mollie,
Mollie, Stripe)




- Canonical
Canonical URLs

- Url
Url rewrites

- ProductProduct // CategoryCategory metameta attributes
id: getting-started

title: Getting
Getting started

sidebar_label: Getting
Getting started



## Getting
Getting Started



Falcon magento
magento module
module should
should be
be installed
installed over
over preinstalled
preinstalled magento
magento instance.
instance. In
In case
case you
you don't
don't have
have magento
magento installed
installed yet

please checkout
checkout <a
<a href="https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-install.html">Magento
href="https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-install.html">Magento install
install guide</a>.
 


Using our
our example
example project,
project, `demo-v1`
`demo-v1` you
you will
will have
have Magento
Magento 2
2 support
support without
without having
having to
to do
do any
any custom
custom dev.


### 1.
1. Configure
Configure composer
composer repository


To install
install falcon
falcon magento
magento module
module you
you will
will need
need a
a `repository-url`
`repository-url` and
and `token`.
`token`. You
You should
should get
get this
this data
data from
from our
our team
team after
after signing
signing up.


Run the
the following
following command
command in
in your
your magento
magento instance:


composer config
config --global
--global --auth
--auth http-basic.deity.repo.packagist.com
http-basic.deity.repo.packagist.com token
token `token`



Afterwards update
update you
you `composer.json`
`composer.json` file
file with
with following
following data


"repositories": [

{"type": "composer",
"composer", "url":
"url": "repository-url"}




### 2.
2. Install
Install falcon
falcon magento
magento module

Run the
the following
following composer
composer command


composer require
require deity/falcon-magento
deity/falcon-magento ^5.4.0



After package
package installed,
installed, install
install falcon
falcon module
module into
into your
your magento
magento with


bin/magento setup:upgrade



and flush
flush magento
magento cache


bin/magento cache:flush



### 3.
3. Create
Create an
an integration
integration within
within Magento.


From the
the admin
admin (system->integrations)
(system->integrations) you
you can
can create
create a
a new
new integration.


<img src="/img/docs/platform/magento2-admin.png"
src="/img/docs/platform/magento2-admin.png" alt="Magento
alt="Magento admin"
admin" width="300"
width="300" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


From here
here you
you will
will get
get the
the following
following credentials
credentials to
to use
use later:

<img src="/img/docs/platform/magento2/integration-details.png"
src="/img/docs/platform/magento2/integration-details.png" alt="Integration
alt="Integration details"
details" width="300"
width="300" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


- `CONSUMER_KEY`

- `CONSUMER_SECRET`

- `ACCESS_TOKEN`

- `ACCESS_TOKEN_SECRET`


### 4.
4. Create
Create your
your Falcon
Falcon App.

Install Falcon
Falcon Platform
Platform using
using the
the `demo-v1`
`demo-v1` example
example and
and `create-falcon-app`


### 5.
5. Configure
Configure your
your Magento
Magento connection

Add your
your Magento
Magento 2
2 details
details to
to your
your `server/config/`
`server/config/` files.
files. Below
Below is
is an
an example
example of
of the
the config
config variables
variables you'll
you'll need
need to
to add.

If you're
you're using
using `demo-v1`
`demo-v1` this
this will
will be
be set
set up
up to
to use
use our
our demo
demo Magento
Magento 2
2 instance
instance and
and should
should work
work out
out of
of the
the box.




"endpoints": {

"magento": {

"config": {

"host": "MAGENTO_HOST"




"apis": {

"magento2": {

"config": {

"host": "MAGENTO_HOST",

"defaultLocale": "MAGENTO_DEFAULT_LOCALE",

"itemUrlSuffix": "MAGENTO_URL_SUFFIX",

"auth": {

"consumerKey": "MAGENTO_CONSUMER_KEY",

"consumerSecret": "MAGENTO_CONSUMER_SECRET",

"accessToken": "MAGENTO_ACCESS_TOKEN",

"accessTokenSecret": "MAGENTO_ACCESS_TOKEN_SECRET"








### Deity
Deity Cloud
Cloud Environment
Environment Variables


- `MAGENTO_HOST`:
`MAGENTO_HOST`: Your
Your Magento
Magento site
site URL
URL (without
(without protocol)
protocol) e.g.
e.g. `magento.deity.io`

- `MAGENTO_CONSUMER_KEY`:
`MAGENTO_CONSUMER_KEY`: your
your consumer
consumer key

- `MAGENTO_CONSUMER_SECRET`:
`MAGENTO_CONSUMER_SECRET`: your
your consumer
consumer secret

- `MAGENTO_ACCESS_TOKEN`:
`MAGENTO_ACCESS_TOKEN`: your
your access
access token

- `MAGENTO_ACCESS_TOKEN_SECRET`:
`MAGENTO_ACCESS_TOKEN_SECRET`: your
your access
access token
token secret

- `MAGENTO_DEFAULT_LOCALE`:
`MAGENTO_DEFAULT_LOCALE`: default
default locale
locale for
for your
your Magento
Magento store.
store. e.g.
e.g. `en_GB`

- `MAGENTO_URL_SUFFIX`:
`MAGENTO_URL_SUFFIX`: Your
Your suffix
suffix for
for products
products and
and categories.
categories. e.g.
e.g. `.html`.
`.html`. Defaults
Defaults to
to `null`.



### 6.
6. Update
Update magento
magento configuration


When your
your falcon
falcon instance
instance is
is up
up and
and running
running its
its important
important to
to update
update magento
magento with
with falcon
falcon instance
instance data

Go to
to Magento
Magento admin
admin `Stores->Configuration`

On Configuration
Configuration page
page open
open `Services->Falcon`

<img src="/img/docs/platform/magento2/magento-falcon-config.png"
src="/img/docs/platform/magento2/magento-falcon-config.png" alt="Magento
alt="Magento admin"
admin" width="600"
width="600" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


Enter your
your falcon
falcon domain
domain to
to `Falcon
`Falcon frontend
frontend url`,
url`, and
and cache
cache webhook
webhook url
url to
to `Url
`Url to
to flush
flush cache
cache on
on Falcon
Falcon Server`.


### 7.
7. Configure
Configure Deity
Deity Payment
Payment Gateway


To configure
configure Deity
Deity Payment
Payment Gateway
Gateway go
go to
to Magento
Magento admin
admin `Stores->Configuration`
`Stores->Configuration` and
and select
select `Sales
`Sales ->
-> Payment
Payment Methods`
Methods` section


<img src="/img/docs/platform/magento2/deity_payments.png"
src="/img/docs/platform/magento2/deity_payments.png" alt="Magento
alt="Magento admin"
admin" width="600"
width="600" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


If your
your shop
shop does
does not
not support
support offline
offline payments
payments (like
(like Cash
Cash on
on Delivery)
Delivery) you
you can
can disable
disable `Deity
`Deity Offline
Offline Payments`
Payments` on
on this
this page.


### 8.
8. Disable
Disable your
your Magento
Magento frontend

Since Falcon
Falcon magento
magento module
module version
version 5.4.0
5.4.0 disable
disable magento
magento frontend
frontend function
function is
is included
included into
into the
the module
module core.

To disable
disable magento
magento frontend
frontend from
from cli
cli run
 

php bin/magento
bin/magento config:set
config:set admin/deity_disable_frontend/block_frontend_access
admin/deity_disable_frontend/block_frontend_access 1


Or go
go to
to magento
magento admin
admin config
config area


Stores >
> Configuration
Configuration >
> Advanced
Advanced >
> Admin
Admin >
> Disable
Disable Frontend


Flush cache
cache after
after changing
changing config.


### 9.
9. Complete

Complete, you
you should
should now
now have
have a
a fully
fully working
working Magento
Magento 2
2 /
/ Falcon
Falcon Platform
Platform site


id: unbxd

title: Unbxd
Unbxd Integration

sidebar_label: Unbxd



id: overview

title: BigCommerce
BigCommerce Integration

sidebar_label: BigCommerce

description: Our
Our BigCommerce
BigCommerce integration
integration provides
provides everything
everything you
you need
need to
to get
get your
your shop
shop online.
online. From
From product
product pages
pages to
to the
the checkout.





<a href="https://www.bigcommerce.com/"
href="https://www.bigcommerce.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the BigCommerce
BigCommerce site">

<img src="/img/docs/platform/bigcommerce-logo.svg"
src="/img/docs/platform/bigcommerce-logo.svg" alt="BigCommerce
alt="BigCommerce Logo"
Logo" width="200"/>





Our BigCommerce
BigCommerce integration
integration provides
provides everything
everything you
you need
need to
to get
get your
your shop
shop online.
online. From
From product
product pages
pages to
to the
the checkout.


All you
you need
need is
is a
a BigCommerce
BigCommerce store
store and
and our
our BigCommerce
BigCommerce App
App and
and you
you can
can be
be up
up and
and running
running in
in a
a few
few clicks.




rel="noreferrer noopener"


aria-label="visit the
the BigCommerce
BigCommerce site"

style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}><img
}}><img src="/img/docs/platform/bigcommerce/partner-header.jpg"
src="/img/docs/platform/bigcommerce/partner-header.jpg" alt="BigCommerce
alt="BigCommerce and
and Falcon
Falcon Platform
Platform Graphic"
Graphic" width="500"/>>
width="500"/>> </a>


- [Get
[Get started](/platform/integration/bigcommerce/getting-started)

- [Feature
[Feature List](/platform/integration/bigcommerce/features)

- [BigCommerce
[BigCommerce demo
demo app](https://demo.deity.io/)

- [BigCommerce
[BigCommerce partner
partner page](https://www.bigcommerce.com/deity/)


id: embedded-checkout

title: Embedded
Embedded Checkout

sidebar_label: Embedded
Embedded Checkout

description: How
How to
to use
use the
the BigCommerce
BigCommerce Embedded
Embedded Checkout



## About


The [BigCommerce
[BigCommerce Embedded
Embedded Checkout](https://developer.bigcommerce.com/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial)
Checkout](https://developer.bigcommerce.com/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial) allows
allows customer
customer to
to load
load an
an iframe
iframe version
version of
of the
the checkout.
checkout. The
The benefits
benefits to
to this
this is
is it
it supports
supports all
all the
the features
features and
and payment
payment methods
methods BigCommerce
BigCommerce supports
supports out
out of
of the
the box.


## How
How to
to use


To use
use the
the BigCommerce
BigCommerce Embedded
Embedded checkout
checkout you
you simply
simply need
need to
to add
add it
it into
into your
your checkout
checkout components.


With our
our core
core app
app this
this will
will be:




### 1.
1. Import
Import the
the component



import {
{ EmbeddedCheckout
EmbeddedCheckout }
} from
from './components';



:::note Check
Check the
the component
component exists

Out of
of the
the box
box you
you should
should have
have a
a `client/src/pages/shop/Checkout/components/EmbeddedCheckout.js`
`client/src/pages/shop/Checkout/components/EmbeddedCheckout.js` file.
file. If
If not,
not, please
please create
create a
a new
new app
app using
using `@deity/create-falcon-app`
`@deity/create-falcon-app` and
and grab
grab it
it from
from there.
there. This
This is
is specific
specific to
to demo-v2



### 2.
2. Get
Get the
the embedded
embedded checkout
checkout URL


Our cart
cart query
query can
can have
have extra
extra params
params passed
passed to
to it
it to
to grab
grab the
the embedded
embedded checkout
checkout iframe
iframe URL
URL needed
needed to
to render
render the
the checkout.


Find `CartQuery`
`CartQuery` in
in the
the `Checkout.js`
`Checkout.js` file.


It should
should look
look something
something like
like this:



export const
const CartQuery
CartQuery =
= props
props =>
=> {

return <FalconCartQuery
<FalconCartQuery fetchPolicy="cache-and-network"
fetchPolicy="cache-and-network" {...props}
{...props} />;




Change this
this to
to add
add `variables={{
`variables={{ includeEmbeddedUrl:
includeEmbeddedUrl: true
true }}`



export const
const CartQuery
CartQuery =
= props
props =>
=> {

return <FalconCartQuery
<FalconCartQuery fetchPolicy="cache-and-network"
fetchPolicy="cache-and-network" variables={{
variables={{ includeEmbeddedUrl:
includeEmbeddedUrl: true
true }}
}} {...props}
{...props} />;




This will
will return
return `cart.embeddedUrl`
`cart.embeddedUrl` with
with the
the query.


### 3.
3. Render
Render the
the component


Find `EnsureCanProceedCheckout`
`EnsureCanProceedCheckout` in
in the
the `Checkout.js`
`Checkout.js` file.


This should
should be
be wrapped
wrapped in
in `CartQuery`
`CartQuery` from
from step
step 2.


After the
the checks
checks against
against the
the cart
cart having
having items
items you
you can
can add:



if (cart.embeddedUrl)
(cart.embeddedUrl) {

return <EmbeddedCheckout
<EmbeddedCheckout url={cart.embeddedUrl}
url={cart.embeddedUrl} />;




So it
it will
will end
end up
up something
something like
like this:



return (


{({ data:
data: {
{ cart
cart }
} })
}) =>
=> {

if (!cart
(!cart ||
|| cart.itemsQty
cart.itemsQty ===
=== 0
0 ||
|| cart.items.length
cart.items.length ===
=== 0)
0) {

// try
try to
to restore
restore the
the cart
cart if
if you
you can

if (!called)
(!called) {


return <Loader
<Loader />;



// If
If we
we have
have a
a cart
cart but
but the
the items
items haven't
haven't loaded

if (cart
(cart &&
&& cart.itemsQty
cart.itemsQty !==
!== 0
0 &&
&& cart.items.length
cart.items.length ===
=== 0)
0) {

return <Loader
<Loader />;



// We
We can't
can't restore
restore the
the cart
cart or
or there
there are
are no
no items

return <Redirect
<Redirect to="/cart"
to="/cart" />;



if (cart.embeddedUrl)
(cart.embeddedUrl) {

return <EmbeddedCheckout
<EmbeddedCheckout url={cart.embeddedUrl}
url={cart.embeddedUrl} />;





## Notes


The embedded
embedded checkout
checkout requires
requires you
you to
to pass
pass the
the correct
correct channel
channel ID
ID in
in your
your BigCommerce
BigCommerce API
API config.


The host
host for
for this
this channel
channel must
must match
match your
your app.


If you're
you're developing
developing locally
locally please
please follow
follow the
the notes
notes in
in the
the [BigCommerce
[BigCommerce docs](https://developer.bigcommerce.com/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial#how-can-i-work-with-embedded-checkout-locally).


id: getting-started

title: Getting
Getting Started

sidebar_label: Getting
Getting Started

description: Using
Using our
our BigCommerce
BigCommerce App,
App, getting
getting started
started is
is easy.



## Prerequisites


Before you
you get
get started
started you'll
you'll need
need a
a BigCommerce
BigCommerce store
store and
and have
have access
access to
to the
the admin
admin panel.


## 1.
1. Install
Install our
our app





rel="noopener noreferrer"

title="Download our
our BigCommerce
BigCommerce App">
App"> <img


alt="BigCommerce app"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}




The first
first thing
thing you'll
you'll need
need to
to do
do is
is visit
visit the
the [BigCommerce
[BigCommerce App
App Store](https://www.bigcommerce.com/apps/deity-falcon-pwa-storefront/)
Store](https://www.bigcommerce.com/apps/deity-falcon-pwa-storefront/) and
and download
download our
our app.


## 2.
2. Setup
Setup our
our app


Once you've
you've added
added our
our app
app you
you can
can configure
configure it.
it. From
From the
the BigCommerce
BigCommerce admin
admin panel
panel visit
visit the
the Apps
Apps ->
-> My
My Apps
Apps section
section and
and select
select the
the **Falcon
**Falcon PWA**
PWA** app.


Once you're
you're viewing
viewing the
the app
app click
click **install**.




alt="BigCommerce app
app setup"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### i.
i. Permissions




alt="BigCommerce permissions
permissions screen"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



Our app
app will
will need
need to
to have
have access
access to
to some
some areas
areas of
of your
your store
store to
to work.
work. You'll
You'll need
need to
to agree
agree to
to this
this to
to continue.


### ii.
ii. Start
Start your
your Deity
Deity Falcon
Falcon account
account setup


Once you've
you've agreed
agreed to
to allow
allow our
our app
app the
the BigCommerce
BigCommerce permissions
permissions it
it needs
needs you
you be
be show
show a
a splash
splash screen
screen allowing
allowing you
you to
to [view
[view a
a demo
demo store\*\*](#demo)
store\*\*](#demo) so
so you
you can
can get
get to
to know
know Falcon
Falcon Platform
Platform a
a little
little better.
better. You'll
You'll also
also be
be giving
giving the
the option
option to
to **'Get
**'Get Deity
Deity Falcon'**.
Falcon'**. Click
Click that
that to
to continue
continue with
with your
your setup.


The next
next steps
steps will
will take
take you
you through
through creating
creating an
an account
account with
with us.




alt="Falcon Platform
Platform splash
splash screen"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### iii.
iii. Choose
Choose your
your plan


We offer
offer various
various price
price plans,
plans, once
once you've
you've chosen
chosen the
the plan
plan that's
that's right
right for
for you,
you, you
you can
can continue
continue to
to add
add your
your company
company /
/ personal
personal details.




alt="Falcon Platform
Platform price
price plans"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### iiii.
iiii. Add
Add your
your personal
personal details


You'll now
now be
be given
given the
the option
option to
to add
add your
your personal
personal details,
details, we'll
we'll use
use these
these as
as part
part of
of your
your invoice.




alt="Falcon Platform
Platform personal
personal details"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### v.
v. Adding
Adding Payment
Payment Details


The final
final step
step of
of your
your account
account setup
setup is
is adding
adding your
your payment
payment details.




alt="Falcon Platform
Platform payment
payment details"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



If setup
setup is
is successful
successful a
a BigCommerce
BigCommerce token
token will
will be
be generated
generated and
and you'll
you'll be
be shown
shown your
your BigCommerce
BigCommerce /
/ Falcon
Falcon Platform
Platform dashboard.




alt="BigCommerce Token
Token Generation"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



## 3.
3. Your
Your dashboard.


You'll be
be able
able to
to manage
manage your
your Falcon
Falcon Platform
Platform account
account from
from within
within your
your BigCommerce
BigCommerce admin
admin panel.




alt="BigCommerce admin
admin panel"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



From here
here you'll
you'll be
be able
able to
to change
change personal
personal detail,
detail, subscription
subscription and
and payment
payment information
information and
and link
link your
your site
site to
to a
a live
live URL
URL (Custom
(Custom URLs
URLs are
are not
not available
available for
for **sandbox**
**sandbox** accounts).


When you
you load
load up
up your
your dashboard
dashboard you'll
you'll see
see a
a link
link to
to your
your new
new Falcon
Falcon PWA
PWA store.




alt="BigCommerce admin
admin panel"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



:::note New
New account?

If you've
you've just
just set
set up
up your
your account
account it
it might
might take
take a
a few
few minutes
minutes before
before your
your site
site is
is available.



## 4.
4. Connecting
Connecting your
your code
code repository


Your site
site will
will be
be currently
currently setup
setup using
using our
our example
example app.


If you
you don't
don't already
already have
have an
an Falcon
Falcon Client
Client app
app in
in a
a code
code repository
repository you'll
you'll need
need to
to create
create one
one [link
[link here].


You repository
repository should
should have
have the
the `client`
`client` folder
folder in
in its
its `root`
`root` directory.


:::note Do
Do you
you have
have an
an Enterprise
Enterprise account?

If you
you have
have an
an Enterprise
Enterprise account
account your
your **Falcon
**Falcon Server**
Server** instance
instance should
should also
also be
be in
in the
the same
same code
code repository.
repository. with
with `client`
`client` and
and `server`
`server` directories
directories in
in the
the root.



### i.
i. Accessing
Accessing our
our NPM
NPM packages


To access
access our
our private
private packages
packages you'll
you'll need
need to
to use
use your
your **NPM
**NPM Token**
Token** and
and **NPM
**NPM Username**,
Username**, this
this can
can be
be found
found from
from the
the `Falcon
`Falcon Client`
Client` tab.


You can
can log
log into
into [deity.npm.io](https://npm.deity.io/)
[deity.npm.io](https://npm.deity.io/) to
to view
view these
these pacakges.


To have
have access
access to
to the
the packages
packages for
for local
local development
development you
you can
can follow
follow [these
[these steps](/platform/getting-started/npm/).




alt="BigCommerce admin
admin panel
panel -
- NPM
NPM token"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### ii.
ii. Create
Create your
your app


Once you
you have
have access
access to
to our
our packages
packages you'll
you'll be
be able
able to
to create
create your
your app
app using
using `npx
`npx @deity/create-falcon-app
@deity/create-falcon-app --example
--example demo-v2
demo-v2 [YOUR_DIRECTORY_NAME]`.
[YOUR_DIRECTORY_NAME]`. For
For more
more information
information about
about creating
creating an
an app
app follow
follow [these
[these instructions](/platform/getting-started/create).


### iii.
iii. Connect
Connect your
your app


The last
last step
step is
is to
to connect
connect your
your app
app so
so it's
it's being
being used
used by
by your
your Falcon
Falcon Cloud
Cloud account.
account. If
If you
you visit
visit the
the the
the `Falcon
`Falcon Client`
Client` tab
tab you'll
you'll see
see information
information about
about **Authorising**
**Authorising** Cloud
Cloud to
to have
have access
access to
to your
your repository
repository and
and adding
adding a
a **Webhook**
**Webhook** so
so cloud
cloud can
can listen
listen for
for changes
changes (so
(so your
your Cloud
Cloud instance
instance knows
knows when
when you
you push
push code).


You can
can see
see detailed
detailed docs
docs for
for this
this step
step [here](/platform/getting-started/repository).


## 5.
5. Local
Local development


When developing
developing your
your app
app locally
locally you'll
you'll want
want to
to connect
connect your
your Falcon
Falcon Client
Client app
app to
to Falcon
Falcon Server,
Server, which
which in
in turn
turn will
will connect
connect to
to BigCommerce.


This can
can be
be done
done by
by adding
adding your
your Falcon
Falcon Server
Server credentials
credentials to
to your
your `client/config/local.json`
`client/config/local.json` file.
file. You
You can
can find
find out
out more
more about
about configurations
configurations [here](/platform/configuration/overview).


Add the
the following
following code
code to
to your
your `local.json`
`local.json` file,
file, replacing
replacing `[YOUR_SITE_URL]`
`[YOUR_SITE_URL]` with
with your
your site
site URL.




"graphqlUrl": "[YOUR_SITE_URL]/graphql"




## 6.
6. Falcon
Falcon Cloud
Cloud +
+ Deployments


Falcon Cloud
Cloud comes
comes as
as part
part of
of Falcon
Falcon Platform
Platform and
and is
is where
where your
your site
site is
is hosted.
hosted. To
To manage
manage deployments
deployments you
you can
can use
use our
our [DCloud
[DCloud CLI
CLI tool](/platform/cloud/installation).
tool](/platform/cloud/installation). You'll
You'll need
need an
an **access
**access token**
token** to
to log
log into
into using
using DCloud.
DCloud. This
This can
can be
be found
found in
in the
the `Falcon
`Falcon Server`
Server` tab.




alt="BigCommerce admin
admin panel
panel -
- falcon
falcon server
server tab"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



## 7.
7. Adding
Adding integrations


If you
you want
want to
to add
add other
other integrations
integrations such
such as
as **Algolia**
**Algolia** or
or **Wordpress**
**Wordpress** information
information can
can be
be found
found in
in the
the integrations
integrations tab.


## \*\*Demo
\*\*Demo Store


This demo
demo store
store will
will **NOT**
**NOT** pull
pull in
in your
your products
products at
at this
this stage
stage and
and should
should only
only be
be used
used as
as a
a reference
reference to
to the
the features
features available.
available. From
From here
here you'll
you'll be
be able
able to
to chat
chat to
to our
our support
support team
team if
if you
you have
have any
any questions.


id: features

title: Features

sidebar_label: Features

description: Falcon
Falcon Platform
Platform has
has a
a large
large percentage
percentage coverage
coverage of
of BigCommerce
BigCommerce features.



:::note New
New features
features coming
coming soon

We are
are actively
actively developing
developing our
our BigCommerce
BigCommerce integration
integration and
and will
will be
be adding
adding support
support for
for more
more features.





- Category
Category tree
tree from
from admin


**Product Types**


- Simple
Simple Products

- Configurable
Configurable Products

- Gift
Gift Cards


**Product Page
Page Features**


- Image
Image Gallery

- Related
Related Products
Products (partial
(partial support)

- Recently
Recently Viewed
Viewed Products
Products (partial
(partial support)




- Tax
Tax Calculation

- Tiered
Tiered Pricing
Pricing (partial
(partial support)

- Special
Special /
/ Sale
Sale prices


**Category/Product List**


- Sort
Sort Orders

- Add
Add to
to cart

- Filtering
Filtering (partial
(partial support)




- Product
Product search

- Search
Search aggregations/facets
aggregations/facets (when
(when used
used with
with our
our [Algolia
[Algolia Extension](/platform/integration/algolia))

- Search
Search sort
sort order


**Customer Area**


- Login

- Register

- Customer
Customer information
information (view/edit)

- Address
Address book
book (edit/add/remove)

- Change
Change password

- Previous
Previous order
order grid


**Cart/Mini Cart**


- Add/remove/edit
Add/remove/edit cart
cart items

- Add/remove
Add/remove coupons




- Guest
Guest Checkout

- Customer
Customer Checkout

- Shipping
Shipping methods
methods from
from admin

- Saved
Saved customer
customer addresses

- Embedded
Embedded one
one page
page checkout
checkout (supports
(supports BigCommerce
BigCommerce payment
payment and
and shipping
shipping methods).




- Google
Google Analytics

- Google
Google Tag
Tag Manager

- Structured
Structured Data
Data (Schema)

- Meta
Meta Data

- Canonicals
Canonicals (partial
(partial support)

- Site
Site Maps
Maps (frontend
(frontend specific)

- 301
301 redirects




- Multi-currency
Multi-currency (partial
(partial support)

- Multi-language
Multi-language (partial
(partial support)


id: technical

title: Technical
Technical Information

sidebar_label: Technical
Technical Information

description: Our
Our integration
integration is
is made
made up
up of
of 2
2 main
main pacakges,
pacakges, falcon-bigcommerce-api
falcon-bigcommerce-api and
and falcon-bigcommerce-endpoints.



The key
key packages
packages involved
involved in
in the
the integration
integration are:


- `@deity/falcon-bigcommerce-api`

- `@deity/falcon-bigcommerce-endpoints`


`falcon-bigcommerce-api` uses
uses both
both **REST
**REST API**
API** and
and **GraphQL**
**GraphQL** endpoints
endpoints for
for communicating
communicating with
with BigCommerce.


## Important
Important notes


The current
current BigCommerce
BigCommerce REST
REST API
API does
does not
not provide
provide any
any endpoints
endpoints to
to resolve
resolve frontend
frontend URLs,
URLs, for
for this
this reason
reason -
- the
the BigCommerce
BigCommerce GraphQL
GraphQL API
API is
is used
used just
just to
to resolve
resolve frontend
frontend URLs.
URLs. Once
Once it
it gets
gets the
the URL
URL type,
type, it's
it's able
able to
to fetch
fetch the
the (category
(category or
or product)
product) data
data from
from the
the BigCommerce
BigCommerce REST
REST API.


The BigCommerce
BigCommerce REST
REST API
API does
does not
not support
support aggregations
aggregations when
when navigating/filtering
navigating/filtering category
category products.
products. In
In order
order to
to provide
provide visitors
visitors with
with the
the best
best Search
Search experience
experience possible,
possible, it
it is
is recommended
recommended to
to use
use the
the falcon-algoliasearch
falcon-algoliasearch module,
module, which
which also
also allows
allows fetching
fetching the
the products
products directly
directly from
from the
the Algolia
Algolia index
index (for
(for this
this reason
reason it's
it's vital
vital to
to configure
configure Algolia
Algolia and
and BigCommerce
BigCommerce webhooks
webhooks properly
properly to
to ensure
ensure the
the correct
correct data
data flow
flow across
across backends
backends because,
because, Falcon-Server
Falcon-Server is
is the
the only
only middleware
middleware that
that connects
connects them
them both).


In order
order to
to avoid
avoid the
the requirement
requirement for
for your
your server
server to
to be
be PCI
PCI compliant,
compliant, it
it is
is recommended
recommended to
to use
use @deity-io/falcon-payments
@deity-io/falcon-payments module
module which
which handles
handles this
this requirement
requirement for
for you
you and
and provides
provides payments
payments on
on the
the client-side,
client-side, so
so you
you only
only get
get a
a transaction
transaction ID
ID to
to check/verify
check/verify server
server side.
side. Otherwise,
Otherwise, you'll
you'll have
have to
to handle
handle sensitive
sensitive payment
payment information
information and
and pass
pass this
this data
data to
to BigCommerce.


### Order
Order Webhooks


We use
use the
the Falcon
Falcon Server
Server config
config `envName`
`envName` to
to avoid
avoid webhook
webhook collision
collision amongst
amongst apps
apps connecting
connecting to
to the
the same
same BigCommerce
BigCommerce Store.


For enterprise
enterprise customers
customers that
that are
are running
running their
their own
own instance
instance of
of Falcon
Falcon Server
Server we
we highly
highly recommend
recommend each
each app
app /
/ developer
developer chooses
chooses a
a unique
unique name
name for
for their
their app
app and
and sets
sets it
it in
in their
their `local.json`
`local.json` config
config file.


## Known
Known issues


### File
File Upload
Upload Product
Product Modifier


We don't
don't currently
currently support
support file
file upload
upload product
product modifiers.
modifiers. Support
Support will
will be
be added
added in
in a
a future
future release.


### Product
Product Modifier
Modifier Cache


Unfortunately, the
the BigCommerce
BigCommerce product
product update
update webhook
webhook is
is not
not triggered
triggered if
if you
you make
make changes
changes to
to product
product modifier
modifier options.
options. This
This means
means that
that our
our cache
cache clearing
clearing isn't
isn't triggered.
triggered. To
To see
see updates
updates immediately
immediately you'll
you'll need
need to
to change
change another
another product
product attribute
attribute such
such as
as name,
name, price
price or
or description.
description. We
We suggest
suggest making
making a
a tiny
tiny change
change and
and then
then reverting
reverting it
it straight
straight after.


By default
default the
the cache
cache lifetime
lifetime (TTL)
(TTL) of
of the
the product
product cache
cache is
is 5
5 minutes,
minutes, you
you can
can always
always wait
wait for
for the
the cache
cache to
to expire
expire if
if your
your changes
changes don't
don't need
need to
to be
be reflected
reflected on
on the
the frontend
frontend urgently.


### Legacy
Legacy product
product option
option support


When using
using legacy
legacy (`v2`)
(`v2`) options,
options, we
we currently
currently support
support only
only the
the following
following option
option types:
types: *Multiple
*Multiple Choice*,
Choice*, *Swatch*.
*Swatch*. This
This means
means you
you will
will be
be able
able to
to use
use legacy
legacy options
options for
for things
things like
like choosing
choosing size,
size, color
color or
or model.
model. If
If your
your product
product has
has other
other option
option types,
types, the
the product
product will
will be
be visible
visible in
in your
your storefront,
storefront, but
but you
you won't
won't be
be able
able to
to add
add it
it to
to cart.


Furthermore, each
each product
product that
that has
has legacy
legacy options
options must
must have
have one
one or
or more
more SKUs
SKUs associated
associated with
with it.
it. You
You can
can check
check if
if your
your product
product has
has SKUs
SKUs in
in the
the [BigCommerce
[BigCommerce Control
Control Panel](https://login.bigcommerce.com/),
Panel](https://login.bigcommerce.com/), by
by viewing
viewing a
a product
product and
and going
going to
to *Options
*Options &
& SKUs*
SKUs* and
and clicking
clicking the
the tab
tab *SKUs*.
*SKUs*. If
If you
you haven't
haven't already
already created
created SKUs,
SKUs, the
the easiest
easiest way
way to
to do
do so
so is
is to
to click
click the
the *Generate
*Generate SKUs*
SKUs* button
button (the
(the chosen
chosen options
options in
in the
the dialog
dialog are
are not
not important
important for
for us).
us). For
For more
more info
info on
on the
the SKU
SKU Generator,
Generator, check
check out
out [BigCommerce
[BigCommerce Support](https://support.bigcommerce.com/s/article/The-Auto-SKU-Generator).


To find
find out
out more
more about
about legacy
legacy options,
options, check
check out
out this
this [BigCommerce
[BigCommerce Support
Support article](https://support.bigcommerce.com/s/article/Product-Options-v3#compare).


id: manual

title: Manual
Manual Configuration

sidebar_label: Manual
Manual Configuration

description: Step
Step by
by step
step guide
guide to
to configure
configure your
your BigCommerce
BigCommerce and
and Falcon
Falcon integration.



## Getting
Getting Started


You might
might want
want to
to manually
manually configure
configure your
your BigCommerce
BigCommerce Integration
Integration if
if you're
you're an
an **Enterprise
**Enterprise customer**
customer** and
and are
are running
running **Falcon
**Falcon Server
Server Locally**.


If you're
you're using
using our
our example
example app,
app, `demo-v2`
`demo-v2` most
most of
of the
the heavy
heavy lifting
lifting will
will be
be done
done for
for you
you and
and you'll
you'll only
only need
need to
to add
add a
a few
few configurations.


### 1.
1. Create
Create a
a BigCommerce
BigCommerce Account


You can
can create
create an
an account
account and
and start
start your
your free
free trial
trial [here](https://www.bigcommerce.com/essentials/free-trial/)


<img src="/img/docs/platform/bigcommerce-account-1.png"
src="/img/docs/platform/bigcommerce-account-1.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="300"
width="300" style={{marginBottom:
style={{marginBottom: 20}}/>


Once you've
you've created
created an
an account,
account, or
or if
if you
you already
already had
had one
one you'll
you'll need
need to
to create
create API
API keys.
keys. From
From within
within your
your dashboard
dashboard visit
visit **Advanced
**Advanced Settings
Settings ->
-> API
API Accounts**.


<img src="/img/docs/platform/bigcommerce-account-2.png"
src="/img/docs/platform/bigcommerce-account-2.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="180"
width="180" style={{marginBottom:
style={{marginBottom: 20}}/>


You should
should then
then be
be able
able to
to create
create a
a **V2/V3
**V2/V3 API
API Token**.


<img src="/img/docs/platform/bigcommerce-account-3.png"
src="/img/docs/platform/bigcommerce-account-3.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="180"
width="180" style={{marginBottom:
style={{marginBottom: 20}}/>


We recommend
recommend enabling
enabling **all
**all permissions**
permissions** for
for you
you API
API so
so you
you don't
don't have
have to
to regenerate
regenerate it
it at
at a
a later
later date.


<img src="/img/docs/platform/bigcommerce-account-4.png"
src="/img/docs/platform/bigcommerce-account-4.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="140"
width="140" style={{marginBottom:
style={{marginBottom: 20}}/>


You will
will then
then get
get a
a download
download with
with your
your API
API keys.
keys. Keep
Keep this
this safe
safe as
as you
you won't
won't be
be able
able to
to generate
generate it
it again.
again. We
We recommend
recommend storing
storing this
this information
information in
in a
a secure
secure password
password manager
manager such
such as
as 1password.


You should
should get
get the
the following
following credentials:


- ACCESS
ACCESS TOKEN

- CLIENT
CLIENT ID

- CLIENT
CLIENT SECRET

- NAME

- API
API PATH


#### Your
Your Store
Store hash


From your
your `API
`API Path`
Path` you
you will
will be
be able
able to
to get
get your
your `Store
`Store Hash`.
 

If you
you `API
`API Path`
Path` is
is https://api.bigcommerce.com/stores/abcdefg123/v3/
https://api.bigcommerce.com/stores/abcdefg123/v3/ then
then your
your `Store
`Store Hash`
Hash` is
is `abcdefg123`.
`abcdefg123`. You
You will
will need
need this
this later.


#### Your
Your Store
Store url


You'll also
also need
need your
your stores
stores frontend
frontend URL.
URL. This
This is
is simply
simply the
the URL
URL you
you visit
visit to
to see
see your
your store.
store. It
It will
will look
look something
something like
like `https://test-store.mybigcommerce.com/`


#### GraphQL
GraphQL Token


Your GraphQL
GraphQL Token
Token has
has to
to be
be generated.
generated. Luckily
Luckily BigCommerce
BigCommerce has
has a
a request
request runner
runner in
in their
their docs
docs that
that allow
allow you
you to
to generate
generate a
a token.


- [BigCommerce
[BigCommerce Docs](https://developer.bigcommerce.com/api-docs/storefront/graphql/graphql-storefront-api-overview#authentication)

- [BigCommerce
[BigCommerce Request
Request Runner](https://developer.bigcommerce.com/api-docs/getting-started/making-requests#making-requests)


#### GraphQL
GraphQL Url


This will
will be
be your
your store
store URL
URL with
with `graphql`
`graphql` at
at the
the end.
end. e.g.
e.g. `https://test-store.mybigcommerce.com/graphql`.


### 2.
2. Configure
Configure BigCommerce


The default
default configuration
configuration for
for BigCommerce
BigCommerce looks
looks like
like this:




"endpoints": {

"bigcommerce": {

"package": "@deity/falcon-bigcommerce-endpoints",

"config": {

"protocol": "https",

"host": null,

"accessToken": null,

"clientId": null,

"clientSecret": null,

"url": "/bc/webhook",

"webhookBaseUrl": null




"apis": {

"bigcommerce": {

"package": "./src/falcon-custom-bc-api",

"config": {

"protocol": "https",

"paymentHost": null,

"host": null,

"accessToken": null,

"clientId": null,

"clientSecret": null,

"gqlUrl": null,

"gqlToken": null,

"frontendUrl": "http://localhost:3000",

"mailerComponent": "mailer",

"paymentsComponent": "payments"






Use your
your `server/config/local.json`
`server/config/local.json` or
or your
your `environment
`environment variables`
variables` (Deity
(Deity Cloud)
Cloud) to
to add
add the
the sensitive
sensitive data
data where
where needed.



"endpoints": {

"bigcommerce": {

"config": {

"host": "api.bigcommerce.com/stores/[STORE_HASH]",

"accessToken": "[ACCESS_TOKEN]",

"clientId": "[CLIENT_ID]",

"clientSecret": "[CLIENT_SECRET]"




"apis": {

"bigcommerce": {

"config": {

"paymentHost": "payments.bigcommerce.com/stores/[STORE_HASH]/",

"host": "api.bigcommerce.com/stores/[STORE_HASH]",

"accessToken": "[ACCESS_TOKEN]",

"clientId": "[CLIENT_ID]",

"clientSecret": "[CLIENT_SECRET]",

"gqlUrl": "[STORE_URL]/graphql",

"gqlToken": "[GRAPHGL_TOKEN]"






### Deity
Deity Cloud
Cloud Environment
Environment Variables


- `BIGCOMMERCE_HOST`

- `BIGCOMMERCE_ACCESS_TOKEN`

- `BIGCOMMERCE_CLIENT_ID`

- `BIGCOMMERCE_GQL_URL`

- `BIGCOMMERCE_GQL_TOKEN`

- `BIGCOMMERCE_FRONTENT_URL`

- `SEARCH_API_NAME`:
`SEARCH_API_NAME`: If
If you
you want
want to
to use
use BigCommerce
BigCommerce for
for search
search the
the value
value shoul
shoul be
be `bigcommerce`

- `CHECKOUT_USE_EMBEDDED`:
`CHECKOUT_USE_EMBEDDED`: If
If you
you want
want to
to use
use the
the embedded
embedded checkout.


id: commercetools

title: CommerceTools
CommerceTools Integration

sidebar_label: CommerceTools



id: contentful

title: Contentful
Contentful Integration

sidebar_label: Contentful



id: stripe

title: Stripe
Stripe Payments
Payments Integration

sidebar_label: Stripe
Stripe Payments





<a href="https://stripe.com/"
href="https://stripe.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Stripe
Stripe site">

<img src="/img/docs/platform/stripe-logo.svg"
src="/img/docs/platform/stripe-logo.svg" alt="Stripe
alt="Stripe Logo"
Logo" width="200"/>





## Overview


Our integration
integration with
with Stripe
Stripe payments
payments uses
uses [https://github.com/stripe/react-stripe-js](https://github.com/stripe/react-stripe-js)
[https://github.com/stripe/react-stripe-js](https://github.com/stripe/react-stripe-js) to
to provide
provide a
a production
production ready
ready credit
credit card
card form
form in
in the
the checkout.
checkout. This
This ships
ships with
with our
our `demo-v2`
`demo-v2` example
example project.


If you
you want
want to
to see
see a
a live
live example
example head
head over
over to
to [our
[our demo
demo site](https://demo.deity.io/).


You can
can test
test transactions
transactions using
using these
these details:


- Card
Card Number:
Number: `4111
`4111 1111
1111 1111
1111 1111`

- Expiry
Expiry Date:
Date: Any
Any future
future date

- CVV:
CVV: `123`


Our integration
integration includes:


- `client/src/pages/shop/Checkout/components/payments/Stripe.js`
`client/src/pages/shop/Checkout/components/payments/Stripe.js` (Client
(Client side
side component)

- `@deity-io/falcon-stripe-plugin`(Client
`@deity-io/falcon-stripe-plugin`(Client side
side plugin)

- `@deity/falcon-payments-stripe`
`@deity/falcon-payments-stripe` (Server
(Server side
side provider)


## Supported
Supported Features


- Credit
Credit card
card payments


## Getting
Getting Started


All you
you need
need to
to do
do is
is add
add your
your Stripe
Stripe configuration.


### 1.
1. Create
Create a
a Stripe
Stripe account
account /
/ API
API keys


You can
can register
register for
for an
an account
account [here](https://dashboard.stripe.com/register).


Once you've
you've created
created an
an account
account you
you should
should be
be able
able to
to find
find your
your API
API keys
keys in
in the
the developer
developer section.


<img src="/img/docs/platform/stripe-account-1.png"
src="/img/docs/platform/stripe-account-1.png" alt="Stripe
alt="Stripe Account
Account Sidebar"
Sidebar" width="200"
width="200" style={{marginBottom:
style={{marginBottom: 20}}/>


**n.b.** Take
Take note
note of
of if
if you're
you're in
in `test`
`test` or
or `live`
`live` mode.


<img src="/img/docs/platform/stripe-account-2.png"
src="/img/docs/platform/stripe-account-2.png" alt="Stripe
alt="Stripe Account
Account API
API section"
section" style={{marginBottom:
style={{marginBottom: 20}}
20}} />


You'll need
need your
your API
API keys
keys later.


### 2.
2. Add
Add your
your Stripe
Stripe details
details to
to your
your Falcon
Falcon Platform
Platform config


If you're
you're using
using our
our example
example app
app `demo-v2`
`demo-v2` all
all you
you need
need to
to do
do now
now is
is add
add your
your Stripe
Stripe details
details to
to your
your server
server side
side config.


The Stripe
Stripe provider
provider should
should already
already exist
exist in
in your
your components->payments.





"components": {

"payments": {

"package": "@deity/falcon-payments",

"config": {

"providers": {

"stripe": {

"package": "@deity/falcon-payments/src/provider/stripe",

"config": {

"secretKey": null,

"publicKey": null










You just
just need
need to
to add
add your
your `secretKey`
`secretKey` and
and `publicKey`.
`publicKey`. These
These should
should be
be added
added in
in your
your `server/config/local.json`
`server/config/local.json` locally
locally and
and on
on your
your production
production environment
environment you
you can
can use
use these
these constants:



"secretKey": "PAYMENT_STRIPE_SECRET_KEY",

"publicKey": "PAYMENT_STRIPE_PUBLIC_KEY"



## Deity
Deity Cloud
Cloud Environment
Environment Variables


- `FALCON_PAYMENTS_ENABLED`:
`FALCON_PAYMENTS_ENABLED`: [bool]
[bool] -
- You
You need
need to
to use
use Falcon
Falcon Payments
Payments to
to use
use our
our Stripe
Stripe integration.

- `PAYMENT_STRIPE_ENABLED`:
`PAYMENT_STRIPE_ENABLED`: [bool]
[bool] -
- Enable
Enable Stripe

- `PAYMENT_STRIPE_SECRET_KEY`:
`PAYMENT_STRIPE_SECRET_KEY`: Your
Your secret
secret key

- `PAYMENT_STRIPE_PUBLIC_KEY`:
`PAYMENT_STRIPE_PUBLIC_KEY`: Your
Your public
public key


## Useful
Useful Links


- [Stripe
[Stripe Docs](https://stripe.com/docs/)

- [Stripe
[Stripe React
React Components
Components Repository](https://github.com/stripe/react-stripe-js)

- [Stripe
[Stripe Account
Account Registration](https://dashboard.stripe.com/register)

- [Our
[Our demo
demo site](https://demo.deity.io/)


id: talonone

title: TalonOne
TalonOne Integration

sidebar_label: TalonOne



id: humm

title: Humm
Humm Integration

sidebar_label: Humm



id: mollie

title: Mollie
Mollie Payments
Payments Integration

sidebar_label: Mollie
Mollie Payments





<a href="https://www.mollie.com"
href="https://www.mollie.com" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Mollie
Mollie site">

<img src="/img/docs/platform/mollie-logo.svg"
src="/img/docs/platform/mollie-logo.svg" alt="Mollie
alt="Mollie Logo"
Logo" width="200"/>





## Overview


Our integration
integration with
with Mollie
Mollie payments
payments uses
uses [https://github.com/mollie/mollie-api-node](https://github.com/mollie/mollie-api-node)
[https://github.com/mollie/mollie-api-node](https://github.com/mollie/mollie-api-node) to
to provide
provide a
a production
production ready
ready checkout
checkout that
that supports
supports multiple
multiple payment
payment methods.
methods. This
This ships
ships with
with both
both our
our example
example projects.


If you
you want
want to
to see
see a
a live
live example
example head
head over
over to
to [our
[our demo
demo site](https://demo.deity.io/).


Our integration
integration includes:


- `client/src/pages/shop/Checkout/components/payments/Mollie`
`client/src/pages/shop/Checkout/components/payments/Mollie` (Client
(Client side
side components)

- `@deity-io/falcon-mollie-plugin`(Client
`@deity-io/falcon-mollie-plugin`(Client side
side plugin)

- `@deity/falcon-payments-mollie`
`@deity/falcon-payments-mollie` (Server
(Server side
side provider)


## Supported
Supported Features


- Refunds

- Shipments

- Payment
Payment methods:

- iDEAL

- Credit
Credit Card:

- Mastercard

- Visa

- American
American Express

- Maestro

- PayPal

- Klarna
Klarna Pay
Pay Later

- SOFORT
SOFORT Banking

- Giropay

- SEPA
SEPA Bank
Bank Transfer

- Bancontact

- Gift
Gift card
card (Fashioncheque)

- Voucher

- EPS

- Przelewy24

- KBC


## Getting
Getting started


All yo
yo need
need to
to do
do is
is add
add your
your Mollie
Mollie configuration


### 1.
1. Create
Create a
a Mollie
Mollie account
account /
/ API
API keys


You can
can register
register for
for an
an account
account [here](https://www.mollie.com/dashboard/signup?lang=en).


Once you've
you've created
created an
an account
account you
you should
should be
be able
able to
to find
find your
your API
API keys
keys and
and profile
profile ID
ID in
in the
the developers
developers section.


<img src="/img/docs/platform/mollie-account-1.png"
src="/img/docs/platform/mollie-account-1.png" alt="Mollie
alt="Mollie Account
Account Api
Api keys"
keys" width="800"
width="800" style={{marginBottom:
style={{marginBottom: 20}}/>


You'll need
need your
your API
API keys
keys later.


### 2.
2. Add
Add your
your Mollie
Mollie details
details to
to your
your Falcon
Falcon Platform
Platform config


If you're
you're using
using our
our example
example app
app `demo-v2`
`demo-v2` all
all you
you need
need to
to do
do now
now is
is add
add your
your Mollie
Mollie details
details to
to your
your server
server side
side config.


The Mollie
Mollie provider
provider should
should already
already exist
exist in
in your
your components->payments.





"components": {

"payments": {

"config": {

"providers": {

"mollie": {

"enabled": true,

"package": "@deity/falcon-payments-mollie",

"config": {

"apiKey": null,

"profileId": null,

"testMode": false










You just
just need
need to
to add
add you
you `profileId`
`profileId` and
and `apiKey`.
`apiKey`. These
These should
should be
be added
added in
in your
your `server/config/local.json`
`server/config/local.json` locally
locally and
and on
on your
your production
production environment
environment you
you can
can use
use these
these constants:



"profileId": "PAYMENT_MOLLIE_PROFILE_ID",

"apiKey": "PAYMENT_MOLLIE_API_KEY"



## Deity
Deity Cloud
Cloud Environment
Environment Variables


- `FALCON_PAYMENTS_ENABLED`:
`FALCON_PAYMENTS_ENABLED`: [bool]
[bool] -
- You
You need
need to
to use
use Falcon
Falcon Payments
Payments to
to use
use our
our Mollie
Mollie integration.

- `PAYMENT_MOLLIE_ENABLED`:
`PAYMENT_MOLLIE_ENABLED`: [bool]
[bool] -
- Enable
Enable Mollie

- `PAYMENT_MOLLIE_PROFILE_ID`:
`PAYMENT_MOLLIE_PROFILE_ID`: Your
Your profile
profile id

- `PAYMENT_MOLLIE_API_KEY`:
`PAYMENT_MOLLIE_API_KEY`: Your
Your mollie
mollie key

- `PAYMENT_MOLLIE_TEST_MODE`:
`PAYMENT_MOLLIE_TEST_MODE`: [bool]
[bool] -
- Whether
Whether mollie
mollie is
is running
running in
in test
test mode


- `PAYMENT_MOLLIE_METHOD_PAYPAL`:
`PAYMENT_MOLLIE_METHOD_PAYPAL`: [bool]
[bool] -
- Whether
Whether the
the PayPal
PayPal payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_IDEAL`:
`PAYMENT_MOLLIE_METHOD_IDEAL`: [bool]
[bool] -
- Whether
Whether the
the iDEAL
iDEAL payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_CREDITCARD`:
`PAYMENT_MOLLIE_METHOD_CREDITCARD`: [bool]
[bool] -
- Whether
Whether the
the credit
credit card
card payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_KLARNAPAYLATER`:
`PAYMENT_MOLLIE_METHOD_KLARNAPAYLATER`: [bool]
[bool] -
- Whether
Whether the
the Klarna
Klarna paylater
paylater payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_SOFORT`:
`PAYMENT_MOLLIE_METHOD_SOFORT`: [bool]
[bool] -
- Whether
Whether the
the Sofort
Sofort payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_GIFTCARD`:
`PAYMENT_MOLLIE_METHOD_GIFTCARD`: [bool]
[bool] -
- Whether
Whether the
the Giftcard
Giftcard payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_GIROPAY`:
`PAYMENT_MOLLIE_METHOD_GIROPAY`: [bool]
[bool] -
- Whether
Whether the
the Giropay
Giropay payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_VOUCHER`:
`PAYMENT_MOLLIE_METHOD_VOUCHER`: [bool]
[bool] -
- Whether
Whether the
the Voucher
Voucher payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_BANCONTACT`:
`PAYMENT_MOLLIE_METHOD_BANCONTACT`: [bool]
[bool] -
- Whether
Whether the
the Bancontact
Bancontact payment
payment method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_BANKTRANSFER`:
`PAYMENT_MOLLIE_METHOD_BANKTRANSFER`: [bool]
[bool] -
- Whether
Whether SEPA
SEPA Bank
Bank Transfer
Transfer method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_EPS`:
`PAYMENT_MOLLIE_METHOD_EPS`: [bool]
[bool] -
- Whether
Whether EPS
EPS method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_PRZELEWY24`:
`PAYMENT_MOLLIE_METHOD_PRZELEWY24`: [bool]
[bool] -
- Whether
Whether Przelewy24
Przelewy24 method
method is
is enabled

- `PAYMENT_MOLLIE_METHOD_KBC`:
`PAYMENT_MOLLIE_METHOD_KBC`: [bool]
[bool] -
- Whether
Whether KBC
KBC method
method is
is enabled


## Useful
Useful Links


- [Mollie
[Mollie Docs](https://www.mollie.com/nl/developers)

- [Mollie
[Mollie Components](https://docs.mollie.com/guides/mollie-components/overview)

- [Mollie
[Mollie Account
Account Registration](https://www.mollie.com/dashboard/signup?lang=en)

- [Our
[Our demo
demo site](https://demo.deity.io/)


id: wordpress

title: Wordpress
Wordpress Integration

sidebar_label: Wordpress





<a href="https://wordpress.com/"
href="https://wordpress.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Wordpress
Wordpress site">

<img src="/img/docs/platform/wordpress-logo.svg"
src="/img/docs/platform/wordpress-logo.svg" alt="Wordpress
alt="Wordpress Logo"
Logo" width="200"/>





## Overview


Our Wordpress
Wordpress integration
integration comes
comes with
with both
both our
our examples
examples apps,
apps, `demo-v1`
`demo-v1` and
and `demo-v2`.


It works
works using
using our
our Wordpress
Wordpress Plugin
Plugin to
to extend
extend and
and add
add API
API endpoints.


<img src="/img/docs/platform/wordpress-admin-1.png"
src="/img/docs/platform/wordpress-admin-1.png" alt="Wordpress
alt="Wordpress Admin"
Admin" width="500"
width="500" style={{
style={{ marginBottom:
marginBottom: 20
20 }}
}} />


## Supported
Supported Features


Using `demo-v1`
`demo-v1` we
we have
have full
full support
support (including
(including components
components and
and routes)
routes) for
for the
the following
following features:


- Blog
Blog Posts

- Blog
Blog Categories

- Pages


See our
our [demo](https://demo.deity.io/blog).



## Getting
Getting Started


### 1.
1. Prerequisites


You must
must have
have a
a wordpress
wordpress instance
instance up
up and
and running.


### 2.
2. Install
Install our
our plugin


Now you
you must
must install
install our
our Wordpress
Wordpress Plugin.
Plugin. If
If you
you download
download the
the code
code into
into your
your `plugins`
`plugins` directory
directory you
you should
should then
then be
be able
able to
to **activate**
**activate** it
it in
in the
the admin.


<img src="/img/docs/platform/wordpress-admin-2.png"
src="/img/docs/platform/wordpress-admin-2.png" alt="Wordpress
alt="Wordpress Admin"
Admin" width="300"
width="300" style={{marginBottom:
style={{marginBottom: 20}}/>


If it's
it's working
working you
you should
should see
see our
our handy
handy 'Clean
'Clean API
API cache'
cache' button
button in
in your
your admin
admin panel.


### 3.
3. Create
Create your
your Falcon
Falcon app


Using `create-falcon-app`
`create-falcon-app` you
you now
now need
need to
to create
create a
a falcon
falcon instance.
instance. We
We recommend
recommend using
using `demo-v2`
`demo-v2` as
as a
a starting
starting point.


### 4.
4. Add
Add your
your Wordpress
Wordpress configuration


All you
you need
need to
to do
do is
is add
add your
your sites
sites URL
URL and
and you're
you're away.




"apis": {

"wordpress": {

"config": {

"host": "WORDPRESS_API_HOST",

"protocol": "WORDPRESS_API_PROTOCOL",

"apiPrefix": "WORDPRESS_API_PREFIX"








## Deity
Deity Cloud
Cloud Environment
Environment Variables


- `WORDPRESS_API_HOST`
`WORDPRESS_API_HOST` -
- defaults
defaults to
to our
our demo
demo instance
instance `wordpress.deity.io`

- `WORDPRESS_API_PROTOCOL`
`WORDPRESS_API_PROTOCOL` -
- defaults
defaults to
to `https`

- `WORDPRESS_API_PREFIX`
`WORDPRESS_API_PREFIX` -
- defaults
defaults to
to `/wp-json/wp/v2`



### 5.
5. Finished


That's it.
it. If
If you're
you're using
using our
our example
example app
app (`demo-v2`)
(`demo-v2`) then
then you
you should
should see
see your
your latest
latest posts
posts appear
appear on
on your
your Falcon
Falcon Platform
Platform apps
apps homepage.


id: shopware

title: Shopware
Shopware Integration

sidebar_label: Shopware



id: migration-guide

title: Migration
Migration guide

sidebar_label: Migration
Migration guide

enterprise_only: true



import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>



id: tutorials

title: Tutorials

sidebar_label: Tutorials



## Tutorials


id: faq

title: F.A.Q.

sidebar_label: F.A.Q.



## Faq


id: packages

title: Our
Our Packages

sidebar_label: Our
Our Packages



Falcon Platform
Platform Ships
Ships with
with various
various `@deity`
`@deity` packages.


- [create-falcon-app](create-falcon-app)

- [falcon-blog-data](falcon-blog-data)

- [falcon-blog-extension](falcon-blog-extension)

- [falcon-client](falcon-client)

- [falcon-data](falcon-data)

- [falcon-dev-tools/babel-preset-falcon-client](babel-preset-falcon-client)

- [falcon-dev-tools/eslint-config-falcon](eslint-config-falcon)

- [falcon-dev-tools/falcon-i18n-webpack-plugin](falcon-i18n-webpack-plugin)

- [falcon-dev-tools/falcon-scripts](falcon-scripts)

- [falcon-dev-tools/normal-module-override-webpack-plugin](normal-module-override-webpack-plugin)

- [falcon-errors](falcon-errors)

- [falcon-front-kit](falcon-front-kit)

- [falcon-i18n](falcon-i18n)

- [falcon-logger](falcon-logger)

- [falcon-magento2-api](falcon-magento2-api)

- [falcon-payment-plugin](falcon-payment-plugin)

- [falcon-server-env](falcon-server-env)

- [falcon-server](falcon-server)

- [falcon-service-worker](falcon-service-worker)

- [falcon-shop-data](falcon-shop-data)

- [falcon-shop-extension](falcon-shop-extension)

- [falcon-theme-editor](falcon-theme-editor)

- [falcon-ui-kit](falcon-ui-kit)

- [falcon-ui](falcon-ui)

- [falcon-wordpress-api](falcon-wordpress-api)

- [payment/falcon-adyen-plugin](falcon-adyen-plugin)

- [payment/falcon-paypal-plugin](falcon-paypal-plugin)


There are
are a
a few
few naming
naming convensions
convensions that
that will
will help
help you
you understand
understand each
each package.


- `[PACKAGE]-[SERVICE]-api`
`[PACKAGE]-[SERVICE]-api` Packages
Packages named
named this
this way
way connect
connect to
to APIs.
APIs. An
An example
example is
is `falcon-wordpress-api`

- `[PACKAGE]-[TYPE]-extension`
`[PACKAGE]-[TYPE]-extension` These
These packages
packages handle
handle data
data from
from APIs.
APIs. `TYPE`
`TYPE` referes
referes to
to the
the data
data type
type e.g.
e.g. `blog`
`blog` or
or `shop`.

- `[PACKAGE]-[TYPE]-data`
`[PACKAGE]-[TYPE]-data` These
These packages
packages handle
handle the
the data
data from
from `extension`
`extension` packages.
packages. They
They usually
usually contain
contain components
components that
that pass
pass a
a GraphQL
GraphQL query
query to
to the
the extension
extension package.
package. `TYPE`
`TYPE` is
is the
the data
data type,
type, e.g.
e.g. `blog`.

- `[PACKAGE]-[TYPE/SERVICE]-plugin`
`[PACKAGE]-[TYPE/SERVICE]-plugin` These
These packages
packages usually
usually extend
extend their
their corresponding
corresponding extension.
 

id: geolocation-extension

title: Geo
Geo Location
Location extension

sidebar_label: Geo
Geo Location
Location extension

enterprise_only: true



import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-geo-location-extension"
name="@deity/falcon-geo-location-extension" />
 




id: search-extension

title: Search
Search extension

sidebar_label: Search
Search extension

enterprise_only: true



import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-search-extension"
name="@deity/falcon-search-extension" />
 


id: shop-extension

title: Shop
Shop extension
 
sidebar_label: Shop
Shop extension

enterprise_only: true



import CodePackage
CodePackage from
from '@site/src/components/CodePackage';

import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-shop-extension"
name="@deity/falcon-shop-extension" />
 

This extension
extension provides
provides basic
basic features
features for
for a
a webshop
webshop implementation:


- Products

- Categories

- Customer
Customer area

- Checkout

- Cart
Cart etc.


## Available
Available integrations


- [BigCommerce
[BigCommerce module](../integration/bigcommerce/overview)

- [CommerceTools
[CommerceTools module](../integration/commercetools)

- [Magento2
[Magento2 module](../integration/magento2/overview)


## Usage


To add
add this
this extension
extension to
to your
your Falcon-based
Falcon-based app
app install
install it
it in
in the
the server
server directory:







# installs
installs shop
shop extension

npm install
install --save
--save @deity/falcon-shop-extension






# installs
installs shop
shop extension

yarn add
add @deity/falcon-shop-extension





and add
add extension
extension and
and module
module (in
(in this
this example
example it's
it's [Magento2
[Magento2 module](../../integration/magento2/overview))
module](../../integration/magento2/overview)) to
to the
the configuration
configuration of
of the
the server:




"extensions": {

// enable
enable shop
shop extension
extension by
by adding
adding it
it to
to "extensions"
"extensions" object

"shop": {

"package": "@deity/falcon-shop-extension",

"module": "magento2"
"magento2" //
// must
must match
match an
an module
module name
name set
set in
in "modules"
"modules" object
object below



"modules": {

"magento2": {
{ //
// must
must match
match "config.module"
"config.module" from
from shop-extension
shop-extension configuration

"package": "@deity/falcon-magento2-module",

"config": {

// magneto2
magneto2 specific
specific configuration
configuration goes
goes here







id: about

title: Extensions
Extensions in
in Falcon
Falcon Server

sidebar_label: Introduction

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


Falcon-Server provides
provides its
its own
own base
base GraphQL
GraphQL Schema,
Schema, that
that defines
defines data
data types,
types, queries

and mutations,
mutations, so
so every
every Extension
Extension could
could use
use its
its types
types and
and extend
extend them.


Currently, Deity
Deity provides
provides the
the following
following list
list of
of officially
officially supported
supported extensions:


- [Shop
[Shop Extension](./shop-extension)

- [Blog
[Blog Extension](./blog-extension)

- [Search
[Search Extension](./search-extension)

- [GeoLocation
[GeoLocation Extension](./geolocation-extension)


Each of
of these
these can
can of
of course
course be
be extended
extended with
with custom
custom features
features that
that are
are specific
specific for
for particular
particular implementation.


## Extending
Extending GraphQL
GraphQL context
context with
with extension


Besides providing
providing schema
schema for
for GraphQL
GraphQL server,
server, extensions
extensions can
can also
also provide
provide function
function that
that modifies
modifies GraphQL
GraphQL execution
execution context
context which
which is
is available
available in
in resolvers.


To do
do so,
so, the
the extension
extension must
must return
return `context`
`context` property
property which
which is
is an
an object
object or
or function
function that
that creates
creates object.
object. That
That object
object will
will be
be merged
merged with
with default
default context
context values
values and
and context
context values
values returned
returned from
from other
other extensions.


This is
is ApolloServer's
ApolloServer's feature
feature exposed
exposed by
by Falcon
Falcon Server
Server and
and you
you can
can read
read more
more about
about it
it [here](https://www.apollographql.com/docs/apollo-server/data/resolvers/#the-context-argument)


Code snipped
snipped below
below shows
shows the
the basic
basic usage.



// example
example extension
extension that
that adds
adds "key":
"key": "value"
"value" pair
pair to
to the
the GraphQL
GraphQL context

module.exports =
= ()
() =>
=> ({

context: ({
({ ctx
ctx })
}) =>
=> {

return {

key: 'value'





// then
then in
in resolver's
resolver's code
code it
it will
will be
be available
available under
under context.key


someQueryResolver: (obj,
(obj, input,
input, context,
context, info)
info) {

console.log('Key value:',
value:', context.key);






Internally for
for example
example [Falcon
[Falcon GeoLocation
GeoLocation Extension](./geolocation-extension)
Extension](./geolocation-extension) uses
uses that
that mechanism
mechanism to
to inject
inject geo
geo location
location data
data to
to each
each request's
request's context.



<!-- ** configurationconfiguration -- ThereThere areare somesome exceptionsexceptions toto thisthis e.g.e.g. searchsearch modulesmodules shouldshould bebe configuredconfigured last.last. -->
id: blog-extension

title: Blog
Blog extension

sidebar_label: Blog
Blog extension

enterprise_only: true



import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-blog-extension"
name="@deity/falcon-blog-extension" />
 


This extension
extension provides
provides basic
basic features
features for
for blog
blog implementation:


- Posts

- Pages

- Categories

- Authors


## Available
Available integrations


List of
of modules
modules (integrations)
(integrations) that
that can
can be
be used
used with
with this
this extension:

- [Contentful
[Contentful module](../modules/contentful-module)

- [WordPress
[WordPress module](../modules/wordpress-module)


## Usage


To add
add this
this extension
extension to
to your
your Falcon-based
Falcon-based app
app install
install it
it in
in the
the server
server directory:







# installs
installs blog
blog extension

npm install
install --save
--save @deity/falcon-blog-extension






# installs
installs blog
blog extension

yarn add
add @deity/falcon-blog-extension





and add
add extension
extension and
and module
module (in
(in this
this example
example it's
it's [WordPress
[WordPress module](../modules/wordpress-module))
module](../modules/wordpress-module)) to
to the
the configuration
configuration of
of the
the server:




"extensions": {

// enable
enable blog
blog extension
extension by
by adding
adding it
it under
under "extensions"

"blog": {

"package": "@deity/falcon-blog-extension",

"module": "foo-module",
"foo-module", //
// must
must match
match an
an API
API Provider
Provider name
name set
set in
in "apis"
"apis" object
object below

"config": {




"modules": {

"wordpress": {
{ //
// must
must match
match "extension.module"
"extension.module" from
from blog
blog extension
extension configuration

"package": "@deity/falcon-wordpress-module",

"config": {

"host": "your-wordpress-host.com"






id: cli-commands

title: CLI
CLI Commands

sidebar_label: CLI
CLI Commands



From the
the `server`
`server` directory
directory you
you can
can run
run the
the following
following commands
commands (in
(in your
your terminal):


import Tabs
Tabs from
from '@theme/Tabs';

import TabItem
TabItem from
from '@theme/TabItem';


### Start




{ label:
label: 'NPM',
'NPM', value:
value: 'npm',
'npm', },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn',
'yarn', }



<TabItem value="npm">



npm start




<TabItem value="yarn">



yarn start






This will
will run
run Falcon
Falcon Server
Server in
in development
development mode.



- `--inspect=[host:port]`
`--inspect=[host:port]` -
- To
To debug
debug the
the node
node server.
server. This
This will
will start
start the
the node
node server
server and
and enable
enable the
the inspector
inspector agent.
agent. The
The =[host:port]
=[host:port] is
is optional
optional and
and defaults
defaults to
to `=127.0.0.1:9229`.
`=127.0.0.1:9229`. <a
<a href="https://nodejs.org/en/docs/guides/debugging-getting-started/"
href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">See
noreferrer">See the
the Node.js
Node.js debugging
debugging guide
guide for
for more
more information</a>.

- `--inspect-brk=[host:port]`
`--inspect-brk=[host:port]` -
- This
This is
is the
the same
same as
as --inspect,
--inspect, but
but will
will also
also break
break before
before user
user code
code starts.
starts. (to
(to give
give a
a debugger
debugger time
time to
to attach
attach before
before early
early code
code runs).


**Useful Variants**

- `start:dbg`
`start:dbg` -
- An
An alias
alias for
for `--inspect`

- `start:dbg-brk`
`start:dbg-brk` -
- An
An alias
alias for
for `--inspect-brk`


### Build


Builds the
the app
app for
for production,
production, and
and outputs
outputs to
to the
the `./build`
`./build` folder.


The build
build is
is minified
minified and
and the
the filenames
filenames include
include the
the hashes.
hashes. Your
Your app
app is
is ready
ready to
to be
be deployed!





{ label:
label: 'NPM',
'NPM', value:
value: 'npm',
'npm', },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn',
'yarn', }



<TabItem value="npm">



npm build:prod




<TabItem value="yarn">



yarn build:prod






### Size


Runs an
an interactive
interactive zoomable
zoomable treemap
treemap of
of output
output files
files to
to visualize
visualize their
their size.
size. Report
Report will
will be
be automatically
automatically open
open in
in default
default browser
browser at
at `http://localhost:8888`.




{ label:
label: 'NPM',
'NPM', value:
value: 'npm',
'npm', },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn',
'yarn', }



<TabItem value="npm">



npm size




<TabItem value="yarn">



yarn size






### Restart


If your
your application
application is
is running,
running, and
and you
you need
need to
to manually
manually restart
restart your
your server,
server, you
you do
do not
not need
need to
to completely
completely kill
kill and
and rebundle
rebundle your
your application.
application. Instead
Instead you
you can
can just
just type
type `rs`
`rs` and
and press
press enter
enter in
in terminal.






id: link-repository

title: Link
Link Your
Your Repository

sidebar_label: 3.
3. Link
Link Repository



import Content
Content from
from "../../console/getting-started/link-repository.mdx"


<Content />
id: create-application

title: Create
Create Deity
Deity Application

sidebar_label: 2.
2. Create
Create Application


import Content
Content from
from "../../console/getting-started/create-application.mdx"


<Content />
id: access-packages

title: Access
Access Deity
Deity Packages

sidebar_label: 1.
1. Access
Access Npm
Npm Packages



import Content
Content from
from "../../console/getting-started/access-packages.mdx"


<Content />


id: configuration

title: Configuration
Configuration in
in Falcon
Falcon Server

sidebar_label: Configuration

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


Falcon Client
Client and
and Falcon
Falcon Server
Server configs
configs work
work in
in the
the same
same way.
way. You
You can
can find
find the
the general
general description
description of
of the
the configuration
configuration options
options [here](../general-concepts/configuration).


Once configuration
configuration is
is added
added to
to Falcon
Falcon Server
Server you
you can
can either:


### 1.
1. load
load configuration
configuration via
via config
config package
package (not
(not recommended)


This is
is the
the easiest
easiest step
step but
but it's
it's not
not recommended.
recommended. It
It should
should be
be used
used if
if you
you need
need to
to access
access configuration
configuration option
option **from
**from different
different section
section of
of the
the configuration
configuration that
that your
your module's
module's configuration
configuration is
is stored**.


To do
do that
that you
you just
just need
need to
to require
require 'config'
'config' package:



const config
config =
= require('config');


// log
log entire
entire configuration
configuration of
of Falcon
Falcon Server





While this
this can
can be
be used
used it's
it's not
not recommended
recommended as
as it
it causes
causes dependencies
dependencies between
between configuration
configuration structure
structure and
and behavior/code
behavior/code of
of your
your module
module or
or extension.



### 2.
2. inject
inject configuration
configuration with
with injectConfig
injectConfig decorator


With `injectConfig`
`injectConfig` decorator
decorator you
you can
can inject
inject configuration
configuration of
of entire
entire Falcon
Falcon Server
Server without
without explicit
explicit call
call to
to `config`
`config` module.
 
That method
method is
is better
better than
than direct
direct usage
usage of
of `config`
`config` module,
module, but
but in
in most
most cases
cases it's
it's also
also not
not recommended
recommended as
as you
you get
get entire
entire configuration,
configuration, while
while you
you should
should be
be relying
relying only
only on
on configuration
configuration specific
specific for
for your
your module.


The exception
exception from
from that
that rule
rule is
is that
that you'd
you'd like
like to
to know
know if
if e.g.
e.g. debug
debug mode
mode is
is enabled,
enabled, like
like in
in the
the example
example below:



const {
{ injectable
injectable }
} =
= require('inversify');

const {
{ injectConfig
injectConfig }
} =
= require('@deity/falcon-server-env');



export class
class MyCustomModule
MyCustomModule {

constructor(@injectConfig() config)
config) {

// config
config is
is the
the entire
entire configuration
configuration of
of Falcon
Falcon Server

console.log('Debug is
is enabled:',
enabled:', config.debug);





### 3.
3. inject
inject configuration
configuration with
with injectModuleConfig
injectModuleConfig decorator
decorator (recommended)


If your
your module
module has
has a
a configuration,
configuration, let's
let's say
say it's
it's described
described in
in configuration
configuration files
files in
in the
the following
following way:





"modules": {


"my-custom-module": {

"package": "./src/my-custom-module",

"config": {

"foo": "foo-value",

"bar": "bar-value"







then you
you can
can inject
inject the
the configuration
configuration of
of that
that particular
particular module
module in
in the
the following
following way:



const {
{ injectable
injectable }
} =
= require('inversify');

const {
{ injectModuleConfig
injectModuleConfig }
} =
= require('@deity/falcon-server-env');



export class
class MyCustomModule
MyCustomModule {

protected config;


constructor(@injectModuleConfig('my-custom-module') config)
config) {

// here
here config
config contains
contains only
only values
values from
from "modules.my-custom-module.config"

this.config =
= config;







that way
way you
you get
get only
only configuration
configuration of
of your
your module
module and
and nothing
nothing else.


id: sign-up

title: Sign
Sign Up

sidebar_label: Sign
Sign Up



import Content
Content from
from "../../console/getting-started/sign-up.mdx"


<Content />
id: new-project

title: Start
Start developing
developing your
your project

sidebar_label: Start
Start Developing



import Content
Content from
from "../../console/getting-started/new-project.mdx"


<Content />
id: installation

sidebar_label: Installation

description: How
How to
to get
get started
started with
with Falcon
Falcon Platform





## Basic
Basic setup
setup steps


Getting started
started with
with Falcon
Falcon Platform
Platform can
can be
be broken
broken down
down into
into a
a few
few simple
simple steps.


1. [Prerequisites](../../platform/getting-started/prerequisites)

2. [Setup
[Setup Dcloud](../../platform/getting-started/dcloud)

3. [Get
[Get access
access to
to our
our private
private NPM
NPM packages](../../platform/getting-started/npm)

4. [Create
[Create and
and configure
configure your
your app](c../../platform/getting-started/reate)

5. [Create
[Create and
and configure
configure your
your code
code repository](../../platform/getting-started/repository)

6. [Configure
[Configure your
your environment](../../platform/getting-started/configure)

7. [Manage
[Manage and
and deploy
deploy your
your app](../../platform/deployment/overview)


id: getting-started

title: Getting
Getting Started

description: How
How to
to get
get started
started with
with Falcon
Falcon Platform



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem,
TabItem, ChangelogItem
ChangelogItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';


<p className="desc
className="desc pb20">

From the
the Deity
Deity Console,
Console, you
you can
can manage
manage and
and configure
configure the
the entire
entire Deity
Deity platform
platform stack.
stack. Manage
Manage your
your storefront
storefront domains,
domains, configure
configure third
third party
party integrations
integrations with
with Deity
Deity composer,
composer, or
or setup
setup payment
payment gateway
gateway business
business rules,
rules, all
all from
from one
one place
place –
– the
the Console.




<div className="mb100">

	<Card isPadding={false}>

	 <div
<div className="flex">

	 <CardContent>

	 <h2>Sign
<h2>Sign up
up for
for Cloud
Cloud Console</h2>

	 <div
<div className="mb20">

	 <p
<p >

	 Manage
Manage your
your subscriptions,
subscriptions, users,
users, deployments,
deployments, integrations
integrations and
and more
more with
with our
our web-based
web-based application.

	 </p>

	 </div>
  
	 <Button
<Button variant="contained"
variant="contained" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

	 Sign
Sign up
up for
for an
an account
account &nbsp;

	 <svg
<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

				<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

				<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

				<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

				<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>


	 </Button>&nbsp;
</Button>&nbsp; &nbsp;
 
	 <Button
<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud"
href="https://console.deity.cloud" target="_blank">

	 Sign
Sign in
in &nbsp;

	 	<svg
	<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

			<path d="M9.17969
d="M9.17969 16.6016L13.2812
16.6016L13.2812 12.5L9.17969
12.5L9.17969 8.39844"
8.39844" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

			<path d="M2.34375
d="M2.34375 12.5H13.2812"
12.5H13.2812" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

			<path d="M13.2812
d="M13.2812 3.90625H18.75C18.9572
3.90625H18.75C18.9572 3.90625
3.90625 19.1559
19.1559 3.98856
3.98856 19.3024
19.3024 4.13507C19.4489
4.13507C19.4489 4.28159
4.28159 19.5312
19.5312 4.4803
4.4803 19.5312
19.5312 4.6875V20.3125C19.5312
4.6875V20.3125C19.5312 20.5197
20.5197 19.4489
19.4489 20.7184
20.7184 19.3024
19.3024 20.8649C19.1559
20.8649C19.1559 21.0114
21.0114 18.9572
18.9572 21.0938
21.0938 18.75
18.75 21.0938H13.2812"
21.0938H13.2812" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>



	 </CardContent>

	 </div>





## Start
Start Developing


import Content
Content from
from "./getting-started/new-project.mdx"


<Content />


id: integrations

title: Integrations

hide_table_of_contents: true


import Content
Content from
from "../integrations.mdx"


<Content />
id: data-sources

title: Data
Data Sources
Sources in
in Falcon
Falcon Server

sidebar_label: Data
Data Sources

enterprise_only: true



import Tabs
Tabs from
from '@theme/Tabs';

import TabItem
TabItem from
from '@theme/TabItem';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>



[Apollo Server
Server documentation](https://www.apollographql.com/docs/apollo-server/data/data-sources/)
documentation](https://www.apollographql.com/docs/apollo-server/data/data-sources/) says:


> Data
Data sources
sources are
are classes
classes that
that Apollo
Apollo Server
Server can
can use
use to
to encapsulate
encapsulate fetching
fetching data
data from
from a
a particular
particular source,
source, such
such as
as a
a database
database or
or a
a REST
REST API.
API. These
These classes
classes help
help handle
handle caching,
caching, deduplication,
deduplication, and
and errors
errors while
while resolving
resolving operations.


Falcon Server
Server Data
Data Sources
Sources extends
extends [Apollo
[Apollo Server
Server Data
Data Sources](https://www.apollographql.com/docs/apollo-server/data/data-sources/)
Sources](https://www.apollographql.com/docs/apollo-server/data/data-sources/) this
this is
is why
why if
if you
you are
are not
not familiar
familiar with
with DataSources
DataSources concept
concept we
we strongly
strongly recommend
recommend learning
learning that
that topic
topic first.


In Falcon
Falcon ecosystem
ecosystem Data
Data Sources
Sources are
are used
used to
to fetch
fetch data
data from
from all
all the
the back-ends,
back-ends, e.g.
e.g. if
if you
you have
have integration
integration with
with BigCommerce
BigCommerce then
then [BigCommerce
[BigCommerce Module](../bigcommerce-module)
Module](../bigcommerce-module) exposes
exposes `FalconBigCommerceDataSource`
`FalconBigCommerceDataSource` which
which implements
implements the
the communication
communication layer
layer between
between Falcon
Falcon and
and BigCommerce.
BigCommerce. It
It contains
contains authentication
authentication and
and authorization
authorization logic
logic and
and does
does everything
everything that's
that's needed
needed to
to fetch
fetch the
the required
required data.


The same
same applies
applies to
to all
all the
the integrations
integrations -
- there's
there's always
always an
an integration-specific
integration-specific Data
Data Source
Source that
that realizes
realizes the
the communication.


Falcon Server
Server will
will treat
treat particular
particular service
service as
as Data
Data Source
Source until
until it
it extends
extends [Apollo's
[Apollo's abstract
abstract Data
Data Source
Source class](https://github.com/apollographql/apollo-server/blob/main/packages/apollo-datasource/src/index.ts).
class](https://github.com/apollographql/apollo-server/blob/main/packages/apollo-datasource/src/index.ts). However,
However, the
the Falcon
Falcon Server
Server expects
expects that
that concrete
concrete DataSource
DataSource has
has an
an additional
additional `name`
`name` property.
property. This
This is
is why
why each
each DataSource
DataSource registered
registered in
in Falcon
Falcon Server
Server needs
needs to:


Falcon Server
Server will
will treat
treat particular
particular service
service as
as Data
Data Source
Source [Apollo's
[Apollo's abstract
abstract Data
Data Source
Source class](https://github.com/apollographql/apollo-server/blob/main/packages/apollo-datasource/src/index.ts),
class](https://github.com/apollographql/apollo-server/blob/main/packages/apollo-datasource/src/index.ts), but
but expects
expects that
that new
new DataSource
DataSource has
has an
an additional
additional `name`
`name` property.
property. This
This is
is why
why each
each DataSource
DataSource registered
registered in
in Falcon
Falcon Server
Server needs
needs to:


- extends
extends [Apollo's
[Apollo's abstract
abstract Data
Data Source
Source class](https://github.com/apollographql/apollo-server/blob/main/packages/apollo-datasource/src/index.ts)

- implements
implements Falcon
Falcon Server
Server `IDataSource`
`IDataSource` interface
interface which
which is
is defined
defined as
as follows



import {
{ DataSourceConfig
DataSourceConfig }
} from
from 'apollo-datasource';


export interface
interface IDataSource<TGqlResolverContext
IDataSource<TGqlResolverContext extends
extends GraphQLContext
GraphQLContext =
= GraphQLContext>
GraphQLContext> {

name: string;


initialize?(config: DataSourceConfig<TGqlResolverContext>):
DataSourceConfig<TGqlResolverContext>): void
void |
| Promise<void>;




`@deity/falcon-server-env` package
package exports
exports couple
couple of
of base
base classes,
classes, which
which meets
meets above
above conditions
conditions by
by default.
default. You
You should
should extends
extends them
them in
in order
order to
to implement
implement your
your custom
custom DataSource.
DataSource. But
But it
it is
is fair
fair enough
enough to
to use
use any
any other,
other, found
found on
on npm
npm registry,
registry, please
please bear
bear in
in mind
mind that
that those
those need
need to
to implement
implement the
the `IDataSource`
`IDataSource` interface
interface too.
too. Full
Full list
list of
of base
base `DataSource`
`DataSource` classes:


- [`DataSource`](#datasource)

- [`RESTDataSource`](#restdatasource)

- `ApiDataSource`
`ApiDataSource` -
- deprecated,
deprecated, use
use `RESTDataSource`
`RESTDataSource` instead

- [`GqlDataSource`](#gqldatasource)


## `DataSource`


The very
very base
base class
class of
of Falcon
Falcon Server
Server DataSource.



import {
{ DataSource
DataSource as
as ApolloDataSource
ApolloDataSource }
} from
from 'apollo-datasource';

import {
{ injectable
injectable }
} from
from 'inversify';



export abstract
abstract class
class DataSource
DataSource extends
extends ApolloDataSource
ApolloDataSource implements
implements IDataSource
IDataSource {

public name:
name: string;


constructor(name: string)
string) {



this.name =
= name;





- `name:
`name: string`
string` -
- defines
defines the
the name
name of
of a
a particular
particular DataSource.
DataSource. This
This value
value is
is used
used as
as a
a key
key in
in GraphQL
GraphQL resolver
resolver context
context DataSources
DataSources map
map and
and **have
**have to
to be
be unique**.


## `RESTDataSource`


Base Data
Data Source
Source class
class which
which realizes
realizes communication
communication with
with any
any REST
REST based
based API.


Deity Falcon
Falcon provides
provides also
also its
its own
own Data
Data Source
Source abstract
abstract class
class `RESTDataSource`.
`RESTDataSource`. That
That class
class extends
extends [RESTDataSource
[RESTDataSource class](https://github.com/apollographql/apollo-server/tree/main/packages/apollo-datasource-rest)
class](https://github.com/apollographql/apollo-server/tree/main/packages/apollo-datasource-rest) provided
provided by
by Apollo.

This Data
Data Source
Source is
is a
a recommended
recommended base
base class
class for
for data
data sources
sources that
that work
work as
as resolvers
resolvers (see
(see [resolvers
[resolvers auto-binding](#resolvers-auto-binding)
auto-binding](#resolvers-auto-binding) section
section above).


Constructor definition
definition looks
looks as
as follow



constructor({ name,
name, restDataSourceFetch,
restDataSourceFetch, config
config }:
}: RESTDataSourceConstructorParams)



where `RESTDataSourceConstructorParams`
`RESTDataSourceConstructorParams` is:


- `name:
`name: string`
string` -
- default
default name
name is
is taken
taken from
from class
class constructor

- `restDataSourceFetch:
`restDataSourceFetch: typeof
typeof fetch`
fetch` -
- node
node fetch
fetch implementation

- `config?:
`config?: DataSourceConfiguration`
DataSourceConfiguration` -
- module
module configuration


This class
class provides
provides also
also a
a set
set of
of features
features that
that make
make implementation
implementation of
of custom
custom data
data sources
sources for
for Falcon
Falcon Server
Server easier.


Typical properties:


- `name:
`name: string`
string` -
- data
data source
source name

- `config:
`config: DataSourceConfiguration`

- `perPage:
`perPage: number`

- `logger:
`logger: typeof
typeof Logger`
Logger` -
- pre-configured
pre-configured logger

- `restDataSourceFetch:
`restDataSourceFetch: typeof
typeof fetch`

- `cache?:
`cache?: ICache`
ICache` -
- gave
gave access
access to
to cache


Dedicated methods
methods which
which cover
cover typical
typical HTTP
HTTP verbs:


- `get<TResult
`get<TResult =
= any>(path:
any>(path: string,
string, params?:
params?: URLSearchParamsInit,
URLSearchParamsInit, init?:
init?: ContextRequestInit):
ContextRequestInit): Promise<TResult>`

- `post<TResult
`post<TResult =
= any>(path:
any>(path: string,
string, body?:
body?: any,
any, init?:
init?: ContextRequestInit):
ContextRequestInit): Promise<TResult>`

- `patch<TResult
`patch<TResult =
= any>(path:
any>(path: string,
string, body?:
body?: any,
any, init?:
init?: ContextRequestInit):
ContextRequestInit): Promise<TResult>`

- `put<TResult
`put<TResult =
= any>(path:
any>(path: string,
string, body?:
body?: any,
any, init?:
init?: ContextRequestInit):
ContextRequestInit): Promise<TResult>`

- `delete<TResult
`delete<TResult =
= any>(path:
any>(path: string,params?:
string,params?: URLSearchParamsInit,init?:
URLSearchParamsInit,init?: ContextRequestInit):
ContextRequestInit): Promise<TResult>`


Others methods
methods which
which allows
allows you
you to
to implement
implement advanced
advanced features
features e.g.
e.g. authorize
authorize requests,
requests, dynamic
dynamic routing,
routing, extension
extension scopes:


- `get
`get fetchUrlPriority()`

- `getFetchUrlPriority?(url:
`getFetchUrlPriority?(url: string):
string): number`
number` -
- should
should be
be implemented
implemented if
if DataSource
DataSource wants
wants to
to deliver
deliver content
content via
via dynamic
dynamic URLs.
URLs. It
It should
should return
return priority
priority value
value for
for passed
passed url.

- `fetchUrl?(
`fetchUrl?( obj:
obj: null,
null, params:
params: FetchUrlParams,
FetchUrlParams, context:
context: TContext,
TContext, info:
info: GraphQLResolveInfo
GraphQLResolveInfo ):
): Promise<FetchUrlResult
Promise<FetchUrlResult |
| null>`

- `getCacheContext?(context:
`getCacheContext?(context: TContext):
TContext): Record<string,
Record<string, any>`
any>` -
- method
method to
to get
get a
a cache
cache context
context object
object which
which should
should contain
contain a
a distinguish
distinguish data
data that
that must
must be
be taken
taken into
into account
account while
while calculating
calculating the
the cache
cache key
key for
for this
this specific
specific DataSource.
DataSource. It
It could
could be
be a
a storeCode,
storeCode, selected
selected locale
locale etc.

- `fetchBackendConfig?(obj:
`fetchBackendConfig?(obj: any,
any, params:
params: any,
any, context:
context: TContext,
TContext, info:
info: GraphQLResolveInfo):
GraphQLResolveInfo): RemoteBackendConfig;`

- `authorizeRequest?(req:
`authorizeRequest?(req: ContextRequestOptions):
ContextRequestOptions): Promise<void>`
Promise<void>` -
- Hook
Hook that
that is
is going
going to
to be
be executed
executed for
for every
every REST
REST request
request if
if authorization
authorization is
is required


## `GqlDataSource`


Base Data
Data Source
Source class
class which
which realizes
realizes communication
communication with
with any
any GraphQL
GraphQL based
based API.




## Custom
Custom DataSource
DataSource example


As mentioned
mentioned earlier,
earlier, to
to create
create the
the custom
custom DataSource
DataSource you
you need
need to
to extend
extend one
one from
from the
the above
above abstract
abstract classes.
classes. An
An example
example implementation
implementation can
can look
look following:



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ injectable
injectable }
} from
from 'inversify';

import {
{ DataSource
DataSource }
} from
from '@deity/falcon-server-env';



export class
class CustomDataSource
CustomDataSource extends
extends DataSource
DataSource {

constructor() {




getCustomData() {

return {};






<TabItem value="JavaScript">



const {
{ injectable,
injectable, decorate
decorate }
} =
= require('inversify');

const {
{ DataSource
DataSource }
} =
= require('@deity/falcon-server-env');


class CustomDataSource
CustomDataSource extends
extends DataSource
DataSource {

constructor() {




getCustomData() {

return {};



decorate(injectable(), CustomDataSource);


module.exports =
= {








In above
above example
example `CustomDataSource`
`CustomDataSource` has
has parameter-lees
parameter-lees constructor
constructor -
- it
it does
does not
not uses
uses any
any external
external dependency.


To show
show how
how to
to inject
inject any,
any, please
please see
see following
following example,
example, where
where we
we injected
injected `fetch`
`fetch` (we
(we highly
highly recommended
recommended to
to use
use Falcon
Falcon fetch
fetch <!--
<!-- TODO:
TODO: [see
[see why](need-url-here)
why](need-url-here) -->)
-->) and
and next
next to
to it
it module
module configuration.



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ injectable,
injectable, inject
inject }
} from
from 'inversify';

import {
{ RESTDataSource,
RESTDataSource, injectModuleConfig
injectModuleConfig }
} from
from '@deity/falcon-server-env';



export class
class CustomDataSource
CustomDataSource extends
extends RESTDataSource
RESTDataSource {

constructor(@inject('fetch') fetch,
fetch, @injectModuleConfig('custom')
@injectModuleConfig('custom') config)
config) {

super({ restDataSourceFetch:
restDataSourceFetch: fetch,
fetch, name:
name: 'custom',
'custom', config
config });



getCustomData() {

return this.get('http://custom.com');






<TabItem value="JavaScript">



const {
{ injectable,
injectable, inject,
inject, decorate
decorate }
} =
= require('inversify');

const {
{ RESTDataSource
RESTDataSource }
} =
= require('@deity/falcon-server-env');


class CustomDataSource
CustomDataSource extends
extends RESTDataSource
RESTDataSource {

constructor(fetch, config)
config) {

super({ restDataSourceFetch:
restDataSourceFetch: fetch,
fetch, name:
name: 'custom',
'custom', config
config });



getCustomData() {

return this.get('/data');



decorate(injectable(), CustomDataSource);

decorate(inject('fetch'), CustomDataSource,
CustomDataSource, 0);

decorate(injectModuleConfig('custom'), CustomDataSource,
CustomDataSource, 1);


module.exports =
= {








The dependency
dependency injection
injection demonstrated
demonstrated on
on `RESTDataSource`
`RESTDataSource` example
example can
can be
be also
also applied
applied to
to any
any DataSource.


## DataSource
DataSource methods
methods to
to GraphQL
GraphQL resolvers
resolvers auto-binding


In Falcon
Falcon Server
Server Data
Data Sources
Sources have
have also
also one
one more
more important
important feature
feature -
- auto-binding
auto-binding of
of resolvers.
resolvers. When
When Falcon
Falcon Server
Server starts
starts it
it loads
loads all
all the
the extensions,
extensions, and
and all
all modules
modules (which
(which deliver
deliver Data
Data Sources).


When extension
extension configuration
configuration has
has `module`
`module` key
key then
then Falcon
Falcon Server
Server looks
looks for
for a
a Data
Data Source
Source exposed
exposed by
by module
module with
with that
that name
name and
and tries
tries to
to bind
bind all
all the
the queries
queries and
and mutations
mutations to
to methods
methods of
of that
that Data
Data Source.

That way
way you
you don't
don't have
have to
to wire
wire up
up resolvers
resolvers to
to your
your schema
schema extension
extension manually
manually -
- it's
it's done
done by
by Falcon
Falcon Server.


Let's consider
consider we
we have
have an
an extension
extension with
with the
the following
following schema:



extend type
type Query
Query {

footerLinks: [FooterLink!]!



type FooterLink
FooterLink {

url: String!

text: String!




and a
a module
module that
that contains
contains the
the following
following DataSource:



const {
{ DataSource
DataSource }
} =
= require('apollo-datasource');


export class
class FooterLinksDataSource
FooterLinksDataSource extends
extends DataSource
DataSource {

async footerLinks(obj,
footerLinks(obj, params,
params, context,
context, info)
info) {

// in
in real
real scenario
scenario these
these links
links would
would be
be fetched
fetched from
from some
some backend

const links
links =
= [


url: 'https://example.com',

text: 'Example'



return links;





and configuration
configuration including
including these:





"extensions": {

"footer": {

"package": "./src/footer-links-extensions",

"module": "footer-links-module"



"module": {

"footer-links": {

"package": "./src/footer-links-module"







In that
that situation
situation extension
extension named
named `"footer"`
`"footer"` uses
uses module
module called
called `"footer-links"`,
`"footer-links"`, so
so Falcon
Falcon Server
Server will
will bind
bind method
method `footerLinks(obj,
`footerLinks(obj, params,
params, context,
context, info)`
info)` to
to query
query `footerLinks`.

That way
way every
every time
time when
when someone
someone will
will send
send GraphQL
GraphQL query
query `footerLinks`
`footerLinks` method
method `FooterLinksDataSource.footerLinks`
`FooterLinksDataSource.footerLinks` will
will be
be executed.


id: rest-endpoints

title: REST
REST Endpoints
Endpoints in
in Falcon
Falcon Server

sidebar_label: REST
REST Endpoints

enterprise_only: true



import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEWvariant="green">NEW V3V3 DOC</Badge><br/><br/>
id: event-handlers

title: Event
Event Handlers
Handlers in
in Falcon
Falcon Server

sidebar_label: Event
Event Handlers

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


Falcon Server
Server uses
uses asynchronous
asynchronous events
events to
to notify
notify about
about internal
internal processes.
processes. With
With event
event handlers
handlers you
you are
are able
able to
to "hook"
"hook" into
into particular
particular place
place in
in order
order to
to modify
modify Falcon
Falcon Server's
Server's behavior
behavior or
or modify
modify particular
particular thing.


You can
can find
find available
available list
list of
of events
events [here](#available-events)


## Usage


In order
order to
to handle
handle event
event fired
fired by
by Falcon
Falcon Server
Server you
you need
need to
to use
use `@eventHandler()`
`@eventHandler()` decorator
decorator and
and extend
extend `EventHandlerBase`
`EventHandlerBase` class
class which
which requires
requires you
you to
to implement
implement `execute`
`execute` method.

Then it
it needs
needs to
to exported
exported by
by [Falcon
[Falcon Module](../about).


The snipped
snipped below
below shows
shows how
how to
to do
do that:



const {
{ eventHandler,
eventHandler, EventHandlerBase,
EventHandlerBase, Events
Events }
} =
= require('@deity/falcon-server-env');


// custom
custom event
event handler
handler that
that processes
processes errors


export class
class CustomErrorHandler
CustomErrorHandler extends
extends EventHandlerBase
EventHandlerBase {

async execute(error)
execute(error) {

// log
log error
error onto
onto console






:::warning Due
Due to
to nature
nature of
of Data
Data Sources
Sources which
which are
are instantiated
instantiated per
per each
each request
request we
we don't
don't advise
advise to
to watch
watch for
for events
events from
from Data
Data Source
Source because
because each
each request
request will
will create
create instance
instance of
of event
event handler.



## Firing
Firing custom
custom events


Besides events
events that
that Falcon
Falcon Server
Server emits
emits you
you can
can also
also emit
emit your
your own
own events.
events. To
To do
do so,
so, you
you need
need to
to inject
inject `EventEmitter2`
`EventEmitter2` to
to your
your class
class and
and simply
simply fire
fire event
event as
as you
you wish.



const {
{ injectable
injectable }
} =
= require('inversify');

const {
{ DataSource
DataSource }
} =
= require('apollo-datasource');

const {
{ EventEmitter2
EventEmitter2 }
} =
= require('eventemitter2');



export class
class CustomDataSource
CustomDataSource extends
extends DataSource
DataSource {

constructor(@inject('EventEmitter2') eventEmitter:
eventEmitter: EventEmitter2)
EventEmitter2) {


this.eventEmitter =
= eventEmitter;



async someResolver(obj,
someResolver(obj, params,
params, context,
context, info)
info) {

// something
something happened
happened -
- trigger
trigger event

this.eventEmitter.emit('custom-event-name', 'arg1',
'arg1', 'arg2');


// or
or trigger
trigger it
it in
in async
async way

await this.eventEmitter.emitAsync('custom-event-name',
this.eventEmitter.emitAsync('custom-event-name', 'arg1',
'arg1', 'arg2');


return {};





## Available
Available events


You can
can import
import `Events`
`Events` enum
enum available
available in
in `@deity/falcon-server-env`
`@deity/falcon-server-env` package
package to
to have
have list
list of
of predefined
predefined events:



const {
{ Events
Events }
} =
= require('@deity/falcon-server-env');



#### ERROR


Fired when
when Falcon
Falcon Server
Server catches
catches global
global error




- `Error`
`Error` instance


#### BEFORE_INITIALIZED


Fired before
before initialization
initialization of
of the
the instance
instance of
of Falcon
Falcon Server
Server (at
(at the
the beginning
beginning of
of `FalconServer.initialize()`
`FalconServer.initialize()` method).
method). This
This event
event is
is fired
fired before
before Falcon
Falcon Server
Server is
is configured
configured with
with basic
basic things
things so
so it
it can
can be
be used
used to
to execute
execute some
some logic
logic at
at the
the very
very beginning
beginning of
of Falcon
Falcon Server
Server lifetime.




- `FalconServer`
`FalconServer` class
class instance


#### AFTER_INITIALIZED


Fired after
after initialization
initialization of
of the
the instance
instance of
of Falcon
Falcon Server
Server (at
(at the
the end
end of
of `FalconServer.initialize()`
`FalconServer.initialize()` method).
method). This
This event
event is
is fired
fired after
after everything
everything that
that Falcon
Falcon Server
Server uses
uses is
is initialized
initialized so
so it
it can
can be
be used
used to
to access
access all
all Falcon
Falcon Server's
Server's internals.




- `FalconServer`
`FalconServer` class
class instance


#### BEFORE_STARTED


#### AFTER_STARTED


#### CACHE_TAG_INVALIDATE


#### BEFORE_WEB_SERVER_CREATED


#### AFTER_WEB_SERVER_CREATED


#### BEFORE_WEB_SERVER_REQUEST


#### AFTER_WEB_SERVER_REQUEST


#### BEFORE_API_CONTAINER_CREATED


#### AFTER_API_CONTAINER_CREATED


#### BEFORE_EXTENSION_CONTAINER_CREATED


#### AFTER_EXTENSION_CONTAINER_CREATED


#### BEFORE_COMPONENTS_REGISTERED


#### AFTER_COMPONENTS_REGISTERED


#### BEFORE_APOLLO_SERVER_CREATED


#### AFTER_APOLLO_SERVER_CREATED


#### BEFORE_ENDPOINTS_REGISTERED


#### AFTER_ENDPOINTS_REGISTERED


#### API_DATA_SOURCE_REGISTERED


#### EXTENSION_REGISTERED


id: algolia-search-module

title: Algolia
Algolia Search
Search module

sidebar_label: Algolia
Algolia Search
Search module

enterprise_only: true



import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-algolia-search-module"
name="@deity/falcon-algolia-search-module" />
 



id: wordpress-module

title: WordPress
WordPress Module

sidebar_label: WordPress
WordPress Module

enterprise_only: true



import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-wordpress-module"
name="@deity/falcon-wordpress-module" />
 



id: magento2-module

title: Magento2
Magento2 module

sidebar_label: Magento2
Magento2 module

enterprise_only: true


 
import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-magento2-module"
name="@deity/falcon-magento2-module" />
 



id: bigcommerce-module

title: BigCommerce
BigCommerce module

sidebar_label: BigCommerce
BigCommerce module

enterprise_only: true


 
import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>



<CodePackage name="@deity/falcon-bigcommerce-module"
name="@deity/falcon-bigcommerce-module" />
 


id: module-api

title: Falcon
Falcon Module
Module API

sidebar_label: Falcon
Falcon Module
Module API

enterprise_only: true



import Tabs
Tabs from
from '@theme/Tabs';

import TabItem
TabItem from
from '@theme/TabItem';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


As mentioned
mentioned [here](./about#what-is-a-module-in-falcon)
[here](./about#what-is-a-module-in-falcon) Falcon
Falcon Module
Module packs
packs implementation
implementation of
of various
various things
things that
that are
are required
required to
to achieve
achieve a
a particular
particular feature
feature in
in Falcon
Falcon Server.

Its powerful
powerful api
api allows
allows to:


- manage
manage large
large code
code base

- makes
makes your
your code
code base
base testable

- control
control the
the way
way your
your classes
classes are
are instantiated

- control
control lifetime
lifetime of
of your
your instances

- modify
modify GraphQL
GraphQL context
context to
to include
include additional
additional data
data you
you want
want to
to use
use in
in GraphQL
GraphQL resolvers

- create
create DataSource
DataSource for
for GraphQL
GraphQL that
that does
does not
not extend
extend data
data sources
sources provided
provided by
by Falcon

- and
and many
many more


To use
use all
all above
above Falcon
Falcon Module
Module features,
features, your
your module
module main
main file
file needs
needs to
to export
export class
class derived
derived from
from `FalconModule`
`FalconModule` abstract
abstract class.
class. To
To se
se how
how to
to create
create new
new Falcon
Falcon Module
Module see
see [custom
[custom module](./custom-module)
module](./custom-module) section.
section. Here
Here is
is an
an Module
Module abstract
abstract class
class definition:



abstract class
class FalconModule<TModuleConfig>
FalconModule<TModuleConfig> {

protected config:
config: TModuleConfig;


constructor(config: TModuleConfig
TModuleConfig =
= {})
{}) {

this.config =
= config;



public servicesRegistry(registry:
servicesRegistry(registry: FalconModuleRegistryProps):
FalconModuleRegistryProps): void
void {}


public gqlResolvers<TGqlResolverContext>():
gqlResolvers<TGqlResolverContext>(): GqlResolversMap<TGqlResolverContext>
GqlResolversMap<TGqlResolverContext> {

return {};



protected mergeGqlResolvers<TGraphQLContext>(

resolversMapA: GqlResolversMap<TGraphQLContext>,

resolversMapB: GqlResolversMap<TGraphQLContext>

): GqlResolversMap<TGraphQLContext>
GqlResolversMap<TGraphQLContext> {

return deepMerge(resolversMapA,
deepMerge(resolversMapA, resolversMapB);





Here is
is an
an list
list of
of all
all methods
methods and
and poperies
poperies of
of `FalconModule`
`FalconModule` abstract
abstract class:


- `constructor(config:
`constructor(config: TConfig)`
TConfig)` -
- As
As you
you can
can see
see constructor
constructor of
of FalconModule
FalconModule accepts
accepts configuration
configuration object.
object. It
It will
will be
be provided
provided via
via Falcon
Falcon Server
Server when
when Module
Module will
will be
be loaded.
loaded. So
So you
you are
are able
able to
to configure
configure your
your Module
Module initialization.


- `config:
`config: TConfig`
TConfig` -
- `protected`
`protected` property
property which
which give
give yo
yo an
an access
access to
to configuration
configuration extracted
extracted during
during module
module loading
loading and
and injected
injected via
via Module
Module constructor.


- `servicesRegistry(registry:
`servicesRegistry(registry: FalconModuleRegistryProps):
FalconModuleRegistryProps): void`
void` -
- through
through this
this method
method you
you are
are able
able to
to register
register all
all dependencies
dependencies which
which are
are used
used by
by module,
module, to
to learn
learn how
how to
to bind
bind new
new or
or rebind
rebind existing
existing one,
one, learn
learn more
more in
in [Services
[Services registry](#services-registry)
registry](#services-registry) section.
section. To
To learn
learn why
why you
you need
need this,
this, see
see [Dependency
[Dependency Injection](#dependency-injection).


- `gqlResolvers():
`gqlResolvers(): GqlResolversMap`
GqlResolversMap` -
- through
through this
this method
method you
you are
are able
able to
to define
define all
all GraphQL
GraphQL resolvers,
resolvers, to
to learn
learn how
how to
to define
define new
new or
or override
override existing
existing one
one [GraphQL
[GraphQL resolvers](#graphql-resolvers-map)
resolvers](#graphql-resolvers-map) section.


- `mergeGqlResolvers(resolversMapA,
`mergeGqlResolvers(resolversMapA, resolversMapB):
resolversMapB): GqlResolversMap`
GqlResolversMap` -
- `protected`
`protected` method
method which
which allows
allows you
you to
to merge
merge two
two GraphQL
GraphQL resolvers
resolvers object
object maps
maps into
into one.


## `servicesRegistry`


Through this
this function
function you
you are
are able
able to
to register
register all
all services
services (dependencies)
(dependencies) into
into container
container registry.
registry. Exposed
Exposed api
api allows
allows you
you to
to control
control not
not only
only the
the way
way in
in which
which any
any particular
particular service
service should
should be
be created,
created, but
but also
also the
the lifetime
lifetime of
of that
that instances.
instances. Service
Service (dependency)
(dependency) stands
stands for:


- FalconModule
FalconModule extension
extension class:
class: `DataSource`,
`DataSource`, `EventHandler`
`EventHandler` or
or `EndpointManager`

- custom
custom written
written `class`,
`class`, `function`
`function` or
or `const`
`const` which
which are
are used
used inside
inside particular
particular module
module and/or
and/or should
should be
be visible
visible for
for FalconServer
FalconServer host
host application.

- FalconServer
FalconServer host
host instances,
instances, like
like `fetch`,
`fetch`, `Logger`,
`Logger`, `HttpSession`,
`HttpSession`, [see](./injectable-services)
[see](./injectable-services) full
full list
list of
of them


`servicesRegistry` method,
method, through
through its
its argument,
argument, provide
provide and
and set
set of
of method
method which
which should
should be
be used
used in
in order
order to
to manage
manage all
all your
your module
module dependencies.
dependencies. We
We are
are using
using [inversify](https://inversify.io/)
[inversify](https://inversify.io/) under
under the
the hood,
hood, however
however api
api which
which we
we are
are exposing
exposing is
is slights
slights changed.



type FalconModuleRegistryProps
FalconModuleRegistryProps =
= {

bind: (serviceIdentifier:
(serviceIdentifier: ServiceIdentifier)
ServiceIdentifier) =>
=> FalconModuleBindingSyntax;

rebind: (serviceIdentifier:
(serviceIdentifier: ServiceIdentifier)
ServiceIdentifier) =>
=> FalconModuleBindingSyntax;

unbind: (serviceIdentifier:
(serviceIdentifier: ServiceIdentifier)
ServiceIdentifier) =>
=> void;

isBound: (serviceIdentifier:
(serviceIdentifier: ServiceIdentifier)
ServiceIdentifier) =>
=> boolean;




- `bind`
`bind` -
- a
a function
function which
which allows
allows you
you to
to add
add new
new service
service implementation
implementation into
into the
the container
container registry
registry for
for a
a particular
particular service
service identifier

- `rebind`
`rebind` -
- a
a function
function which
which allows
allows you
you to
to replace
replace underlining
underlining service
service implementation
implementation in
in container
container registry
registry for
for a
a particular
particular service
service identifier
identifier if
if that
that one
one was
was already
already added
added into
into container
container registry.

- `unbind`
`unbind` -
- a
a function
function which
which allows
allows you
you to
to remove
remove service
service implementation
implementation from
from the
the container
container registry
registry assigned
assigned to
to a
a particular
particular service
service identifier.

- `isBound`
`isBound` -
- a
a function
function which
which allows
allows you
you to
to determine
determine if
if the
the container
container registry
registry contains
contains already
already any
any service
service implementation
implementation for
for a
a particular
particular service
service identifier.


To learn
learn more
more about
about Inversion
Inversion of
of Control
Control pattern
pattern and
and Dependency
Dependency Injection
Injection works,
works, please
please see
see [Dependency
[Dependency Injection](#dependency-injection)


### Binding
Binding services


In order
order to
to bind
bind a
a new
new service,
service, you
you need
need to
to use
use `bind`
`bind` method:







<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ injectable
injectable }
} from
from 'inversify';

import {
{ FalconModule,
FalconModule, FalconModuleRegistryProps
FalconModuleRegistryProps }
} from
from '@deity/falcon-server-env';



class Foo
Foo {}


export class
class FooModule
FooModule extends
extends FalconModule
FalconModule {

servicesRegistry(registry: FalconModuleRegistryProps)
FalconModuleRegistryProps) {









<TabItem value="JavaScript">



const {
{ injectable,
injectable, decorate
decorate }
} =
= require('inversify');

const {
{ FalconModule
FalconModule }
} =
= require('@deity/falcon-server-env');


class Foo
Foo {}

decorate(injectable(), Foo);


module.exports.FooModule =
= class
class FooModule
FooModule extends
extends FalconModule
FalconModule {

servicesRegistry(registry) {











Above example
example will
will bind
bind `'Foo'`
`'Foo'` to
to the
the `Foo`
`Foo` class
class constructor,
constructor, and
and the
the container
container will
will care
care about
about proper
proper `Foo`
`Foo` class
class object
object creation.
creation. If
If you
you are
are interested
interested in
in more
more customization
customization please
please look
look into
into [`inversify`
[`inversify` documentation](https://github.com/inversify/InversifyJS/tree/master/wiki)


Since Data
Data Sources,
Sources, Rest
Rest Endpoint
Endpoint Handlers,and
Handlers,and Event
Event Handlers
Handlers are
are Falcon
Falcon Middleware
Middleware common
common services,
services, those
those require
require special
special treatment.
treatment. You
You cannot
cannot for
for example
example control
control those
those instances
instances lifetime.
lifetime. Because
Because of
of that,
that, we
we introduced
introduced dedicated
dedicated method
method to
to manage
manage their
their registrations


#### Binding
Binding Data
Data Sources


In order
order to
to bind
bind Data
Data Source
Source you
you need
need to
to use
use `toDataSource`
`toDataSource` or
or `toDataSourceDynamicValue`
`toDataSourceDynamicValue` binding
binding syntax
syntax methods.




registry.bind('FooDataSource').toDataSourceDynamicValue(() =>
=> new
new FooDataSource('foo'));



- `toDataSource`
`toDataSource` -
- expect
expect class
class constructor,
constructor, is
is useful
useful if
if DataSource
DataSource has
has parameter-less
parameter-less constructor
constructor or
or all
all its
its arguments
arguments are
are marked
marked via
via `@inject()`
`@inject()` decorator
decorator -
- which
which means
means all
all of
of its
its arguments
arguments can
can be
be resolved
resolved dynamically
dynamically via
via dependency
dependency container.

- `toDataSourceDynamicValue`
`toDataSourceDynamicValue` -
- expect
expect an
an instance
instance of
of the
the class
class so
so you
you need
need to
to pass
pass a
a function
function which
which will
will create
create one,
one, is
is useful
useful if
if DataSource
DataSource has
has arguments
arguments which
which cannot
cannot or
or you
you don't
don't want
want to
to be
be resolved
resolved dynamically
dynamically via
via dependency
dependency container.


To learn
learn more
more about
about DataSources
DataSources in
in Falcon
Falcon Server
Server please
please [see](./common-services/data-sources)


#### Binding
Binding Rest
Rest Endpoint
Endpoint Manager


In order
order to
to bind
bind Rest
Rest Endpoint
Endpoint Manager
Manager you
you need
need to
to use
use `toEndpointManager`
`toEndpointManager` or
or `toEndpointManagerDynamicValue`
`toEndpointManagerDynamicValue` binding
binding syntax
syntax methods.




registry.bind('FooEndpointManager').toEndpointManagerDynamicValue(() =>
=> new
new FooEndpointManager());



To learn
learn more
more about
about Rest
Rest Endpoint
Endpoint Managers
Managers in
in Falcon
Falcon Server
Server please
please [see](./common-services/rest-endpoints)


#### Binding
Binding Event
Event Handlers


In order
order to
to bind
bind Event
Event Handler
Handler you
you need
need to
to use
use `toEventHandler`
`toEventHandler` or
or `toEventHandlerDynamicValue`
`toEventHandlerDynamicValue` binding
binding syntax
syntax methods.




registry.bind('FooEventHandler').toEventHandlerDynamicValue(() =>
=> new
new FooEventHandler());



To learn
learn more
more about
about Event
Event Handlers
Handlers in
in Falcon
Falcon Server
Server please
please [see](./common-services/event-handlers)


### Rebinding
Rebinding services


In order
order to
to rebind
rebind new
new service,
service, you
you need
need to
to use
use `rebind`
`rebind` method:







<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ injectable
injectable }
} from
from 'inversify';

import {
{ FalconModuleRegistryProps
FalconModuleRegistryProps }
} from
from '@deity/falcon-server-env';

import {
{ FooModule:
FooModule: FooModuleBase,
FooModuleBase, Foo:
Foo: FooBase
FooBase }
} from
from 'foo-module'



class Foo
Foo extends
extends FooBase
FooBase {}


export class
class FooModule
FooModule extends
extends FooModuleBase
FooModuleBase {

servicesRegistry(registry: FalconModuleRegistryProps)
FalconModuleRegistryProps) {









<TabItem value="JavaScript">



const {
{ injectable,
injectable, decorate
decorate }
} =
= require('inversify');

const {
{ FalconModule
FalconModule }
} =
= require('@deity/falcon-server-env');

const {
{ FooModule:
FooModule: FooModuleBase,
FooModuleBase, Foo:
Foo: FooBase
FooBase }
} =
= require('foo-module');


class Foo
Foo extends
extends FooBase
FooBase {}

decorate(injectable(), Foo);


module.exports.FooModule =
= class
class FooModule
FooModule extends
extends FalconModuleBase
FalconModuleBase {

servicesRegistry(registry) {











Binding syntax
syntax returned
returned from
from `rebind`
`rebind` method
method is
is exactly
exactly the
the same
same as
as for
for `bind`,
`bind`, which
which means
means if
if you
you want
want to
to rebind
rebind e.g.
e.g. Data
Data Source
Source implementation
implementation you
you should
should use
use corresponding
corresponding to
to `bind`
`bind` method
method syntax:






## `gqlResolvers`


Basically, the
the resolvers
resolvers map
map is
is a
a tree
tree of
of objects,
objects, where
where object
object keys
keys are
are mapped
mapped to
to Queries
Queries and
and Mutations
Mutations defined
defined in
in GQL
GQL schema
schema file,
file, while
while values
values of
of that
that keys
keys are
are functions
functions (resolvers)
(resolvers) which
which define
define a
a way
way how
how the
the value
value of
of specific
specific filed
filed should
should be
be calculated.


Single resolver
resolver function
function can
can be
be described
described in
in following
following way:



(source: TSource,
TSource, args:
args: TArgs,
TArgs, context:
context: TContext,
TContext, info:
info: GraphQLResolveInfo)
GraphQLResolveInfo) =>
=> TReturn;





- `source`
`source` -
- is
is an
an value
value returned
returned from
from parent
parent resolver,
resolver, in
in case
case when
when one
one resolver
resolver is
is called
called by
by another

- `args`
`args` -
- is
is an
an object
object with
with all
all arguments
arguments provided
provided to
to Query
Query or
or Mutation

- `context`
`context` -
- provides
provides resolver
resolver execution
execution context,
context, like
like http
http request
request context,
context, http
http session,
session, data
data sources
sources map,
map, [read
[read more](#graphql-resolver-context)

- `info`
`info` -
- provides
provides graphQL
graphQL specific
specific metadata
metadata about
about executed
executed resolver,
resolver, [read
[read more](https://graphql.org/graphql-js/type/#graphqlobjecttype)


For more
more information
information about
about GraphQL
GraphQL resolver
resolver API
API please
please see
see [graphql.org](https://graphql.org/learn/execution/#root-fields-resolvers)
[graphql.org](https://graphql.org/learn/execution/#root-fields-resolvers) or
or [apollo-server](https://www.apollographql.com/docs/apollo-server/data/resolvers/)
[apollo-server](https://www.apollographql.com/docs/apollo-server/data/resolvers/) documentation.


### GraphQL
GraphQL resolver
resolver Context


GraphQL Resolver
Resolver third
third argument
argument -
- is
is provided
provided to
to every
every resolver
resolver and
and holds
holds important
important contextual
contextual information,
information, like
like http
http request
request context,
context, http
http session,
session, data
data sources
sources map.
map. To
To learn
learn more
more about
about `context`
`context` see
see [apollo-server](https://www.apollographql.com/docs/apollo-server/data/resolvers/#the-context-argument)
[apollo-server](https://www.apollographql.com/docs/apollo-server/data/resolvers/#the-context-argument) documentation.


However Falcon
Falcon Server,
Server, provides
provides couple
couple of
of cool
cool things
things through
through it.
it. It
It can
can be
be described
described by
by following
following type:



type GraphQLContext<TDataSources
GraphQLContext<TDataSources extends
extends DataSourcesMap
DataSourcesMap =
= DataSourcesMap>
DataSourcesMap> =
= {

scope: Record<string,
Record<string, string>;

dataSources: TDataSources;

cache: ICache;

session?: Record<string,
Record<string, any>;

headers: Record<string,
Record<string, string>;

koa: KoaContext;;

container: IContainer;






- `scope`
`scope` -
- an
an object
object key-value
key-value map
map of
of Extension
Extension name
name and
and Extension
Extension Scope
Scope Id
Id [see
[see the
the details](../extension-scopes)

- `dataSources`
`dataSources` -
- an
an object
object key-value
key-value map
map of
of DataSource
DataSource name
name and
and its
its instance,
instance, [see
[see the
the details](#context-datasources-map)

- `cache`
`cache` -
- give
give you
you direct
direct access
access to
to cache.

- `session`
`session` -
- http
http session
session cookie,
cookie, which
which is
is an
an object
object key-value
key-value map
map of
of Extension
Extension name,
name, and
and actual
actual session
session value.

- `headers`-
`headers`- request
request header
header object.

- `koa`
`koa` -
- a
a [koa](https://koajs.com/)
[koa](https://koajs.com/) Context
Context which
which encapsulates
encapsulates node's
node's `request`
`request` and
and `response`
`response` objects
objects into
into a
a single
single object.

- `container`
`container` -
- gives
gives you
you access
access to
to IoC
IoC container.


#### Context
Context DataSources
DataSources map


To read
read more
more about
about DataSources
DataSources see
see [DataSources](./common-services/data-sources)
[DataSources](./common-services/data-sources) section;




## Dependency
Dependency Injection


To allow
allow all
all above,
above, Falcon
Falcon Module
Module introducing
introducing support
support of
of [Inversion
[Inversion of
of Control](https://en.wikipedia.org/wiki/Inversion_of_control).
Control](https://en.wikipedia.org/wiki/Inversion_of_control). It
It is
is possible
possible due
due to
to usage
usage of
of `inversify`
`inversify` under
under the
the hood
hood as
as an
an Dependency
Dependency Injection
Injection framework.
framework. If
If you
you are
are not
not familiar
familiar with
with `inversify`
`inversify` nor
nor Inversion
Inversion of
of Control
Control pattern,
pattern, please
please look
look here:
here: (new
(new section
section needed
needed <!--
<!-- [TODO
[TODO -
- good
good reference
reference required](./TODO)
required](./TODO) -->
--> )


_**TODO: prepare
prepare some
some good
good introduction
introduction of
of this
this topic:**_


- https://indepth.dev/posts/1049/why-do-we-have-dependency-injection-in-web-development

- https://viktor-kukurba.medium.com/dependency-injection-and-inversion-of-control-in-javascript-303e07e7f43f

- https://bulldogjob.pl/articles/1099-od-kodu-spaghetti-do-kontenerow-ioc-w-javascript-i-typescript

- https://blog.angular-university.io/angular-dependency-injection/

- https://stackoverflow.com/questions/6550700/inversion-of-control-vs-dependency-injection

- https://medium.com/@mena.meseha/dependency-injection-complete-guide-14b5ee4e47eb




## Example


### Defining
Defining new
new Falcon
Falcon Module


Assuming that
that you
you have
have the
the following
following structure
structure of
of the
the module:




|- custom-module

|- index.js

|- src

|- custom-data-source.js

|- custom-rest-route.js

|- custom-event-handler.js

|- custom-external-service-client.js




the code
code snippet
snippet below
below shows
shows the
the content
content of
of `custom-module/index.js`
`custom-module/index.js` that
that implements
implements custom
custom module:



const {
{ FalconModule
FalconModule }
} =
= require('@deity/falcon-server-env');

const {
{ CustomDataSource
CustomDataSource }
} =
= require('./custom-data-source');

const {
{ CustomRestRoute
CustomRestRoute }
} =
= require('./custom-rest-route');

const {
{ CustomEventHandler
CustomEventHandler }
} =
= require('./custom-event-handler');

const {
{ CustomExternalServiceClient
CustomExternalServiceClient }
} =
= require('./custom-external-service-client');


module.exports =
= new
new FalconModule({

servicesRegistry: ({
({ bind
bind })
}) =>
=> {

// by
by default
default these
these will
will be
be instantiated
instantiated for
for each
each request:





// this
this one
one will
will be
be instantiated
instantiated once
once (as
(as it's
it's bound
bound as
as singleton),
singleton), as
as we
we want
want to
to have
have one
one instance

// of
of external
external api
api client
client shared
shared by
by the
the module



// also
also you
you can
can bind
bind anything
anything that
that can
can be
be bound
bound with
with InversifyJS
InversifyJS and
and then
then inject
inject it
it later
later in
in the
the code



``` -->


## Module
Module with
with common
common services
services auto-discovery


With auto-discovery
auto-discovery feature,
feature, you
you can
can just
just export
export classes
classes which
which extends
extends Falcon
Falcon Common
Common Services:


- [Data
[Data Sources](./common-services/data-sources)

- [Event
[Event Handlers](./common-services/event-handlers)

- [Rest
[Rest Endpoint
Endpoint Handlers](./common-services/rest-endpoints)


Then Falcon
Falcon Server
Server will
will do
do the
the required
required services
services registration
registration by
by himself
himself during
during startup.


However, as
as you
you may
may suspect,
suspect, common
common services
services auto-discovery
auto-discovery doesn't
doesn't cover
cover all
all the
the possible
possible things
things you
you can
can do
do in
in FalconServer.
FalconServer. This
This mechanism
mechanism was
was especially
especially created
created to
to implement
implement basic
basic scenarios,
scenarios, and
and also
also to
to make
make migration
migration from
from Falcon
Falcon Platform
Platform v2
v2 into
into v3
v3 easier.
easier. It
It will
will work
work until
until you
you do
do not
not want
want to
to create
create any
any custom
custom service.
service. To
To learn
learn more
more how
how to
to create
create that
that kind
kind of
of Falcon
Falcon Module
Module please
please see
see [custom
[custom module](./custom-module#creating-new-module-with-services-auto-discovery)


id: custom-module

title: Custom
Custom Modules

sidebar_label: Custom
Custom Modules

enterprise_only: true



import Tabs
Tabs from
from '@theme/Tabs';

import TabItem
TabItem from
from '@theme/TabItem';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


Most of
of the
the integrations
integrations available
available in
in Falcon
Falcon Platform
Platform are
are implemented
implemented as
as extensions
extensions +
+ modules.
modules. When
When you
you want
want to
to add
add new
new features
features or
or change
change the
the existing
existing behavior
behavior you'll
you'll need
need to
to add
add [Extension](../extensions/about)
[Extension](../extensions/about) and
and module
module that
that implements
implements features
features for
for that
that Extension.


## Creating
Creating new
new Module


To create
create the
the most
most basic
basic (an
(an empty)
empty) module
module it
it is
is enough
enough to
to export
export implementation
implementation of
of `FalconModule`
`FalconModule` abstract
abstract class.
class. Following
Following module
module will
will be
be correctly
correctly loaded
loaded and
and registered
registered in
in Falcon
Falcon Server,
Server, even
even it
it does
does nothing.



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ FalconModule
FalconModule }
} from
from '@deity/falcon-server-env';


export class
class CustomModule
CustomModule extends
extends FalconModule<any>
FalconModule<any> {

constructor(config: any)
any) {







<TabItem value="JavaScript">



const {
{ FalconModule
FalconModule }
} =
= require('@deity/falcon-server-env');


module.exports.CustomModule =
= class
class CustomModule
CustomModule extends
extends FalconModule
FalconModule {

constructor(config) {









However, as
as described
described in
in [about](./about#what-is-a-module-in-falcon),
[about](./about#what-is-a-module-in-falcon), Falcon
Falcon Module
Module can
can provide
provide implementation
implementation of
of various
various common
common services
services and
and define
define any
any custom
custom services
services too.
too. The
The following
following examples
examples show
show how
how to
to register
register a
a particular
particular one,
one, but
but it
it is
is perfectly
perfectly fine,
fine, to
to define
define any
any number
number of
of them,
them, inside
inside one
one Falcon
Falcon Module.
Module. So
So feel
feel free
free to
to mix
mix them
them in
in order
order to
to provide
provide consistent
consistent business
business feature
feature implementation.


### Adding
Adding GraphQL
GraphQL resolver


Lets assume
assume that
that you
you already
already have
have registered
registered corresponding
corresponding Falcon
Falcon Extensions
Extensions which
which defines
defines following
following GraphQl
GraphQl schema:



extend type
type Query
Query {

fooList: FooList!



type FooList
FooList {

items: [Foo!]!



type Foo
Foo {

id: ID!

name: String!




To add
add resolver
resolver implementation
implementation of
of `fooList`
`fooList` query,
query, you
you need
need to
to define
define resolver
resolver implementation
implementation via
via `gqlResolvers`
`gqlResolvers` method:



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ FalconModule,
FalconModule, GqlResolversMap
GqlResolversMap }
} from
from '@deity/falcon-server-env';


export class
class CustomModule
CustomModule extends
extends FalconModule<{}>
FalconModule<{}> {

constructor(config: {})
{}) {




gqlResolvers(): GqlResolversMap
GqlResolversMap {

const resolversMap:
resolversMap: GqlResolversMap
GqlResolversMap =
= {

Query: {

fooList: ()
() =>
=> [

{ id:
id: 1,
1, name:
name: 'foo
'foo 1'
1' },

{ id:
id: 2,
2, name:
name: 'foo
'foo 2'
2' },

{ id:
id: 3,
3, name:
name: 'foo
'foo 3'
3' }





return this.mergeGqlResolvers(super.gqlResolvers(),
this.mergeGqlResolvers(super.gqlResolvers(), resolversMap);






<TabItem value="JavaScript">



const {
{ FalconModule
FalconModule }
} =
= require('@deity/falcon-server-env');


module.exports.CustomModule =
= class
class CustomModule
CustomModule extends
extends FalconModule
FalconModule {

constructor(config) {




gqlResolvers() {

const resolversMap
resolversMap =
= {

Query: {

fooList: ()
() =>
=> [

{ id:
id: 1,
1, name:
name: 'foo
'foo 1'
1' },

{ id:
id: 2,
2, name:
name: 'foo
'foo 2'
2' },

{ id:
id: 3,
3, name:
name: 'foo
'foo 3'
3' }





return this.mergeGqlResolvers(super.gqlResolvers(),
this.mergeGqlResolvers(super.gqlResolvers(), resolversMap);








#### Adding
Adding GraphQL
GraphQL Type
Type resolver


Very ofter
ofter there
there is
is an
an need
need to
to do
do a
a mapping
mapping of
of data
data returned
returned from
from particular
particular API
API to
to model
model defined
defined via
via GraphQL
GraphQL schema.
schema. Resolvers
Resolvers map
map allows
allows to
to define
define GraphQL
GraphQL Type
Type resolver,
resolver, which
which make
make possible
possible to
to define
define mapping
mapping once
once for
for entire
entire schema,
schema, no
no matter
matter how
how many
many queries
queries and/or
and/or mutations
mutations will
will return
return specific
specific type,
type, result
result of
of those
those will
will be
be mapped
mapped according
according to
to defined
defined Type
Type resolver.


Lest say
say there
there is
is a
a need
need to
to capitalize
capitalize `Foo.name`.
`Foo.name`. To
To achieve
achieve that
that `Foo.name`
`Foo.name` GraphQL
GraphQL Type
Type resolver
resolver should
should be
be added
added into
into `resolversMap`:



<TabItem value="TypeScript"
value="TypeScript" default>



const resolversMap:
resolversMap: GqlResolversMap
GqlResolversMap =
= {

Query: {

fooList: ()
() =>
=> [

{ id:
id: 1,
1, name:
name: 'foo
'foo 1'
1' },

{ id:
id: 2,
2, name:
name: 'foo
'foo 2'
2' },

{ id:
id: 3,
3, name:
name: 'foo
'foo 3'
3' }



Foo: {

name: root
root =>
=> toTitleCase(root.name)






<TabItem value="JavaScript">



const resolversMap
resolversMap =
= {

Query: {

fooList: ()
() =>
=> [

{ id:
id: 1,
1, name:
name: 'foo
'foo 1'
1' },

{ id:
id: 2,
2, name:
name: 'foo
'foo 2'
2' },

{ id:
id: 3,
3, name:
name: 'foo
'foo 3'
3' }



Foo: {

name: root
root =>
=> toTitleCase(root.name)








#### Using
Using DataSource


During development,
development, amount
amount of
of GraphQL
GraphQL resolvers,
resolvers, data
data manipulation
manipulation mappers,
mappers, business
business logic
logic functions
functions is
is growing
growing relay
relay fast.
fast. And
And there
there is
is a
a need
need to
to organize
organize code
code base
base somehow
somehow in
in a
a better
better way.
way. Here
Here Data
Data Sources
Sources appears,
appears, to
to read
read more
more about
about idea
idea behind
behind it
it go
go into
into [Data
[Data Sources](./common-services/data-sources)
Sources](./common-services/data-sources) section.
section. Following
Following example
example shows
shows them
them in
in action:



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ FalconModule,
FalconModule, GqlResolversMap,
GqlResolversMap, GraphQLContext
GraphQLContext }
} from
from '@deity/falcon-server-env';

import {
{ FooDataSource
FooDataSource }
} from
from './FooDataSource';


export type
type CustomGraphQLContext
CustomGraphQLContext =
= GraphQLContext<{
GraphQLContext<{ foo:
foo: FooDataSource
FooDataSource }>;

export class
class CustomModule
CustomModule extends
extends FalconModule<{}>
FalconModule<{}> {

constructor(config: {})
{}) {




servicesRegistry(registry) {






gqlResolvers(): GqlResolversMap<CustomGraphQLContext>
GqlResolversMap<CustomGraphQLContext> {

const resolversMap:
resolversMap: GqlResolversMap<CustomGraphQLContext>
GqlResolversMap<CustomGraphQLContext> =
= {

Query: {

fooList: (root,
(root, args,
args, context)
context) =>
=> context.dataSources.foo.getFooList()


Foo: {

name: root
root =>
=> toTitleCase(root.name)




return this.mergeGqlResolvers(super.gqlResolvers(),
this.mergeGqlResolvers(super.gqlResolvers(), resolversMap);






<TabItem value="JavaScript">



const {
{ FalconModule
FalconModule }
} =
= require('@deity/falcon-server-env');

const {
{ FooDataSource
FooDataSource }
} =
= require
require './FooDataSource';


module.exports.CustomModule =
= class
class CustomModule
CustomModule extends
extends FalconModule
FalconModule {

constructor(config) {




servicesRegistry(registry) {






gqlResolvers() {

const resolversMap
resolversMap =
= {

Query: {

fooList: (root,
(root, args,
args, context)
context) =>
=> context.dataSources.foo.getFooList()


Foo: {

name: root
root =>
=> toTitleCase(root.name)




return this.mergeGqlResolvers(super.gqlResolvers(),
this.mergeGqlResolvers(super.gqlResolvers(), resolversMap);








### Adding
Adding Module
Module Common
Common Services


Besides Data
Data Sources,
Sources, Falcon
Falcon Module
Module can
can have
have Event
Event Handlers
Handlers and
and Rest
Rest Endpoint
Endpoint Handlers.
Handlers. To
To find
find out
out how
how to
to implements
implements them
them please
please see:


- [Data
[Data Sources](./common-services/data-sources)

- [Event
[Event Handlers](./common-services/event-handlers)

- [Rest
[Rest Endpoint
Endpoint Handlers](./common-services/rest-endpoints)


Once you
you implement
implement any
any of
of these
these listed
listed above,
above, in
in order
order to
to register
register them,
them, you
you need
need to
to create
create binding
binding in
in `servicesRegistry`
`servicesRegistry` method:



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ FalconModule,
FalconModule, GqlResolversMap,
GqlResolversMap, GraphQLContext
GraphQLContext }
} from
from '@deity/falcon-server-env';

import {
{ FooDataSource
FooDataSource }
} from
from './FooDataSource';

import {
{ FooRestEndpointHandler
FooRestEndpointHandler }
} from
from './FooRestEndpointHandler';

import {
{ AfterInitializationEventHandler
AfterInitializationEventHandler }
} from
from './AfterInitializationEventHandler';


export type
type CustomGraphQLContext
CustomGraphQLContext =
= GraphQLContext<{
GraphQLContext<{ foo:
foo: FooDataSource
FooDataSource }>;

export class
class CustomModule
CustomModule extends
extends FalconModule<{}>
FalconModule<{}> {

constructor(config: {})
{}) {




servicesRegistry(registry) {











<TabItem value="JavaScript">



const {
{ FalconModule,
FalconModule, DataSource
DataSource }
} =
= require('@deity/falcon-server-env');

const {
{ FooDataSource
FooDataSource }
} =
= require('./FooDataSource);

const {
{ FooRestEndpointHandler
FooRestEndpointHandler }
} =
= require('./FooRestEndpointHandler');

const {
{ AfterInitializationEventHandler
AfterInitializationEventHandler }
} =
= require('./AfterInitializationEventHandler');


module.exports.CustomModule =
= class
class CustomModule
CustomModule extends
extends FalconModule
FalconModule {

servicesRegistry(registry) {













### Adding
Adding Module
Module Custom
Custom Service


Falcon Module
Module services
services registry
registry allows
allows to
to define
define any
any custom
custom service,
service, not
not only
only Data
Data Sources,
Sources, Rest
Rest Endpoint
Endpoint Handlers
Handlers or
or Event
Event Handlers.
Handlers. We
We use
use that
that feature
feature inside
inside `@deity/falcon-payment-service-module`
`@deity/falcon-payment-service-module` in
in order
order to
to implement
implement `PaymentServiceClient`.
`PaymentServiceClient`. Following
Following example
example shows
shows how
how to
to do
do this



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ injectable
injectable }
} from
from 'inversify';

import {
{ FalconModule,
FalconModule, FalconModuleRegistryProps
FalconModuleRegistryProps }
} from
from '@deity/falcon-server-env';



export class
class FooClient
FooClient {

getFooById(id: number)
number) {

return {
{ id
id };




export class
class CustomModule
CustomModule extends
extends FalconModule<{}>
FalconModule<{}> {

servicesRegistry(registry: FalconModuleRegistryProps)
FalconModuleRegistryProps) {









<TabItem value="JavaScript">



const {
{ injectable,
injectable, decorate
decorate }
} =
= require('inversify');

const {
{ FalconModule
FalconModule }
} =
= require('@deity/falcon-server-env');


class FooClient
FooClient {

getFooById(id: number)
number) {

return {
{ id
id };



decorate(injectable(), FooClient);


class CustomModule
CustomModule extends
extends FalconModule
FalconModule {

servicesRegistry(registry) {







module.exports =
= {









Bare in
in mind,
mind, since
since custom
custom services
services are
are not
not recognizable
recognizable by
by Falcon
Falcon Server,
Server, these
these will
will not
not be
be used
used until
until at
at least
least one
one of
of the
the common
common services
services (Data
(Data Source,
Source, Rest
Rest Endpoint
Endpoint Handler
Handler or
or Event
Event Handler)
Handler) will
will use
use them.


## Creating
Creating new
new Module
Module with
with services
services auto-discovery


Falcon Module
Module common
common services
services auto-discovery
auto-discovery feature,
feature, lets
lets you
you just
just export
export classes
classes which
which extends:


- [Data
[Data Sources](./common-services/data-sources)

- [Event
[Event Handlers](./common-services/event-handlers)

- [Rest
[Rest Endpoint
Endpoint Handlers](./common-services/rest-endpoints)


Then Falcon
Falcon Server
Server during
during the
the startup
startup will
will analyse
analyse exported
exported by
by particular
particular module
module class,
class, and
and will
will do
do the
the required
required services
services registration
registration by
by himself.



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ FooDataSource
FooDataSource }
} from
from './FooDataSource';

import {
{ FooRestEndpointHandler
FooRestEndpointHandler }
} from
from './FooRestEndpointHandler';

import {
{ AfterInitializationEventHandler
AfterInitializationEventHandler }
} from
from './AfterInitializationEventHandler';


export {
{ FooDataSource,
FooDataSource, FooRestEndpointHandler,
FooRestEndpointHandler, AfterInitializationEventHandler
AfterInitializationEventHandler };




<TabItem value="JavaScript">



const {
{ FooDataSource
FooDataSource }
} =
= require('./FooDataSource);

const {
{ FooRestEndpointHandler
FooRestEndpointHandler }
} =
= require('./FooRestEndpointHandler');

const {
{ AfterInitializationEventHandler
AfterInitializationEventHandler }
} =
= require('./AfterInitializationEventHandler');


module.exports =
= {











## Extending
Extending Module


### Extending
Extending existing
existing module
module with
with manual
manual binding
binding example


<Tabs defaultValue="ts"
defaultValue="ts" values={[
values={[ {
{ label:
label: 'TypeScript',
'TypeScript', value:
value: 'ts'
'ts' },
}, {
{ label:
label: 'JavaScript',
'JavaScript', value:
value: 'js'
'js' }
} ]}>

<TabItem value="ts">



import {
{ injectable
injectable }
} from
from 'inversify';

import {

CommerceToolsModule: FalconCommerceToolsModule,

CommercetoolsDataSource: FalconCommercetoolsDataSource

} from
from `@deity/falcon-commercetools-module`;



class CommercetoolsDataSource
CommercetoolsDataSource extends
extends FalconCommercetoolsDataSource
FalconCommercetoolsDataSource {


console.log('Fetching project');


return super.project(...args);




export class
class CommerceToolsModule
CommerceToolsModule extends
extends CommerceToolsModule
CommerceToolsModule {

servicesRegistry(registry) {






gqlResolvers() {

return this.mergeGqlResolvers(super.gqlResolvers(),
this.mergeGqlResolvers(super.gqlResolvers(), {

Project: {

name: (root,
(root, params,
params, context,
context, info)
info) =>
=> {

return root.name.toUpperCase()









<TabItem value="js">



const {
{ decorate,
decorate, injectable
injectable }
} from
from 'inversify';

const {

CommerceToolsModule: FalconCommerceToolsModule,

CommercetoolsDataSource: FalconCommercetoolsDataSource

} =
= require(`@deity/falcon-commercetools-module`);


class CommercetoolsDataSource
CommercetoolsDataSource extends
extends FalconCommercetoolsDataSource
FalconCommercetoolsDataSource {


console.log('Fetching project');


return super.project(...args);



decorate(injectable(), CommercetoolsDataSource);



export class
class CommerceToolsModule
CommerceToolsModule extends
extends CommerceToolsModule
CommerceToolsModule {

servicesRegistry(registry) {






gqlResolvers() {

return this.mergeGqlResolvers(super.gqlResolvers(),
this.mergeGqlResolvers(super.gqlResolvers(), {

Project: {

name: (root,
(root, params,
params, context,
context, info)
info) =>
=> {

return root.name.toUpperCase()











### Module
Module common
common services
services auto-discovery


[As mentioned
mentioned earlier](#what-is-a-module-in-falcon)
earlier](#what-is-a-module-in-falcon) Falcon
Falcon Server
Server 3
3 modules
modules can
can expose
expose multiple
multiple things
things at
at once.


The easiest
easiest way
way to
to extend
extend Falcon
Falcon Server
Server with
with custom
custom module
module is
is to
to extend
extend the
the classes
classes provided
provided by
by Falcon
Falcon Server
Server and
and export
export these
these from
from a
a module.
module. During
During startup
startup Falcon
Falcon Server
Server will
will read
read everything
everything from
from within
within that
that module
module and
and base
base on
on the
the types
types of
of exported
exported things
things it
it will
will register
register these
these as
as proper
proper things
things in
in IOC
IOC container.


## Using
Using Service
Service Registry
Registry bindings


Falcon Module
Module services
services registry
registry is
is powerful
powerful tool
tool when
when it
it comes
comes into
into code
code organization.
organization. As
As described
described in
in introduction
introduction to
to [Falcon
[Falcon Module
Module API](module-api)
API](module-api) it
it lets
lets you
you extract
extract any
any kind
kind of
of dependency
dependency and
and also
also have
have access
access to
to dependencies
dependencies defined
defined via
via FalconServer
FalconServer itself.


In order
order to
to use
use any
any of
of registered
registered dependency
dependency you
you need
need to
to resolve
resolve them
them via
via constructor
constructor argument
argument injection
injection using
using `@inject()`
`@inject()` decorator.



<TabItem value="TypeScript"
value="TypeScript" default>



import {
{ injectable,
injectable, inject
inject }
} from
from 'inversify';

import {
{ FalconModule,
FalconModule, FalconModuleRegistryProps,
FalconModuleRegistryProps, DataSource
DataSource }
} from
from '@deity/falcon-server-env';



class FooMapper
FooMapper {

mapFoo(foo) {

return foo;
foo; //
// perform
perform some
some mapping





class FooDataSource
FooDataSource extends
extends DataSource
DataSource {

constructor(@inject('fetch') protected
protected fetch,
fetch, @inject('FooMapper')
@inject('FooMapper') protected
protected mapper:
mapper: FooMapper)
FooMapper) {}


async getFooById(id:
getFooById(id: string)
string) {

const response
response =
= await
await this.fetch(`https://foo.com/api/foo/${id}`);


return this.mapper.mapFoo(response);




export class
class FooModule
FooModule extends
extends FalconModule
FalconModule {

servicesRegistry(registry: FalconModuleRegistryProps)
FalconModuleRegistryProps) {










<TabItem value="JavaScript">




// const
const {
{ injectable,
injectable, decorate
decorate }
} =
= require('inversify');

// const
const {
{ FalconModule,
FalconModule, DataSource
DataSource }
} =
= require('@deity/falcon-server-env');


// class
class FooDataSource
FooDataSource extends
extends DataSource
DataSource {}

// decorate(injectable(),
decorate(injectable(), FooDataSource);


// module.exports.CustomModule
module.exports.CustomModule =
= class
class CustomModule
CustomModule extends
extends FalconModule
FalconModule {

// servicesRegistry(registry)
servicesRegistry(registry) {

// super.servicesRegistry(registry);


// registry.bind('FooDataSource').toDataSource(FooDataSource);

// }

// };






To see
see more
more advanced
advanced examples
examples please
please see
see [Custom
[Custom Modules](./custom-module)
Modules](./custom-module) section.


To see
see full
full list
list of
of services
services provided
provided by
by default
default via
via Falcon
Falcon Server
Server please
please see
see [Falcon
[Falcon Server
Server services](./injectable-services)
services](./injectable-services) section.


### Cross
Cross Modules
Modules services
services access


## Falcon
Falcon Server
Server injectable
injectable services


### Fetch


### Logger


### Config


### Container


### Event
Event Emitter


id: contentful-module

title: Contentful
Contentful module

sidebar_label: Contentful
Contentful module

enterprise_only: true


 
import CodePackage
CodePackage from
from '@site/src/components/CodePackage';


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


<CodePackage name="@deity/falcon-contentful-module"
name="@deity/falcon-contentful-module" />
 



id: about

title: Modules
Modules in
in Falcon
Falcon Server

sidebar_label: Introduction

enterprise_only: true


import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>


## List
List of
of available
available modules


- [BigCommerce
[BigCommerce module
module (shop)](bigcommerce-module)

- [Magento2
[Magento2 module
module (shop)](magento2-module)

- [Contentful
[Contentful module
module (blog)](contentful-module)

- [WordPress
[WordPress module
module (blog)](wordpress-module)

- [Algolia
[Algolia search
search module
module (search)](algolia-search-module)


## What
What is
is a
a module
module in
in Falcon


A module
module is
is a
a package
package that
that contains
contains implementations
implementations of
of all
all the
the pieces
pieces required
required to
to achieve
achieve a
a particular
particular thing.
thing. Each
Each module
module needs
needs to
to export
export its
its content
content via
via named
named exports,
exports, default
default exports
exports will
will be
be ignored.
ignored. Our
Our middleware
middleware (Falcon
(Falcon Server)
Server) expects
expects only
only known
known module
module extension
extension classes
classes (common
(common services),
services), everything
everything else
else will
will be
be ignored:


- [Data
[Data Source](./common-services/data-sources)
Source](./common-services/data-sources) -
- Used
Used by
by GraphQL
GraphQL resolvers
resolvers to
to fetch
fetch the
the data
data from
from various
various services.
services. By
By default,
default, A
A module
module can
can contain
contain only
only one
one DataSource
DataSource (due
(due to
to GraphQL
GraphQL resolvers
resolvers auto-binding).
auto-binding). However,
However, by
by using
using our
our dependency
dependency injection
injection (DI)
(DI) framework,
framework, you
you can
can define
define more
more of
of them,
them, please
please read
read more
more about
about DI
DI in
in our
our [Falcon
[Falcon Module
Module and
and Dependency
Dependency Injection](#falcon_module_and_dependency_injection)
Injection](#falcon_module_and_dependency_injection) section.

- [Rest
[Rest Endpoint
Endpoint Handler](./common-services/rest-endpoints)
Handler](./common-services/rest-endpoints) -
- REST
REST webhook
webhook handler
handler allows
allows you
you to
to execute
execute any
any action
action for
for incoming
incoming HTTP
HTTP requests.
requests. A
A module
module can
can contain
contain as
as many
many REST
REST endpoint
endpoint handlers
handlers as
as you
you want.

- [Event
[Event Handler](./common-services/event-handlers)
Handler](./common-services/event-handlers) -
- Handler
Handler for
for in-proc
in-proc emitted
emitted events.
events. a
a module
module can
can contain
contain any
any number
number of
of these.


However, Falcon
Falcon Module
Module allows
allows you
you to
to compose
compose code
code according
according to
to [Inversion
[Inversion of
of Control](https://en.wikipedia.org/wiki/Inversion_of_control)
Control](https://en.wikipedia.org/wiki/Inversion_of_control) principle,
principle, which
which is
is helpful
helpful with
with a
a large
large codebase
codebase and
and makes
makes unit-testing
unit-testing easier.
easier. We
We highly
highly recommend
recommend this
this approach.
approach. A
A Module
Module needs
needs to
to export
export the
the following:


- [Falcon
[Falcon Module](./module-api)
Module](./module-api) -
- This
This should
should be
be a
a structured
structured representation
representation of
of module
module definition.
definition. Only
Only one
one can
can exist
exist per
per module.


### Old
Old vs
vs new
new approach


In previous
previous versions
versions of
of Falcon
Falcon Server
Server (version
(version 2),
2), there
there was
was a
a distinct
distinct separation
separation between
between extensions,
extensions, API
API clients,
clients, rest
rest endpoint
endpoint handlers,
handlers, and
and event
event handlers.
handlers. Each
Each of
of these
these needed
needed to
to be
be implemented
implemented and
and loaded
loaded as
as a
a separate
separate package.
package. Falcon
Falcon Server
Server 3
3 changes
changes that
that approach
approach and
and introduces
introduces the
the concept
concept of
of a
a module.


So in
in comparison
comparison to
to version
version 2,
2, version
version 3
3 modules
modules are
are a
a container
container that
that groups
groups all
all the
the above
above things
things into
into one
one package.


In Falcon
Falcon Server
Server v2
v2 it
it was
was necessary
necessary to
to add
add multiple
multiple packages
packages to
to have
have full
full coverage
coverage of
of features.
features. If
If we
we consider
consider shop
shop features
features that
that will
will be
be handled
handled service
service X
X (Magento,
(Magento, BigCommerce,
BigCommerce, CommerceTools,
CommerceTools, etc)
etc) the
the following
following packages
packages are
are required:


- `@deity/falcon-shop-extension`
`@deity/falcon-shop-extension` that
that provides
provides GraphQL
GraphQL schema
schema for
for shop
shop features

- `@deity/falcon-X-api`
`@deity/falcon-X-api` that
that provides
provides resolvers
resolvers and
and all
all the
the calls
calls to
to service
service X
X (implements
(implements the
the shop
shop features)

- `@deity/falcon-X-endpoints`
`@deity/falcon-X-endpoints` that
that provides
provides REST
REST handlers
handlers (e.g.
(e.g. webhooks,
webhooks, or
or callbacks
callbacks for
for payments)

- `@deity/falcon-X-event-handlers`
`@deity/falcon-X-event-handlers` that
that provides
provides handlers
handlers for
for events
events in
in Falcon
Falcon Server
Server (if
(if such
such are
are required)


In Falcon
Falcon Server
Server v3
v3 you
you need
need only:


- `@deity/falcon-X-extension`
`@deity/falcon-X-extension` that
that provides
provides GraphQL
GraphQL schema
schema for
for a
a specified
specified feature
feature e.g.
e.g. shop
shop or
or blog

- `@deity/falcon-X-module`
`@deity/falcon-X-module` that
that provides
provides an
an implementation
implementation of
of all
all the
the required
required things
things in
in one
one package


## Module
Module and
and extension
extension relation


Please keep
keep in
in mind
mind that
that extension
extension packages
packages are
are required
required because
because they
they provide
provide GraphQL
GraphQL schema
schema that
that will
will be
be exposed
exposed to
to GraphQL
GraphQL clients.


So now,
now, the
the two
two things
things need
need to
to be
be provided:


- extension
extension which
which is
is an
an "interface"
"interface" for
for a
a particular
particular feature

- module
module which
which is
is an
an "implementation"
"implementation" of
of that
that feature


## Configuring
Configuring a
a module


In order
order to
to enable
enable a
a module
module in
in Falcon
Falcon Server,
Server, you
you need
need to
to add
add its
its configuration
configuration into
into the
the `config.json`
`config.json` (normally
(normally `server/config/default.json`)
`server/config/default.json`) file
file under
under the
the `"modules"`
`"modules"` section.




"modules": {

"my-module": {

"package": "<path>"






As you
you can
can see,
see, Falcon
Falcon Server
Server expects
expects a
a key-value
key-value map
map of
of modules
modules in
in most
most cases,
cases, the
the order
order does
does not
not matter.


We recommend
recommend adding
adding your
your base
base configuration
configuration in
in `server/config/default.json`
`server/config/default.json` file
file so
so it
it will
will be
be available
available no
no matter
matter what
what mode
mode (`development`,
(`development`, `production`
`production` or
or any
any custom)
custom) Falcon
Falcon Server
Server is
is running
running in.
in. If
If a
a module
module requires
requires some
some credentials
credentials that
that should
should be
be secret
secret and
and not
not committed
committed to
to your
your git
git repository
repository then
then that
that configuration
configuration can
can be
be added
added in
in `server/config/local.json`
`server/config/local.json` for
for local
local development
development and
and as
as environment
environment variables
variables for
for remote
remote apps.
apps. See
See the
the configuration
configuration guide
guide for
for more
more details.


Module configuration
configuration can
can be
be described
described in
in following
following way:



type ModuleConfiguration
ModuleConfiguration =
= {

package: string;

enabled?: boolean;

config?: Record<string,
Record<string, any>;




- `package:
`package: string`
string` -
- path
path to
to Module
Module entry
entry point,
point, tells
tells Falcon
Falcon Server
Server wherefrom
wherefrom the
the module
module should
should be
be loaded.
loaded. It
It can
can be
be an
an `npm`
`npm` package
package name
name (e.g.
(e.g. `@deity/falcon-magento2-module`),
`@deity/falcon-magento2-module`), which
which of
of course
course needs
needs to
to be
be installed,
installed, so
so added
added to
to `package.json`
`package.json` file
file or
or path
path relative
relative to
to the
the root
root of
of your
your server
server application
application to
to a
a local
local module
module placed
placed inside
inside application
application folder
folder (e.g.
(e.g. `./src/my-module`).

- `enabled?:
`enabled?: boolean`
boolean` -
- determines
determines if
if the
the module
module should
should be
be loaded,
loaded, it
it is
is optional,
optional, the
the default
default value
value is
is `true`

- `config?:
`config?: Record<string,
Record<string, any>`
any>` -
- configuration
configuration associated
associated with
with a
a module,
module, this
this is
is a
a place
place for
for any
any module-specific
module-specific configuration,
configuration, it
it is
is optional


So let's
let's assume
assume that
that we
we want
want to
to add
add a
a Deity
Deity Falcon
Falcon module
module that
that fetches
fetches the
the data
data from
from WordPress.
WordPress. Then
Then you
you can
can use
use the
the following
following snippet
snippet in
in your
your `config/default.json`
`config/default.json` file:




"modules": {

"wordpress": {

"package": "@deity/falcon-wordpress-module",

"config": {

"configKey": "configValue"







In the
the case
case of
of using
using local
local module
module it
it would
would be:




"modules": {

"wordpress": {

"package": "src/custom-wordpress-module",

"config": {

"configKey": "configValue"







and then
then Falcon
Falcon Server
Server on
on startup
startup will
will try
try to
to load
load `src/custom-wordpress-module/index.js`
`src/custom-wordpress-module/index.js` file.


### Configure
Configure Module
Module in
in a
a programmatic
programmatic way


**TODO: decide
decide if
if we
we want
want to
to describe
describe it
it in
in official
official docs**




## Custom
Custom modules


All the
the integrations
integrations available
available in
in Falcon
Falcon Platform
Platform are
are implemented
implemented as
as extensions
extensions +
+ modules.
modules. When
When you
you want
want to
to add
add new
new features
features or
or change
change the
the existing
existing behavior
behavior you'll
you'll need
need to
to add
add [Extension](../extensions/about)
[Extension](../extensions/about) and
and a
a module
module that
that implements
implements features
features for
for that
that Extension.


Modules can
can be
be registered
registered in
in 2
2 ways
ways -
- with
with an
an auto-discovery
auto-discovery mechanism
mechanism or
or manually.


### Module
Module auto-discovery


[As mentioned
mentioned earlier](#what-is-a-module-in-falcon)
earlier](#what-is-a-module-in-falcon) Falcon
Falcon Server
Server 3
3 modules
modules can
can expose
expose multiple
multiple things
things at
at once.


The easiest
easiest way
way to
to extend
extend Falcon
Falcon Server
Server with
with a
a custom
custom module
module is
is to
to extend
extend the
the classes
classes provided
provided by
by Falcon
Falcon Server
Server and
and export
export these
these from
from a
a module.
module. During
During startup
startup Falcon
Falcon Server
Server will
will read
read everything
everything from
from within
within that
that module
module and
and base
base on
on the
the base
base types
types of
of exported
exported things
things it
it will
will register
register these
these as
as proper
proper things
things in
in IOC
IOC container.
container. Falcon
Falcon Server
Server accept
accept only
only [Data
[Data Sources](./common-services/data-sources),
Sources](./common-services/data-sources), [Rest
[Rest Endpoint
Endpoint Handlers](./common-services/rest-endpoints)
Handlers](./common-services/rest-endpoints) and
and [Event
[Event Handlers](./common-services/event-handlers),
Handlers](./common-services/event-handlers), anything
anything else
else will
will be
be ignored.
ignored. But
But if
if your
your module
module exports
exports [Falcon
[Falcon Module](./module-api)
Module](./module-api) then
then only
only it
it will
will be
be loaded
loaded according
according to
to [Manual
[Manual binding
binding for
for module](#manual-binding-for-module)


See examples
examples of
of [Data
[Data Sources](./common-services/data-sources),
Sources](./common-services/data-sources), [Rest
[Rest Endpoint
Endpoint Handlers](./common-services/rest-endpoints)
Handlers](./common-services/rest-endpoints) and
and [Event
[Event Handlers](./common-services/event-handlers)
Handlers](./common-services/event-handlers) for
for the
the details.


### Manual
Manual binding
binding for
for module


When you
you need
need to
to add
add a
a custom
custom behavior
behavior to
to Falcon
Falcon Server
Server which
which is
is more
more complex
complex or
or when
when you
you need
need to
to control
control lifetime
lifetime of
of the
the instances
instances of
of your
your modules
modules you
you might
might want
want to
to implement
implement the
the module
module in
in a
a manual
manual way.


In that
that case
case you
you need
need to
to implement
implement all
all the
the classes
classes as
as usual
usual and
and then
then use
use [Falcon
[Falcon Module](./module-api)
Module](./module-api) to
to register
register these
these classes
classes to
to be
be loaded
loaded and
and instantiated
instantiated in
in a
a particular
particular way.


[Module auto-discovery](#module-auto-discovery)
auto-discovery](#module-auto-discovery) mechanism
mechanism will
will not
not be
be executed,
executed, so
so you
you need
need to
to take
take care
care about
about every
every registration
registration yourself.


id: injectable-services

title: Injectable
Injectable Services

sidebar_label: Injectable
Injectable Services

enterprise_only: true



import Badge
Badge from
from '@site/src/components/Badge';


<Badge variant="green">NEW
variant="green">NEW V3
V3 DOC</Badge><br/><br/>




id: overview

title: Configuration
Configuration Overview

sidebar_label: Overview



Falcon Client
Client and
and Falcon
Falcon Server
Server configs
configs work
work in
in the
the same
same way.


Falcon Client
Client configuration
configuration can
can be
be found
found in
in the
the `client/config`
`client/config` directory
directory and
and Falcon
Falcon Server's
Server's config
config is
is found
found in
in `server/config`.


The config
config is
is set
set up
up use
use <a
<a href="https://www.npmjs.com/package/config"
href="https://www.npmjs.com/package/config" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">`NPM
noreferrer">`NPM Config`</a>.


Each of
of the
the config
config files
files is
is merged
merged to
to create
create your
your applications
applications configuration.


- `default.json`

- `local.json`
`local.json` (optional)

- `[NODE_CONFIG_ENV].json`
`[NODE_CONFIG_ENV].json` (optional)

- `custom-environment-variables.json`
`custom-environment-variables.json` (optional)


## Config
Config priority
priority /
/ order


The order
order in
in which
which the
the config
config files
files are
are merged
merged is:


`default.json` <
< `[NODE_CONFIG_ENV].json`
`[NODE_CONFIG_ENV].json` <
< `local.json`
`local.json` <
< `custom-environment-variables.json`


## default.json


The `default.json`
`default.json` contains
contains shared
shared config
config that
that can
can be
be committed
committed to
to your
your repository
repository (not
(not passwords
passwords and
and API
API keys).


## [NODE_CONFIG_ENV].json


The name
name of
of this
this file
file depends
depends on
on the
the config
config `NODE_CONFIG_ENV`.
`NODE_CONFIG_ENV`. For
For your
your `production`
`production` environment
environment it
it would
would be
be `production.json`
`production.json` and
and would
would only
only be
be loaded
loaded on
on that
that env.
env. For
For this
this reason
reason this
this file
file should
should contain
contain environment
environment specific
specific config.


## local.json


This file
file is
is **not**
**not** committed
committed to
to your
your repository.
repository. It
It **can**
**can** contain
contain sensitive
sensitive data
data such
such as
as API
API keys
keys and
and passwords
passwords you're
you're using
using for
for your
your application
application locally.


## custom-environment-variables.json


This file
file has
has the
the highest
highest priority
priority and
and should
should be
be used
used to
to map
map config
config to
to environment
environment variables
variables (set
(set on
on your
your Node
Node environment).
environment). These
These mapping
mapping can
can be
be used
used for
for sensitive
sensitive data
data such
such as
as passwords
passwords that
that you
you wouldn't
wouldn't want
want committed
committed to
to your
your repository.


If you're
you're using
using Falcon
Falcon Cloud
Cloud you
you can
can set
set env
env variables
variables using
using the
the [dcloud
[dcloud CLI
CLI tool](/platform/cloud/dcloud).


**CLI Command**



dcloud env:var:set
env:var:set <env>
<env> <name>
<name> [value]




dcloud env:var:set
env:var:set production
production GTM_CODE
GTM_CODE XXXXXXXXX







"googleTagManager": {

"id": "GTM_CODE"





### Adding
Adding encrypted
encrypted environment
environment variables
variables in
in DCloud


If an
an environment
environment variable
variable such
such as
as an
an API
API secret
secret key
key needs
needs to
to be
be encrypted
encrypted you
you simply
simply need
need to
to use
use the
the `-s`
`-s` or
or `--secret`
`--secret` flag
flag when
when setting
setting it.



dcloud env:var:set
env:var:set -s
-s production
production GTM_CODE
GTM_CODE XXXXXXXXX



id: server

title: Falcon
Falcon Server
Server Configuration

sidebar_label: Falcon
Falcon Server

enterprise_only: true



Accessing server
server config
config is
is simple.


As your
your `APIs`,
`APIs`, `payments`,
`payments`, `components`
`components` and
and `extensions`
`extensions` are
are all
all defined
defined in
in the
the config
config files
files themselves
themselves you
you are
are able
able to
to pass
pass config
config variables
variables at
at that
that point.





"package": "your-package",

"config": {

"title": "MY
"MY METHOD"





This config
config is
is available
available within
within the
the constructor
constructor method:




module.exports =
= class
class YourPackage
YourPackage {


constructor(code, config)
config) {

this.config =
= config;



get title()
title() {

return this.config.title;
this.config.title; //
// returns
returns 'MY
'MY METHOD'





id: client

title: Falcon
Falcon Client
Client Configuration

sidebar_label: Falcon
Falcon Client



Configs are
are stored
stored as
as an
an object
object in
in [Apollo
[Apollo State](/platform/client/state).


`config` has
has **no
**no schema**
schema** meaning
meaning you
you can
can add
add anything
anything you
you like.


## Google
Google Analytics
Analytics Example


This example
example shows
shows how
how to
to retrieve
retrieve and
and use
use these
these configs
configs in
in your
your components.





query ANALYTICS
ANALYTICS {

config @client
@client {

googleAnalytics {







We pass
pass our
our query
query to
to `withApollo`
`withApollo` to
to access
access configs.
configs. This
This passes
passes `client`
`client` as
as a
a prop:



const {
{ client
client }
} =
= props;



This can
can then
then be
be used
used to
to query
query the
the Apollo
Apollo stateL



const {
{ config
config }
} =
= client.readQuery({
client.readQuery({ query:
query: ANALYTICS
ANALYTICS })
}) ||
|| {};



**See the
the full
full example
example component**



import React
React from
from 'react';

import {
{ withApollo
withApollo }
} from
from '@apollo/react-hoc';

import GAnalytics
GAnalytics from
from 'ganalytics';

import {
{ ANALYTICS
ANALYTICS }
} from
from '../graphql/analytics.gql';


let ga
ga =
= null;


export default
default WrappedComponent
WrappedComponent =>
=> {

const WithAnalytics
WithAnalytics =
= props
props =>
=> {

if (process.browser
(process.browser &&
&& !ga)
!ga) {

const {
{ client
client }
} =
= props;

const {
{ config
config }
} =
= client.readQuery({
client.readQuery({ query:
query: ANALYTICS
ANALYTICS })
}) ||
|| {};

const {
{ googleAnalytics
googleAnalytics }
} =
= config
config ||
|| {};

const {
{ trackerID
trackerID }
} =
= googleAnalytics
googleAnalytics ||
|| {};


if (trackerID)
(trackerID) {

ga =
= new
new GAnalytics(trackerID,
GAnalytics(trackerID, {},
{}, true);




return <WrappedComponent
<WrappedComponent {...props}
{...props} ga={ga}
ga={ga} />;



return withApollo(WithAnalytics);




This same
same principle
principle can
can used
used for
for all
all client
client configs.


id: overview

title: Overview

sidebar_label: Overview

enterprise_only: true



Payments can
can be
be handled
handled in
in 2
2 ways,
ways, either
either via
via your
your shop
shop or
or using
using our
our payments
payments package,
package, [`@deity/falcon-payments`](falcon-payments/overview).


We **highly
**highly recommend**
recommend** using
using [`@deity/falcon-payments`](falcon-payments/overview)
[`@deity/falcon-payments`](falcon-payments/overview) as
as this
this will
will provide
provide the
the most
most flexibility,

ensure your
your server
server doesn't
doesn't need
need to
to be
be PCI-compliant
PCI-compliant (all
(all payments
payments are
are handled
handled on
on the
the client-side)
client-side) and
and we
we are
are continuously
continuously adding

support for
for new
new payment
payment providers.


### Payment
Payment using
using your
your shop


Payment methods
methods can
can be
be retrieved
retrieved from
from your
your shop
shop backend.
backend. Falcon
Falcon can
can simply
simply display
display a
a UI
UI and
and pass
pass order
order details
details to
to the
the backend
backend via
via Falcon
Falcon Server.
Server. These
These are
are processed
processed using
using your
your shops
shops backend
backend and
and NOT
NOT by
by Falcon.


### Payments
Payments using
using Falcon
Falcon Payments
Payments (Recommended)


Falcon Payments
Payments package
package acts
acts as
as a
a middleware
middleware and
and handles
handles all
all payment
payment processing
processing via
via APIs
APIs directly
directly communicating
communicating with
with payment
payment providers.
providers. This
This then
then sends
sends payment
payment statuses
statuses to
to your
your shops
shops API
API via
via webhooks.

[Learn more
more about
about `@deity/falcon-payments`](falcon-payments/overview)



#### Falcon
Falcon Payments
Payments integrations


import PaymentProviders
PaymentProviders from
from '../../../../src/components/PaymentProviders';


<PaymentProviders />


id: overview

title: Falcon
Falcon Payments

sidebar_label: Overview

enterprise_only: true



Falcon Payments
Payments package
package is
is designed
designed to
to make
make integrating
integrating with
with new
new payment
payment providers
providers clear
clear and
and simple.


We currenlty
currenlty have
have integrations
integrations with
with <a
<a href="https://www.mollie.com/"
href="https://www.mollie.com/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Mollie</a>
noopener">Mollie</a> &amp;
&amp; <a
<a href="https://stripe.com/"
href="https://stripe.com/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Stripe</a>,
noopener">Stripe</a>, more
more integrations
integrations will
will be
be added
added soon.




alt="Falcon Payment
Payment providers
providers diagram"


style={{ marginBottom:
marginBottom: 20
20 }}



## Payment
Payment Flow
Flow Overview


import HighlightFlag
HighlightFlag from
from '../../../../../src/components/HighlightFlag';


1. <HighlightFlag
<HighlightFlag text="PSP"
text="PSP" />
/> Account
Account /
/ API
API keys
keys created


2. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> Payment
Payment provider
provider created
created and
and configured
configured in
in Falcon
Falcon config
config files.


3. <HighlightFlag
<HighlightFlag type="client"
type="client" />
/> Customer
Customer goes
goes to
to payment
payment method
method selection


4. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> `getMethodList`
`getMethodList` triggered
triggered and
and returns
returns list
list of
of methods


5. <HighlightFlag
<HighlightFlag type="client"
type="client" />
/> Method
Method selected


6. <HighlightFlag
<HighlightFlag type="client"
type="client" />
/> Client
Client side
side component
component initiated


7. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> Triggers
Triggers `loadMethod`
`loadMethod` method
method in
in payment
payment provider.
provider. Authentication
Authentication requested


8. <HighlightFlag
<HighlightFlag text="PSP"
text="PSP" />
/> Token
Token /
/ Auth
Auth info
info returned


9. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> PSP
PSP auth
auth pushed
pushed to
to client
client side
side component


10. <HighlightFlag
<HighlightFlag type="client"
type="client" />
/> User
User triggers
triggers payment
payment (fills
(fills in
in form
form and
and submits)


11. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> Triggers
Triggers `validate`
`validate` method
method in
in payment
payment provider


12. <HighlightFlag
<HighlightFlag text="PSP"
text="PSP" />
/> Payment
Payment handled


13. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> Payment
Payment response
response handled
handled (either
(either as
as success
success or
or returns
returns a
a redirect
redirect link
link (used
(used for
for 3D
3D secure




## Our
Our Integrations


import PaymentProviders
PaymentProviders from
from '../../../../../src/components/PaymentProviders';


<PaymentProviders />


id: integration

title: Falcon
Falcon Payments
Payments Integration

sidebar_label: Integration
Integration Guide



We recommend
recommend using
using one
one of
of our
our example
example apps
apps as
as a
a start
start place,
place, these
these are
are already
already setup
setup using
using Falcon
Falcon Payments.


This guide
guide will
will talk
talk you
you though
though how
how those
those integrations
integrations work
work and
and how
how to
to create
create your
your own.


## 1.
1. Getting
Getting and
and setting
setting payment
payment methods


Getting the
the available
available shipping
shipping methods
methods in
in a
a component
component is
is simple.


We'll be
be using
using the
the `PaymentMethodListQuery`
`PaymentMethodListQuery` query
query from
from `@deity/falcon-shop-data`
`@deity/falcon-shop-data` and
and `SetPaymentMethod`
`SetPaymentMethod` from
from `@deity/falcon-front-kit`.


First you'll
you'll need
need to
to ensure
ensure your
your shop
shop API
API has
has a
a `paymentMethodList`
`paymentMethodList` method
method that
that returns
returns methods.
methods. If
If you're
you're using
using one
one of
of our
our existing
existing integrations
integrations this
this will
will exist
exist already.


In your
your client
client side
side component
component the
the code
code is
is as
as simple
simple as:




import {
{ PaymentMethodListQuery
PaymentMethodListQuery }
} from
from '@deity/falcon-shop-data';

import {
{ SetPaymentMethod
SetPaymentMethod }
} from
from '@deity/falcon-front-kit';


export const
const PaymentMethodSection
PaymentMethodSection =
= ()
() =>
=> {


const [state,
[state, setState]
setState] =
= useState(values.paymentMethod
useState(values.paymentMethod ||
|| undefined);


<PaymentMethodListQuery fetchPolicy="network-only">

{({ data:
data: {
{ paymentMethodList
paymentMethodList }
} })
}) =>
=> {

if (paymentMethodList.length
(paymentMethodList.length ===
=== 0)
0) {

return (

<p>No Methods</p>




return (


{(setPayment, {
{ error,
error, loading
loading })
}) =>
=> (


{paymentMethodList.map(method =>
=> (



onChange={() =>
=> setState(method)}

checked={state ?
? getMethodID(method)
getMethodID(method) ===
=== getMethodID(state)
getMethodID(state) :
: false}








onClick={() =>
=> {



disabled={!state ||
|| !state.provider}













In this
this example
example we
we get
get the
the available
available methods
methods from
from `PaymentMethodListQuery`
`PaymentMethodListQuery` and
and set
set the
the payment
payment method
method using
using the
the `setPayment`
`setPayment` method
method from
from `SetPaymentMethod`.


## 2.
2. Loading
Loading the
the payment
payment UI


The next
next thing
thing you'll
you'll want
want to
to do
do is
is to
to get
get the
the selected
selected payment
payment method
method and
and load
load the
the payment
payment UI.


We use
use `loadable`
`loadable` so
so only
only the
the selected
selected method
method is
is loaded.
loaded. As
As you
you can
can see
see from
from the
the code
code below
below we
we use
use the
the provider
provider code
code and
and method
method (if
(if available)
available) to
to define
define which
which UI
UI components
components to
to load.



const paymentCodeToPluginMap
paymentCodeToPluginMap =
= {

cash: `SimplePayment`,

stripe: `Stripe`,

mollie: {

creditcard: `Mollie/CreditCard`,

paypal: 'Mollie/PayPal',

ideal: 'Mollie/Ideal',

klarnapaylater: 'Mollie/KlarnaPayLater',

giftcard: 'Mollie/Giftcard',

default: 'Mollie/Default'



paymentCodeToPluginMap.getFor =
= (providerCode,
(providerCode, method)
method) =>
=> {

const provider
provider =
= providerCode
providerCode in
in paymentCodeToPluginMap
paymentCodeToPluginMap ?
? paymentCodeToPluginMap[providerCode]
paymentCodeToPluginMap[providerCode] :
: undefined;

if (typeof
(typeof provider
provider ===
=== 'object')
'object') {

return provider[method]
provider[method] ?
? provider[method]
provider[method] :
: provider.default;


return provider;



const getPaymentUI
getPaymentUI =
= (provider)
(provider) =>

loadable(() =>

import(/* webpackChunkName:
webpackChunkName: "shop/checkout/payments/[request]"
"shop/checkout/payments/[request]" */
*/ `../components/payments/${provider}`)




Now we
we render
render the
the component.
component. We're
We're able
able to
to get
get the
the selected
selected method
method from
from `useCheckout`



import {
{ useCheckout
useCheckout }
} from
from '@deity/falcon-front-kit';


export const
const PlaceOrderSection
PlaceOrderSection =
= ()
() =>
=> {

const {
{ values,
values, setStep,
setStep, result
result }
} =
= useCheckout();

const {
{ paymentMethod
paymentMethod }
} =
= values;

const [placeOrder,
[placeOrder, {
{ loading,
loading, error
error }]
}] =
= usePlaceOrder();


const paymentPlugin
paymentPlugin =
= paymentCodeToPluginMap.getFor(paymentMethod.provider,
paymentCodeToPluginMap.getFor(paymentMethod.provider, paymentMethod.method);

if (!paymentPlugin)
(!paymentPlugin) {

if (process.env.NODE_ENV
(process.env.NODE_ENV !==
!== 'production')
'production') {

console.error(`No Payment
Payment Method
Method Plugin
Plugin found
found for
for ${paymentMethod.provider}`);




const Payment
Payment =
= useRef(getPaymentUI(paymentPlugin)).current;


return (


<Payment {...paymentMethod}>

{(pay, {
{ loading:
loading: paying
paying })
}) =>
=> (


{Payment.UI &&
&& <Payment.UI
<Payment.UI />}


onClick={() =>

pay().then((payResult) =>




paymentMethod: {


data: {







awaitRefetchQueries: false





loading={paying ||
|| loading}


<T id="checkout.placeOrder"
id="checkout.placeOrder" />


<ErrorSummary errors={error}
errors={error} mt="sm"
mt="sm" />





{result &&
&& result.url
result.url &&
&& <TestAdditionalPaymentStep
<TestAdditionalPaymentStep {...result}
{...result} />}

{result &&
&& result.id
result.id &&
&& <Redirect
<Redirect to="/checkout/confirmation"
to="/checkout/confirmation" />}






You'll notice
notice we
we have
have 2
2 additional
additional components
components also
also loaded:




result &&
&& result.url
result.url &&
&& <TestAdditionalPaymentStep
<TestAdditionalPaymentStep {...result}
{...result} />;



result &&
&& result.id
result.id &&
&& <Redirect
<Redirect to="/checkout/confirmation"
to="/checkout/confirmation" />;




`TestAdditionalPaymentStep` is
is used
used to
to handle
handle payment
payment methods
methods that
that require
require an
an additional
additional step,
step, e.g.
e.g. 3D
3D secure.

`Redirect` simple
simple redirects
redirects a
a user
user to
to your
your desired
desired success
success page
page if
if result
result exists
exists in
in `useCheckout`.


## 3.
3. Example
Example UI
UI Components


The UI
UI components
components for
for each
each method
method can
can vary,
vary, some
some being
being very
very simple
simple and
and some
some needing
needing additional
additional info
info (e.g.
(e.g. a
a credit
credit card
card form).


### Simple
Simple UI
UI Example


The `Payment.UI`
`Payment.UI` can
can return
return `null`
`null` if
if you
you don't
don't need
need to
to display
display anything
anything other
other than
than the
the name
name of
of the
the method.


In this
this example
example below
below we
we display
display a
a simple
simple line
line of
of text
text informing
informing the
the customer
customer they'll
they'll be
be redirected
redirected to
to complete
complete the
the payment.


It's important
important that
that the
the `pay`
`pay` method
method is
is passed
passed to
to the
the children
children of
of `Payment`.



import React,
React, {
{ useCallback
useCallback }
} from
from 'react';

import {
{ T
T }
} from
from '@deity/falcon-i18n';

import {
{ Text,
Text, FlexLayout,
FlexLayout, withTheme
withTheme }
} from
from '@deity/falcon-ui';


const Payment
Payment =
= withTheme(({
withTheme(({ children
children })
}) =>
=> {

const pay
pay =
= useCallback(()
useCallback(() =>
=> Promise.resolve({
Promise.resolve({ id:
id: undefined
undefined }),
}), []);

return children(pay,
children(pay, {
{ loading:
loading: false
false });



Payment.UI =
= ()
() =>
=> (

<FlexLayout as="section"
as="section" my="xs"
my="xs" css={{
css={{ width:
width: '100%'
'100%' }}>

<Text mt="xs"
mt="xs" color="secondaryText"
color="secondaryText" fontWeight="regular">

<T id="payment.redirect.default"
id="payment.redirect.default" />





export default
default Payment;



### Complex
Complex UI
UI Example


This example
example is
is taken
taken from
from our
our `Stripe`
`Stripe` credit
credit card
card form.
form. We
We wrap
wrap the
the entire
entire form
form in
in `StripePlugin`,
`StripePlugin`, this
this loads
loads the
the various
various scripts
scripts that
that are
are needed
needed to
to load
load the
the Stripe
Stripe card
card fields.
fields. You'll
You'll notice
notice we
we pass
pass `prop`
`prop` to
to `StripePlugin`.
`StripePlugin`. These
These props
props are
are passed
passed from
from `Falcon
`Falcon Payment`
Payment` and
and depending
depending on
on your
your method
method are
are likely
likely to
to contain
contain API
API keys
keys needed
needed to
to load
load the
the UI.



import React,
React, {
{ useState
useState }
} from
from 'react';

import {
{ StripePlugin,
StripePlugin, CardElement
CardElement }
} from
from '@deity/falcon-stripe-plugin';

import {
{ Box
Box }
} from
from '@deity/falcon-ui';


const Payment
Payment =
= ({
({ children,
children, ...props
...props })
}) =>
=> {

const [loading,
[loading, setLoading]
setLoading] =
= useState(false);

const fn
fn =
= ()
() =>
=> {


return Promise.resolve();



return (

<StripePlugin {...props}>

{(pay) =>


() =>


.then(() =>
=> pay())

.then((x) =>
=> {


return x;


.catch((x) =>
=> {


return Promise.reject(x);


{ loading
loading }






Payment.UI =
= ()
() =>
=> (


{/* https://stripe.com/docs/stripe-js/reference#element-options
https://stripe.com/docs/stripe-js/reference#element-options */}

<CardElement hidePostalCode
hidePostalCode />




export default
default Payment;



id: webhooks

title: Falcon
Falcon Payments
Payments Webhooks

sidebar_label: Webhooks

enterprise_only: true



Falcon Payments
Payments can
can handle
handle 2
2 webhooks
webhooks out
out of
of the
the box.


- `handlePaymentUpdate`
`handlePaymentUpdate` This
This is
is normally
normally triggered
triggered by
by the
the payment
payment provider
provider when
when a
a payment
payment is
is updated.
updated. `Payment
`Payment Provider
Provider ->
-> Falcon
Falcon Payments
Payments ->
-> Shop`.

- `handleOrderUpdate`
`handleOrderUpdate` This
This is
is normally
normally triggered
triggered by
by your
your shop
shop and
and is
is used
used when
when an
an order
order is
is updated.
updated. `Shop
`Shop ->
-> Falcon
Falcon Payments
Payments ->
-> Payment
Payment Provider`.




## Payment
Payment Updated
Updated Webhook




* Handles
Handles the
the update
update of
of a
a payment
payment status

* @param
@param provider
provider The
The provider
provider of
of the
the payment
payment method

* @param
@param ctx
ctx The
The koa
koa context
context of
of the
the api
api call

* @returns
@returns An
An update
update payload
payload that
that can
can be
be dispatched
dispatched to
to the
the event
event emitter


handlePaymentUpdate(provider: string,
string, ctx:
ctx: Context):
Context): Promise<PaymentWebhookResult
Promise<PaymentWebhookResult |
| void>;



### Overview


This webhook
webhook sends
sends data
data from
from your
your payment
payment provider
provider to
to your
your shop.


The basic
basic flow
flow is:


1. Pass
Pass webhook
webhook URL
URL to
to your
your payment
payment provider
provider when
when creating
creating your
your order
order /
/ payment
payment intent.

2. The
The payment
payment provider
provider triggers
triggers the
the webhook
webhook when
when a
a payment
payment is
is changed
changed within
within their
their system.

3. The
The webhook
webhook triggers
triggers `onPaymentUpdated`
`onPaymentUpdated` in
in your
your **payment
**payment provider**
provider** package.

4. This
This returns
returns `PaymentWebhookResult`
`PaymentWebhookResult` and
and causes
causes the
the `PAYMENT_STATUS_UPDATED`
`PAYMENT_STATUS_UPDATED` event
event to
to be
be emitted.

5. Your
Your shop
shop endpoints
endpoints package
package listens
listens for
for the
the `PAYMENT_STATUS_UPDATED`
`PAYMENT_STATUS_UPDATED` event.

6. This
This then
then triggers
triggers a
a method
method in
in your
your shop
shop API
API (`onPaymentStatusUpdated`
(`onPaymentStatusUpdated` in
in our
our core
core API
API packages).


### Use-case


An example
example use-case
use-case for
for this
this is
is if
if a
a payment
payment status
status changes
changes within
within the
the payment
payment provider
provider you
you may
may want
want this
this information
information to
to be
be passed
passed to
to your
your shop.


### Configuration


The webhook
webhook URLs
URLs are
are configured
configured in
in your
your `server/config`
`server/config` files.



"components": {

"payments": {

"package": "@deity/falcon-payments",

"config": {

"webhookBaseUrl": null,

"webhookUrl": "/falcon-payments/webhook"







In this
this case
case the
the webhook
webhook URL
URL would
would be
be `YOUR_URL/falcon-payments/webhook/PROVIDER`
`YOUR_URL/falcon-payments/webhook/PROVIDER` e.g.
e.g. `https://deity-shop.io/falcon-payments/webhook/mollie`


`webhookBaseUrl` should
should be
be pointed
pointed at
at your
your falcon
falcon server
server instance.
instance. If
If you're
you're running
running your
your app
app on
on cloud
cloud your
your URLs
URLs will
will be
be proxied
proxied for
for you
you so
so your
your sites
sites main
main domain
domain is
is fine.


To configure
configure this
this on
on a
a remote
remote environement
environement you
you can
can use
use the
the variable
variable `PAYMENT_WEBHOOK_BASE_URL`.


:::note Local
Local Testing

The webhook
webhook URL
URL needs
needs to
to be
be accessible
accessible so
so you
you can't
can't use
use localhost.
localhost. we
we recommend
recommend using
using a
a service
service like
like [ngrok](https://ngrok.com/)
[ngrok](https://ngrok.com/) on
on your
your Falcon
Falcon server
server instance
instance and
and setting
setting the
the `webhookBaseUrl`
`webhookBaseUrl` to
to point
point to
to that.
that. Once
Once you've
you've installed
installed ngrok
ngrok it
it should
should be
be as
as simple
simple as
as running
running `ngrok
`ngrok http
http 4000`.
4000`. Provided
Provided Falcon
Falcon Server
Server is
is running
running on
on port
port 4000
4000 this
this will
will return
return you
you an
an `https`
`https` URL
URL you
you can
can use.
  


### Params


- `provider`
`provider` -
- The
The payment
payment provide
provide code,
code, e.g.
e.g. `mollie`.
`mollie`. This
This is
is used
used so
so we
we know
know which
which provider
provider should
should handle
handle the
the `onPaymentUpdated`.

- `context`
`context` -
- This
This webhook
webhook comes
comes from
from your
your payment
payment provider
provider so
so we
we pass
pass the
the entire
entire HTTP
HTTP request
request `context`
`context` to
to the
the `onPaymentUpdated`
`onPaymentUpdated` method,
method, such
such that
that query
query and
and body
body data
data can
can be
be extracted.


### Returns


This method
method should
should return
return `PaymentWebhookResult`.



type PaymentWebhookResult
PaymentWebhookResult =
= {

/** The
The id
id of
of the
the order
order that
that got
got updated
updated */

orderId: string;

/** New
New payment
payment status
status */

status: PaymentStatus;

/** Extra
Extra payload
payload to
to be
be stored
stored */

payload?: {
{ [key:
[key: string]:
string]: any
any };



enum PaymentStatus
PaymentStatus {

open =
= 'open',

canceled =
= 'canceled',

pending =
= 'pending',

authorized =
= 'authorized',

expired =
= 'expired',

failed =
= 'failed',

paid =
= 'paid'




### Subscribing
Subscribing to
to PAYMENT_STATUS_UPDATED


To subscribe
subscribe to
to the
the `PAYMENT_STATUS_UPDATED`
`PAYMENT_STATUS_UPDATED` event
event emitted
emitted by
by your
your payment
payment provider
provider package
package you'll
you'll need
need to
to add
add this
this code
code to
to your
your shops
shops **endpoint
**endpoint package**.



this.eventEmitter.on(PaymentEvents.PAYMENT_STATUS_UPDATED, async
async (payload:
(payload: PaymentWebhookResult)
PaymentWebhookResult) =>
=> {

if (!this.ds.onPaymentStatusUpdated)
(!this.ds.onPaymentStatusUpdated) {




await this.ds.onPaymentStatusUpdated(payload);




This example
example will
will trigger
trigger the
the `onPaymentStatusUpdated`
`onPaymentStatusUpdated` in
in your
your shops
shops API
API where
where the
the payload
payload is
is `PaymentWebhookResult`.




## Order
Order Update
Update Webhook




* Handles
Handles the
the update
update when
when a
a shop
shop indicates
indicates the
the order
order to
to be
be updated

* @param
@param payload
payload The
The update
update payload

* @returns
@returns Whether
Whether the
the update
update was
was handled
handled properly


handleOrderUpdate(payload: OrderWebhookResult):
OrderWebhookResult): Promise<Boolean>;



### Overview


This webhook
webhook sends
sends data
data from
from your
your shop
shop to
to your
your payment
payment provider.


1. The
The webhook
webhook URL
URL is
is configured
configured in
in Falcon
Falcon Server

2. The
The webhook
webhook URL
URL is
is sent
sent to
to your
your shop
shop when
when placing
placing an
an order

3. The
The shop
shop triggers
triggers the
the webhook
webhook when
when an
an order
order is
is updated
updated (usually
(usually `shipped`,
`shipped`, `refunded`
`refunded` or
or `tracking_added`).

4. This
This triggers
triggers a
a method
method in
in your
your shop
shop API
API (`onOrderStatusUpdated`)

5. This
This triggers
triggers a
a method
method in
in your
your payment
payment provider
provider API
API (`handleOrderUpdate`)

6. Depending
Depending on
on the
the `status:
`status: OrderStatus`
OrderStatus` provided
provided different
different methods
methods are
are triggered
triggered e.g.
e.g. refund.


### Use-case


An example
example of
of this
this is
is if
if an
an order
order is
is marked
marked as
as shipped
shipped in
in your
your shop,
shop, you
you may
may want
want to
to update
update it
it in
in your
your payment
payment provider.
provider. Other
Other examples
examples include
include refunded
refunded orders
orders and
and shipment
shipment tracking
tracking being
being added.


### Parameters





export type
type OrderWebhookResult
OrderWebhookResult =
= {

/** The
The provider
provider of
of the
the payment
payment method
method of
of the
the order
order that
that updated
updated */

provider: string;

/** The
The the
the payment
payment method
method of
of the
the order
order that
that updated
updated */

method?: string;

/** The
The id
id of
of the
the order
order */

orderId: string;

/** New
New order
order status
status to
to be
be sent
sent to
to the
the PSP
PSP */

status: OrderStatus;

/** A
A security
security code
code */

securityCode: string;

/** Any
Any additional
additional payload
payload data
data */

payloadJson: string;

/** Specific
Specific order
order data
data that
that was
was changed
changed */

additionalData?: OrderWebhookAdditional;


export type
type OrderWebhookAdditional
OrderWebhookAdditional =
= {

/** Shipping
Shipping data
data of
of the
the update
update */

shippingData?: ShippingData;

/** The
The tracking
tracking data
data of
of the
the update
update */

trackingData?: ShipmentTracking;

/** The
The refund
refund data
data of
of the
the update
update */

refundData?: RefundData;



export type
type ShippingData
ShippingData =
= {

items: ShippingItem[];



export type
type ShippingItem
ShippingItem =
= {

id: string;

quantity?: number;



export type
type RefundData
RefundData =
= {

transactionId?: string;

amount?: string;

currency: string;

adjustment?: string;

items?: RefundItem[];



export type
type RefundItem
RefundItem =
= {

type: RefundItemType;

amount?: string;

quantity?: number;

id?: string;



export enum
enum RefundItemType
RefundItemType {

product =
= 'product',

shipping =
= 'shipping',

surcharge =
= 'surcharge',

discount =
= 'discount'



export type
type ShipmentTracking
ShipmentTracking =
= {

name: string;

number: string;



export enum
enum OrderStatus
OrderStatus {

shipped =
= 'shipped',

trackingAdded =
= 'tracking_added',

refund =
= 'refunded'




### Returns


`Boolean` -
- depending
depending on
on if
if the
the update
update was
was successful
successful or
or not.


id: provider

title: Falcon
Falcon Payments
Payments Providers

sidebar_label: Providers

enterprise_only: true



Each payment
payment provider
provider should
should have
have its
its own
own package.
package. We
We created
created some
some simple
simple `interfaces`
`interfaces` to
to make
make integration
integration easy!


## Payment
Payment Provider
Provider Interface


Every provider
provider that
that runs
runs through
through Falcon
Falcon Payments
Payments requires
requires the
the following
following methods:



export interface
interface ProviderInterface
ProviderInterface {

getAppliedSurcharge(method: string,
string, inquiry:
inquiry: PaymentMethodSurchargeInquiry):
PaymentMethodSurchargeInquiry): null
null |
| Surcharge;

getMethodList(payload: PaymentLoadPayload):
PaymentLoadPayload): Promise<PaymentMethodList>;

loadMethod(method: string,
string, payload:
payload: PaymentLoadPayload):
PaymentLoadPayload): Promise<PaymentMethodInstance>;

validate(payload: PaymentValidationPayload,
PaymentValidationPayload, method?:
method?: string):
string): Promise<PaymentValidationResult>;




### Get
Get surcharges




This method
method gets
gets any
any surcharges
surcharges applied
applied for
for the
the payment
payment method.
method. To
To learn
learn more
more about
about surcharges
surcharges please
please see
see our
our [features
[features documentation](features#surcharges).


#### Parameters


- method
method (`string`)
(`string`) -
- payment
payment method
method code
code (e.g.
(e.g. paypal
paypal or
or creditcard)

- inquiry
inquiry (`PaymentMethodSurchargeInquiry`)
(`PaymentMethodSurchargeInquiry`) -
- `{
`{ country:
country: string;
string; currency:
currency: string;
string; total:
total: number;
number; }`


#### Returns


This method
method returns
returns `null`
`null` or
or `Surcharge`



type Surcharge
Surcharge =
= {

/** Total
Total amount
amount of
of the
the surcharge
surcharge */

amount: number;

/** Fixed
Fixed amount
amount of
of the
the surcharge
surcharge */

fixed?: number;

/** Percentage
Percentage value
value of
of the
the surcharge
surcharge */

percentage?: number;




### Get
Get methods




This method
method gets
gets the
the list
list of
of available
available payment
payment methods
methods from
from a
a provider.


#### Parameters


- payload
payload (`PaymentLoadPayload`)



type PaymentLoadPayload
PaymentLoadPayload =
= {

/** Order/cart
Order/cart ID
ID */

id: string;

/** Cart
Cart grand
grand total
total (excluding
(excluding the
the payment
payment surcharge)
surcharge) */

total: number;

/** Order
Order currency
currency */

currency: string;

/** Order
Order Billing
Billing email
email */

email: string;

/** Billing
Billing country
country code
code used
used for
for billing,
billing, in
in [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
[ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format
format */

country: string;

/** Customer
Customer ID
ID to
to be
be attached
attached to
to the
the Payment
Payment Transaction
Transaction */

customerId?: string;

/** Extra
Extra configuration
configuration data
data related
related to
to the
the payment
payment method
method */

data?: object;




#### Returns


This method
method returns
returns an
an array
array of
of payment
payment methods
methods (`PaymentMethodList`)



type PaymentMethodList
PaymentMethodList =
= Array<PaymentMethodInstance>;


type PaymentMethodInstance
PaymentMethodInstance =
= {


* The
The name
name of
of the
the payment
payment service
service provider


provider: string;


* A
A sub
sub method
method identifier
identifier of
of the
the payment
payment service


method: string;


* Additional
Additional configuration


config?: {
{ [key:
[key: string]:
string]: any
any };


* A
A surcharge
surcharge for
for this
this payment
payment method
method for
for the
the specified
specified country
country and
and currency


surcharge?: Surcharge;




### Load
Load method




Load method
method is
is used
used to
to pass
pass additional
additional data
data from
from the
the payment
payment provider
provider to
to the
the client.
client. Often
Often this
this is
is authentication
authentication to
to allow
allow the
the client
client to
to load
load some
some form
form of
of UI.


#### Parameters


- method
method (`string`)

- payload
payload (`PaymentLoadPayload`)


#### Returns


- `PaymentMethodInstance`



type PaymentMethodInstance
PaymentMethodInstance =
= {


* The
The name
name of
of the
the payment
payment service
service provider


provider: string;


* A
A sub
sub method
method identifier
identifier of
of the
the payment
payment service


method: string;


* Additional
Additional configuration


config?: {
{ [key:
[key: string]:
string]: any
any };


* A
A surcharge
surcharge for
for this
this payment
payment method
method for
for the
the specified
specified country
country and
and currency


surcharge?: Surcharge;




### Validate
Validate Payment




The validate
validate method
method is
is called
called when
when the
the customer
customer places
places an
an order
order (usually
(usually in
in the
the final
final step
step of
of a
a checkout).
checkout). This
This method
method passes
passes the
the order
order data
data to
to the
the payment
payment provider
provider and
and returns
returns information
information about
about the
the status,
status, possibly
possibly including
including data
data to
to finish
finish the
the payment
payment at
at the
the front-end.


#### Parameters


- method
method (`string`)

- payload
payload (`PaymentValidationPayload`)



type PaymentValidationPayload<T
PaymentValidationPayload<T =
= object>
object> =
= {

/** The
The user's
user's billing
billing address
address */

billingAddress: PaymentAddress;

/** The
The user's
user's shipment
shipment address
address */

shippingAddress: PaymentAddress;

/** The
The user's
user's locale
locale */

locale: string;

/** The
The total
total payment
payment amount
amount */

total: TotalSummary;

/** Cart
Cart (product)
(product) items
items */

items: PaymentProduct[];

/** An
An optional
optional order
order reference
reference number,
number, will
will be
be equivalent
equivalent to
to id
id if
if left
left out
out */

orderReference?: string;

/** Additional
Additional payment
payment data
data -
- usually
usually for
for data
data that
that is
is specific
specific to
to that
that provider
provider */

data?: T;

} &
& Pick<PaymentLoadPayload,
Pick<PaymentLoadPayload, 'id'
'id' |
| 'customerId'
'customerId' |
| 'currency'
'currency' |
| 'email'>;



#### Returns


This method
method returns
returns `PaymentValidationResult`.
`PaymentValidationResult`. It
It has
has an
an optional
optional parameter
parameter `intermediateStep`,
`intermediateStep`, this
this indicates
indicates if
if another
another step
step is
is needed
needed (e.g.
(e.g. redirect
redirect to
to another
another page
page or
or make
make another
another request).



type PaymentValidationResult
PaymentValidationResult =
= {


* [optional]
[optional] External
External ID
ID of
of the
the transaction
transaction to
to be
be stored
stored on
on the
the shop
shop backend


id?: string;


* An
An additional
additional step
step to
to be
be performed
performed at
at the
the frontend


intermediateStep?: {


* Issuer
Issuer URL
URL (target
(target URL)
URL) for
for redirection


url: string;


* HTTP
HTTP method
method (GET
(GET or
or POST,
POST, get
get represents
represents user
user redirect,

* post
post represents
represents sending
sending data
data on
on the
the user's
user's behalf)


method: 'GET'
'GET' |
| 'POST';


* The
The fields
fields to
to send


fields?: {
{ name:
name: string;
string; value?:
value?: string
string }[];





id: getting-started

title: Getting
Getting Started
Started with
with Falcon
Falcon Payments

sidebar_label: Getting
Getting Started

enterprise_only: true



Getting started
started with
with an
an existing
existing payment
payment provider
provider is
is simple.
simple. If
If you
you want
want to
to do
do this
this manually
manually you
you can
can do
do this
this using
using `npm`
`npm` or
or `yarn`
`yarn` from
from your
your `server`
`server` directory.
directory. If
If you're
you're using
using our
our **BigCommerce**
**BigCommerce** integration
integration this
this can
can be
be done
done through
through the
the **BigCommerce**
**BigCommerce** admin.


## 1.
1. Add
Add the
the packages
packages you
you need


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';


<TabsContainer title="Don't
title="Don't include
include the
the providers
providers you're
you're not
not using">





{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">




npm install
install @deity/falcon-payments

npm install
install @deity/falcon-payments-env

npm install
install @deity/falcon-payments-endpoints

npm install
install @deity/falcon-payments-stripe

npm install
install @deity/falcon-payments-mollie

npm install
install @deity/falcon-payments-plain




<TabItem value="yarn">




yarn add
add @deity/falcon-payments

yarn add
add @deity/falcon-payments-env

yarn add
add @deity/falcon-payments-endpoints

yarn add
add @deity/falcon-payments-stripe

yarn add
add @deity/falcon-payments-mollie

yarn add
add @deity/falcon-payments-plain







## 2.
2. Create
Create a
a payment
payment provider
provider account


Each payment
payment provider
provider will
will require
require different
different credentials
credentials to
to get
get started.
started. Normally
Normally an
an `api
`api key`
key` and
and an
an `api
`api secret`.
secret`. You'll
You'll need
need these
these to
to get
get started.


## 3.
3. Configure
Configure your
your payment
payment components


In your
your Falcon
Falcon Server
Server configuration
configuration files
files you
you can
can configure
configure both
both your
your endpoints
endpoints (for
(for Webhooks)
Webhooks) and
and your
your payment
payment components.




"components": {

"payments": {

"package": "@deity/falcon-payments",

"config": {

"webhookBaseUrl": "https://myBackEndUrl.com",

"webhookUrl": "/falcon-payments/webhook",

"redirectBaseUrl": "https://myAwesomeWebsite.com",

"redirectUrl": "/checkout/pending",

"skipSurcharges": false,

"providers": {

"stripe": {

"enabled": true,

"package": "@deity/falcon-payments-stripe",

"config": {

... //
// API
API credentials
credentials go
go here



"mollie": {

"enabled": true,

"package": "@deity/falcon-payments-mollie",

"config": {

... //
// API
API credentials
credentials go
go here







"endpoints": {

"payments": {

"package": "@deity/falcon-payments-endpoints",

"config": {

"protocol": "https",

"host": "https",

"url": "/falcon-payments/webhook",

"paymentsComponent": "payments"
"payments" //
// This
This indicates
indicates we
we are
are using
using the
the payments
payments compoent,
compoent, that
that in
in turn
turn is
is using
using @deity/falcon-payments







## 4.
4. Integrate
Integrate with
with your
your client
client side
side app


The final
final step
step is
is to
to add
add your
your method
method UI
UI components
components to
to Falcon
Falcon Client
Client and
and start
start processing
processing payments.
payments. The
The best
best place
place to
to start
start is
is using
using one
one of
of our
our examples
examples apps,
apps, or
or reading
reading our
our [integration
[integration guide](integration).


id: packages

title: Falcon
Falcon Payments
Payments Packages

sidebar_label: Packages

enterprise_only: true



Falcon Payments
Payments is
is made
made up
up of
of a
a few
few packages
packages making
making it
it easy
easy to
to pick
pick and
and choose
choose the
the services
services you
you need.


- `@deity/falcon-payments`
`@deity/falcon-payments` -
- The
The main
main payments
payments package
package used
used within
within Falcon
Falcon Server

- `@deity/falcon-payments-endpoints`
`@deity/falcon-payments-endpoints` -
- This
This package
package adds
adds endpoint
endpoint routing
routing for
for `@deity/falcon-payments`,
`@deity/falcon-payments`, used
used largely
largely for
for payment
payment webhooks

- `@deity/falcon-payments-env`
`@deity/falcon-payments-env` -
- This
This package
package provides
provides types
types and
and utility
utility methods
methods for
for `@deity/falcon-payments`

- `@deity/falcon-payments-plain`
`@deity/falcon-payments-plain` -
- This
This package
package provides
provides a
a wrapper
wrapper for
for simple
simple payment
payment methods
methods (e.g.
(e.g. cash
cash on
on delivery)

- `@deity/falcon-payments-stripe`
`@deity/falcon-payments-stripe` -
- This
This package
package is
is the
the bridge
bridge between
between the
the Stripe
Stripe API
API and
and `@deity/falcon-payments`

- `@deity/falcon-payments-mollie`
`@deity/falcon-payments-mollie` -
- This
This package
package is
is the
the bridge
bridge between
between the
the Mollie
Mollie API
API and
and `@deity/falcon-payments`


id: features

title: Falcon
Falcon Payments
Payments Features

sidebar_label: Features

enterprise_only: true



Along side
side handling
handling transactions
transactions Falcon
Falcon Payments
Payments also
also provides
provides a
a few
few bits
bits of
of additional
additional functionality.


Each provider
provider can
can be
be configured
configured to
to handle
handle payment
payment surcharges
surcharges per
per method,
method, per
per country.
country. Each
Each method
method can
can also
also be
be enabled
enabled or
or disabled
disabled on
on a
a country
country level.


:::note File
File level
level config
config only

At the
the moment
moment surcharges
surcharges and
and country
country restrictions
restrictions can
can only
only be
be configured
configured in
in your
your `server/config`
`server/config` files.
files. We
We are
are working
working hard
hard to
to make
make this
this functionality
functionality available
available to
to manage
manage in
in your
your cloud
cloud dashboard.



## Surcharges


### Overview


A surcharge
surcharge is
is an
an additional
additional fee
fee that
that the
the merchant
merchant might
might want
want to
to charge
charge the
the customer
customer for
for using
using a
a particular
particular payment
payment method.


<img src="/img/docs/platform/payments/surcharges.png"
src="/img/docs/platform/payments/surcharges.png" alt="Falcon
alt="Falcon Payment
Payment surcharges"
surcharges" width="400"
width="400" style={{
style={{ marginBottom:
marginBottom: 20
20 }}
}} />


This fee
fee can
can be
be calculated
calculated in
in a
a few
few ways:


- Percentage
Percentage of
of order
order subtotal

- Flat
Flat Fee

- Percentage
Percentage of
of order
order subtotal
subtotal +
+ Flat
Flat Fee


The fee
fee can
can be
be different
different **per
**per country**,
country**, **per
**per method**
method** and
and a
a different
different flat
flat fee
fee can
can be
be passed
passed per
per **currency**.
**currency**. The
The country
country is
is based
based on
on the
the **billing
**billing address**
address** and
and the
the currency
currency is
is based
based on
on the
the store
store currency.


### Configuring
Configuring surcharges


Surcharges are
are currently
currently added
added in
in your
your `server/config`
`server/config` files.







"components": {

"payments": {

"package": "@deity/falcon-payments",

"config": {


"providers": {

"mollie": {

"package": "@deity/falcon-payments-mollie",

"config": {


"methods": {

"paypal": {


"surcharge": [


"countries": ["*"],

"percentage": 1



"countries": ["nl"],

"percentage": 1,

"fixed": [


"currency": "usd",

"amount": 0.5



"currency": "eur",

"amount": 1.5
















The surcharge
surcharge parameter
parameter on
on the
the payment
payment component
component config
config accepts
accepts an
an array
array of
of surcharges
surcharges with
with the
the following
following parameters:




"countries": ["nl"],
["nl"], //
// array
array of
of strings

"percentage": 1,
1, //
// number

"fixed": [

// array


"currency": "usd",
"usd", //
// string

"amount": 1
1 //
// number






If `*`
`*` is
is passed
passed to
to the
the countries
countries array
array it
it acts
acts as
as a
a fallback.
fallback. Both
Both `fixed`
`fixed` and
and `percentage`
`percentage` are
are optional.
optional. If
If both
both are
are passed
passed the
the total
total surcharge
surcharge will
will be
be both
both values
values added
added together.


:::note Not
Not available
available in
in BigCommerce

Unfortunately, BigCommerce
BigCommerce APIs
APIs don't
don't currently
currently allow
allow us
us a
a way
way to
to add
add surcharges
surcharges to
to orders
orders so
so this
this feature
feature isn't
isn't available.



## Country
Country Restrictions


### Overview


Each provider
provider and
and method
method can
can be
be globally
globally enabled
enabled or
or disabled
disabled via
via the
the config.
config. On
On top
top of
of this,
this, each
each method
method can
can be
be enabled
enabled or
or disabled
disabled per
per country
country (based
(based on
on the
the customers
customers **billing
**billing address**).


### Configuring
Configuring country
country restrictions


Country restrictions
restrictions are
are added
added to
to the
the payment
payment provided
provided component
component config
config in
in the
the same
same way
way as
as surcharges.






"components": {

"payments": {

"package": "@deity/falcon-payments",

"config": {

"providers": {

"mollie": {

"enabled": true,

"package": "@deity/falcon-payments-mollie",

"config": {


"methods": {

"paypal": {

"enabled": true,

"countries": ["nl",
["nl", "gb",
"gb", "de"],

"surcharge": [














Each provider
provider can
can be
be passed
passed an
an `enabled`
`enabled` argument.
argument. If
If set
set to
to false
false the
the entire
entire provider
provider and
and all
all it's
it's methods
methods will
will be
be disabled.


Within the
the providers
providers config
config different
different methods
methods can
can be
be configured.
configured. The
The `key`
`key` is
is based
based on
on the
the `method
`method code`.



"methods": {

"paypal": {

"enabled": true,

"countries": ["nl",
["nl", "gb",
"gb", "de"]


"creditcard": {






Each method
method accepts
accepts 3
3 arguments:


- `enabled`
`enabled` to
to enable
enable or
or disable
disable the
the method
method globally.
globally. This
This will
will override
override any
any configuration
configuration in
in the
the `countries`
`countries` argument.

- `surcharge`
`surcharge` to
to configure
configure surcharges
surcharges (explained
(explained above).

- `countries`
`countries` this
this is
is an
an array
array of
of country
country codes
codes the
the method
method is
is available
available in.
in. If
If empty
empty the
the method
method will
will be
be enabled
enabled for
for all
all countries.


## Offline
Offline Payments


### Overview


Some payment
payment methods
methods require
require no
no interaction
interaction with
with a
a payment
payment provider
provider for
for processing.
processing. These
These are
are still
still processed
processed through
through Falcon
Falcon Payments
Payments but
but will
will not
not be
be connected
connected to
to a
a provider
provider (e.g.
(e.g. Mollie
Mollie /
/ Stripe).
Stripe). Examples
Examples of
of these
these methods
methods are
are **cash
**cash on
on delivery**
delivery** or
or **money
**money order**.
order**. We
We have
have a
a simple
simple provider
provider package
package set
set up
up to
to handle
handle these
these type
type of
of payments
payments (`@deity/falcon-payments-plain`).


### Configuring
Configuring offline
offline payments


When a
a payment
payment provider
provider returns
returns methods
methods or
or loads
loads a
a method
method data
data one
one of
of the
the props
props available
available is
is `isOffline`.
`isOffline`. If
If this
this is
is passed
passed the
the shop
shop API
API may
may choose
choose to
to handle
handle the
the payment
payment slightly
slightly differently.


An example
example can
can be
be seen
seen below:





import {









} from
from '@deity/falcon-payments-env';


declare type
type PlainConfig
PlainConfig =
= ProviderConfig
ProviderConfig &
& {

methodCode?: string



export default
default class
class PlainPayment
PlainPayment extends
extends PaymentProvider<PlainConfig>
PaymentProvider<PlainConfig> implements
implements ProviderInterface
ProviderInterface {

async getMethodList(payload:
getMethodList(payload: PaymentLoadPayload):
PaymentLoadPayload): Promise<PaymentMethodList>
Promise<PaymentMethodList> {

const methodCode
methodCode =
= this.config.methodCode
this.config.methodCode ||
|| 'cash';

return [


provider: this.providerCode,

method: methodCode,

isOffline: true,
true, //
// Offline
Offline set
set to
to true

surcharge: this.getAppliedSurcharge(methodCode,
this.getAppliedSurcharge(methodCode, {

country: payload.country,

currency: payload.currency,

total: payload.total






async loadMethod(method:
loadMethod(method: string,
string, payload:
payload: PaymentLoadPayload):
PaymentLoadPayload): Promise<PaymentMethodInstance>
Promise<PaymentMethodInstance> {

return {

provider: this.providerCode,


isOffline: true,
true, //
// Offline
Offline set
set to
to true

surcharge: this.getAppliedSurcharge(method,
this.getAppliedSurcharge(method, {

country: payload.country,

currency: payload.currency,

total: payload.total





async validate(payload:
validate(payload: PaymentValidationPayload):
PaymentValidationPayload): Promise<PaymentValidationResult>
Promise<PaymentValidationResult> {

return {};





id: overview

title: What
What is
is Falcon
Falcon Platform?



## More
More than
than just
just a
a PWA
PWA theme


The Falcon
Falcon Platform
Platform is
is a
a fully
fully packed
packed hosted
hosted front-end
front-end platform,
platform, which
which allows
allows to
to create
create the
the best
best front-end
front-end experiences
experiences for
for eCommerce.


Falcon is
is not
not just
just a
a PWA
PWA theme,
theme, it
it is
is a
a complete
complete platform
platform to
to build
build the
the best
best shopping
shopping experience
experience with
with top
top performance
performance and
and unlimited
unlimited flexibility,
flexibility, enabling
enabling your
your future
future growth.


[Get started
started with
with Falcon
Falcon Platform](../getting-started/prerequisites)


<img src="/img/docs/platform/business-service-applications.svg"
src="/img/docs/platform/business-service-applications.svg" alt="Falcon
alt="Falcon Platform
Platform infastructure
infastructure illustration"
illustration" width="500"
width="500" />


## What
What do
do you
you get


### Falcon
Falcon Client

Falcon client
client serves
serves as
as a
a your
your **PWA
**PWA theme**.
theme**. It's
It's a
a set
set of
of <a
<a href="https://reactjs.org/"
href="https://reactjs.org/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">ReactJs</a>
noopener">ReactJs</a> components
components that
that build
build up
up your
your UI.
UI. <a
<a href="https://deity.com/falcon"
href="https://deity.com/falcon" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Learn
noopener">Learn more
more about
about Falcon
Falcon Client</a>.


### Falcon
Falcon Middleware
Middleware Server


Falcon Server
Server is
is the
the middleware
middleware layer
layer between
between the
the front-end
front-end (Falcon
(Falcon Client)
Client) and
and the
the back-end
back-end services
services providing
providing data,
data, including
including BigCommerce,
BigCommerce, but
but simultaneously
simultaneously this
this could
could also
also be
be Wordpress,
Wordpress, Algolia,
Algolia, Stripe
Stripe or
or any
any other
other your
your business
business requires.


The Falcon
Falcon Middleware
Middleware Server
Server is
is the
the force
force behind
behind Falcon
Falcon Client
Client and
and comes
comes with
with many
many great
great features.


:::note Important

To have
have access
access to
to Falcon
Falcon Server
Server and
and make
make changes
changes you
you need
need to
to have
have an
an Enterprise
Enterprise plan.
plan. For
For other
other plans
plans we
we provide
provide an
an out
out of
of the
the box
box Falcon
Falcon Server
Server instance.



### Falcon
Falcon Cloud

Cloud is
is not
not only
only the
the infastructure
infastructure your
your Falcon
Falcon Platform
Platform will
will be
be hosted
hosted on
on but
but also
also your
your deployment,
deployment, monitoring
monitoring and
and testing
testing tool.


[Learn about
about Falcon
Falcon Cloud](../cloud/about)



## Dive
Dive Straight
Straight In


We have
have a
a cookbook
cookbook with
with examples
examples of
of code
code and
and a
a Youtube
Youtube channel
channel with
with video
video guides.


- [Falcon
[Falcon Platform
Platform Cookbook](./../cookbook/about)

- <a
<a href="https://www.youtube.com/channel/UCCyszDV63yrqFHUY1uWf4mQ"
href="https://www.youtube.com/channel/UCCyszDV63yrqFHUY1uWf4mQ" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Our
noreferrer">Our Youtube
Youtube Channel</a>.


id: migration-guide

title: Migration
Migration guide

sidebar_label: Migration
Migration guide

enterprise_only: true




id: redirects

title: Redirects

sidebar_label: Redirects


import Redirects
Redirects from
from '../../composer/redirects.md';


<Redirects />


id: falcon-payment-plugin

title: '@deity/falcon-payment-plugin'

sidebar_label: '@deity/falcon-payment-plugin'



**Coming Soon**


id: falcon-server-env

title: '@deity/falcon-server-env'

sidebar_label: '@deity/falcon-server-env'



## ApiDataSource


`src/models/ApiDataSource` is
is a
a base
base class
class for
for REST
REST API
API data
data sources
sources that
that is

being used
used by
by Falcon
Falcon Server
Server application.


### `api.preInitialize`


This method
method will
will be
be triggered
triggered by
by ApiContainer
ApiContainer (`initialize`
(`initialize` method
method will
will be
be called
called by
by GraphQL

itself with
with the
the proper
proper `context`
`context` argument).
argument). It
It can
can optionally
optionally return
return a
a config
config object
object received
received from

the back-end
back-end system.


### `api.getFetchUrlPriority(url)`


This method
method must
must be
be defined
defined if
if ApiDataSource
ApiDataSource supports
supports Dynamic
Dynamic Routing.

It should
should provide
provide a
a simple
simple logic
logic to
to determine
determine custom
custom priority
priority or
or return
return a
a default
default priority

(`this.fetchUrlPriority` equals
equals `ApiUrlPriority.NORMAL`
`ApiUrlPriority.NORMAL` by
by default).


#### ApiDataSource
ApiDataSource internal
internal methods


ApiDataSource class
class provides
provides a
a set
set of
of extra
extra methods
methods and
and hooks.


`context` -
- is
is an
an object,
object, that
that could
could be
be passed
passed to
to `init`
`init` argument
argument (3rd
(3rd argument)
argument) of
of the
the following
following REST
REST methods
methods -
- `get`,
`get`, `post`,
`post`, `patch`,
`patch`, `put`
`put` and
and `delete`:



async getInfo()
getInfo() {

return this.get('info',
this.get('info', {},
{}, {

context: {

isAuthRequired: true,

foo: 'bar'






This `context`
`context` object
object will
will be
be passed
passed to
to `willSendRequest`
`willSendRequest` method
method so
so you
you could
could perform

a context-specific
context-specific changes
changes to
to your
your request
request before
before it
it gets
gets send:



protected async
async willSendRequest(request)
willSendRequest(request) {

const {
{ context
context }
} =
= request;

if (context
(context &&
&& context.isAuthRequired
context.isAuthRequired &&
&& this.authorizeRequest)
this.authorizeRequest) {

await this.authorizeRequest(request);

if (context.foo)
(context.foo) {

// do
do something
something else...






> Base
Base `ApiDataSource`
`ApiDataSource` class
class provides
provides a
a small
small `isAuthRequired`
`isAuthRequired` hook
hook by
by default.
default. If
If your
your class

> defines
defines `authorizeRequest`
`authorizeRequest` method
method and
and you
you pass
pass `isAuthRequired`
`isAuthRequired` context
context flag
flag to
to any
any of
of the
the REST

> methods
methods -
- ApiDataSource
ApiDataSource will
will call
call `authorizeRequest`
`authorizeRequest` method
method before
before sending
sending the
the actual
actual request

> further.


If you
you pass
pass async
async `context.didReceiveResult`
`context.didReceiveResult` callback
callback -
- it
it will
will be
be triggered
triggered right
right between

parsing REST
REST response
response and
and saving
saving this
this response
response to
to the
the internal
internal cache,

so this
this way
way -
- you
you have
have full
full control
control what
what to
to store
store in
in the
the cache.

All further
further calls
calls for
for this
this endpoint
endpoint -
- ApiDataSource
ApiDataSource will
will get
get from
from the
the cache,

so this
this `context.didReceiveResult`
`context.didReceiveResult` won't
won't be
be triggered
triggered again.


`api.processPagination()` is
is an
an internal
internal method
method that
that helps
helps you
you to
to process
process and
and generate
generate a
a proper

"pagination" object,
object, which
which is
is used
used by
by GraphQL
GraphQL type.


## Extension


`src/models/Extension` is
is a
a base
base class
class for
for any
any extension
extension that
that is
is being
being used

by Falcon
Falcon Server
Server Application.
Application. It
It adds
adds a
a few
few helpful
helpful methods
methods to
to provide

a seamless
seamless integration
integration with
with Falcon
Falcon Server
Server applications.


### `extension.initialize`


`await extension.initialize()`
extension.initialize()` will
will be
be called
called by
by ExtensionContainer
ExtensionContainer automatically.
automatically. Optionally,

it can
can optionally
optionally return
return a
a back-end
back-end configuration
configuration object,
object, received
received from
from the
the assigned

ApiDataSource instance
instance (by
(by calling
calling `await
`await api.preInitialize()`
api.preInitialize()` method).


### `extension.getGraphQLConfig`


This method
method will
will be
be called
called by
by ExtensionContainer
ExtensionContainer to
to get
get Extension's
Extension's GraphQL
GraphQL configuration,
configuration, which

will be
be merged
merged with
with the
the rest
rest of
of the
the extensions'
extensions' configs
configs (see
(see example
example below).


### `extension.getFetchUrlPriority(url)`


By default,
default, this
this method
method will
will trigger
trigger `api.getFetchUrlPriority(url:
`api.getFetchUrlPriority(url: string)`
string)` method
method (if
(if it
it was

defined in
in the
the assigned
assigned ApiDataSource
ApiDataSource instance)
instance) and
and pass
pass the
the current
current URL
URL to
to determine
determine API's

priority (for
(for sort
sort order)
order) when
when Falcon
Falcon Client
Client fetches
fetches URL
URL info
info from
from available
available extensions;
extensions; if

such method
method was
was not
not defined
defined -
- it
it will
will return
return `null`,
`null`, meaning
meaning that
that this
this ApiDataSource
ApiDataSource does
does not

support "Dynamic
"Dynamic Routing"
Routing" and
and should
should be
be skipped.


### `extension.fetchUrl`


This method
method is
is optional
optional and
and should
should be
be defined
defined if
if ApiDataSource
ApiDataSource supports
supports Dynamic
Dynamic Routing.

Its signature
signature mimics
mimics GraphQL
GraphQL Resolver
Resolver function
function signature
signature `(root,
`(root, params,
params, context,
context, info)`.


## Using
Using ApiDataSource
ApiDataSource together
together with
with Extension


Sample config:




"apis": [


"name": "api-wordpress",

"package": "@deity/falcon-wordpress-api",

"config": {

"host": "wp.host.com",

"protocol": "https",

"apiPrefix": "/blog-api",

"apiSuffix": "/wp/v2"




"extensions": [


"package": "@deity/falcon-blog-extension",

"config": {

"api": "api-wordpress"







Sample ApiDataSource
ApiDataSource class:



const {
{ ApiDataSource
ApiDataSource }
} =
= require('@deity/falcon-server-env');


class WordpressApi
WordpressApi extends
extends ApiDataSource
ApiDataSource {

async getPost(id)
getPost(id) {

// Calling
Calling 'https://wp.host.com/blog-api/wp/v2/posts/<id>'
'https://wp.host.com/blog-api/wp/v2/posts/<id>' endpoint

return this.get(`/post/${id}`);





Sample Extension
Extension class:



const {
{ Extension
Extension }
} =
= require('@deity/falcon-server-env');


class BlogExtension
BlogExtension extends
extends Extension
Extension {

async getGraphQLConfig()
getGraphQLConfig() {

return {

schemas: [

`type Post
Post {

name: String


`extend Query
Query {

getPost(id: String!):
String!): Post



dataSources: {

[this.api.name]: this.api


resolvers: {

Query: {

getPost: (root,
(root, {
{ id
id },
}, {
{ dataSources
dataSources })
}) =>
=> {

/* @type
@type {WordpressApi}
{WordpressApi} */

const dataSource
dataSource =
= dataSources[this.api.name];


return dataSource.getPost(id);









ApiContainer and
and ExtensionContainer
ExtensionContainer will
will do
do the
the rest
rest of
of the
the job:


- Creating
Creating instances
instances of
of both
both classes

- Assigning
Assigning specified
specified `extension.config.api`
`extension.config.api` Instance
Instance to
to Extension

- Generating,
Generating, stitching
stitching and
and merging
merging GraphQL
GraphQL Schema
Schema for
for FalconServer


id: falcon-shop-extension

title: '@deity/falcon-shop-extension'

sidebar_label: '@deity/falcon-shop-extension'



**Coming Soon**


id: falcon-shop-data

title: '@deity/falcon-shop-data'

sidebar_label: '@deity/falcon-shop-data'



**Coming Soon**


id: overview

title: Packages

sidebar_label: Packages



Falcon Platform
Platform Ships
Ships with
with various
various `@deity`
`@deity` packages.


- [create-falcon-app](create-falcon-app)

- [falcon-blog-data](falcon-blog-data)

- [falcon-blog-extension](falcon-blog-extension)

- [falcon-client](falcon-client)

- [falcon-data](falcon-data)

- [falcon-dev-tools/babel-preset-falcon-client](babel-preset-falcon-client)

- [falcon-dev-tools/eslint-config-falcon](eslint-config-falcon)

- [falcon-dev-tools/falcon-i18n-webpack-plugin](falcon-i18n-webpack-plugin)

- [falcon-dev-tools/falcon-scripts](falcon-scripts)

- [falcon-dev-tools/normal-module-override-webpack-plugin](normal-module-override-webpack-plugin)

- [falcon-errors](falcon-errors)

- [falcon-front-kit](falcon-front-kit)

- [falcon-i18n](falcon-i18n)

- [falcon-logger](falcon-logger)

- [falcon-magento2-api](falcon-magento2-api)

- [falcon-payment-plugin](falcon-payment-plugin)

- [falcon-server-env](falcon-server-env)

- [falcon-server](falcon-server)

- [falcon-service-worker](falcon-service-worker)

- [falcon-shop-data](falcon-shop-data)

- [falcon-shop-extension](falcon-shop-extension)

- [falcon-theme-editor](falcon-theme-editor)

- [falcon-ui-kit](falcon-ui-kit)

- [falcon-ui](falcon-ui)

- [falcon-wordpress-api](falcon-wordpress-api)

- [payment/falcon-adyen-plugin](falcon-adyen-plugin)

- [payment/falcon-paypal-plugin](falcon-paypal-plugin)


There are
are a
a few
few naming
naming convensions
convensions that
that will
will help
help you
you understand
understand each
each package.


- `[PACKAGE]-[SERVICE]-api`
`[PACKAGE]-[SERVICE]-api` Packages
Packages named
named this
this way
way connect
connect to
to APIs.
APIs. An
An example
example is
is `falcon-wordpress-api`

- `[PACKAGE]-[TYPE]-extension`
`[PACKAGE]-[TYPE]-extension` These
These packages
packages handle
handle data
data from
from APIs.
APIs. `TYPE`
`TYPE` referes
referes to
to the
the data
data type
type e.g.
e.g. `blog`
`blog` or
or `shop`.

- `[PACKAGE]-[TYPE]-data`
`[PACKAGE]-[TYPE]-data` These
These packages
packages handle
handle the
the data
data from
from `extension`
`extension` packages.
packages. They
They usually
usually contain
contain components
components that
that pass
pass a
a GraphQL
GraphQL query
query to
to the
the extension
extension package.
package. `TYPE`
`TYPE` is
is the
the data
data type,
type, e.g.
e.g. `blog`.

- `[PACKAGE]-[TYPE/SERVICE]-plugin`
`[PACKAGE]-[TYPE/SERVICE]-plugin` These
These packages
packages usually
usually extend
extend their
their corresponding
corresponding extension.
 

id: falcon-i18n

title: '@deity/falcon-i18n'

sidebar_label: '@deity/falcon-i18n'



This package
package is
is used
used for
for internationalization
internationalization in
in Falcon
Falcon Platform.


Full details
details and
and usage
usage can
can be
be found
found [here](/v2019/platform/falcon-client/internationalization)


id: eslint-config-falcon

title: '@deity/eslint-config-falcon'

sidebar_label: '@deity/eslint-config-falcon'



<a href="https://eslint.org/"
href="https://eslint.org/" rel="noopener
rel="noopener noreferrer"
noreferrer" target="_blank">ESLint</a>
target="_blank">ESLint</a> is
is used
used for
for code
code formatting,
formatting, this
this is
is our
our default
default config
config that
that will
will help
help keep
keep your
your code
code clean
clean and
and unified.


This package
package provides
provides a
a handy
handy set
set of
of default
default rules.


It's used
used in
in 2
2 files
files in
in both
both `server`
`server` and
and `client`.


- `client/.eslintrc`
`client/.eslintrc` &
& `server/.eslintrc`

- `client/prettier.config.js`
`client/prettier.config.js` &
& `server/prettier.config.js`





"extends": ["@deity/eslint-config-falcon"],

"env": {

"worker": true







const esLint
esLint =
= require('@deity/eslint-config-falcon');


module.exports =
= Object.assign({},
Object.assign({}, esLint.rules['prettier/prettier'][1],
esLint.rules['prettier/prettier'][1], {

overrides: [


files: ['.eslintrc'],

options: {
{ parser:
parser: 'json'
'json' }






id: falcon-magento2-api

title: '@deity/falcon-magento2-api'

sidebar_label: '@deity/falcon-magento2-api'



**Coming Soon**


id: falcon-errors

title: '@deity/falcon-errors'

sidebar_label: '@deity/falcon-errors'



This package
package helps
helps handle
handle errors
errors within
within Falcon.


id: falcon-blog-extension

title: '@deity/falcon-blog-extension'

sidebar_label: '@deity/falcon-blog-extension'



This `extension`
`extension` handles
handles blog
blog data.
data. By
By default
default it's
it's connected
connected to
to [`@deity/falcon-wordpress-api`](falcon-wordpress-api)
[`@deity/falcon-wordpress-api`](falcon-wordpress-api) and
and rendered
rendered by
by [`@deity/falcon-blog-data`](falcon-blog-data)


id: falcon-wordpress-api

title: '@deity/falcon-wordpress-api'

sidebar_label: '@deity/falcon-wordpress-api'



**Coming Soon**


id: falcon-front-kit

title: '@deity/falcon-front-kit'

sidebar_label: '@deity/falcon-front-kit'



**Coming Soon**


id: falcon-data

title: '@deity/falcon-data'

sidebar_label: '@deity/falcon-data'



Falcon data
data is
is the
the base
base `data`
`data` package
package and
and is
is extended
extended by
by all
all other
other `data`
`data` packages.


It provides
provides useful
useful functions
functions that
that allow
allow you
you to
to query
query your
your extensions
extensions using
using `GraphQL`,
`GraphQL`, it
it uses
uses <a
<a href="https://www.apollographql.com/"
href="https://www.apollographql.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Apollo
Apollo site">Apollo</a>
site">Apollo</a> to
to do
do do
do this.


<a href="https://www.apollographql.com/"
href="https://www.apollographql.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Apollo
Apollo site">

<img src="/img/docs/platform/apollo.svg"
src="/img/docs/platform/apollo.svg" alt="Apollo
alt="Apollo Logo"
Logo" width="200"
width="200" style={{margin:
style={{margin: '20px
'20px 0'}}/>




:::note More
More Coming
Coming Soon

Falcon Data
Data is
is a
a really
really powerful
powerful package
package that
that makes
makes getting
getting data
data using
using GraphQL
GraphQL really
really easy.
easy. We
We will
will be
be adding
adding more
more information
information soon.



id: babel-preset-falcon-client

title: '@deity/babel-preset-falcon-client'

sidebar_label: '@deity/babel-preset-falcon-client'



This package
package adds
adds default
default <a
<a href="https://babeljs.io/docs/en/presets"
href="https://babeljs.io/docs/en/presets" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Babel</a>
noopener">Babel</a> config
config used
used in
in the
the build
build process.


id: falcon-theme-editor

title: '@deity/falcon-theme-editor'

sidebar_label: '@deity/falcon-theme-editor'



**Coming Soon**


id: falcon-scripts

title: '@deity/falcon-scripts'

sidebar_label: '@deity/falcon-scripts'



This is
is a
a utility
utility package
package used
used as
as part
part of
of the
the build
build process,
process, largely
largely to
to compile
compile Typescript
Typescript via
via Babel.


id: falcon-server

title: '@deity/falcon-server'

sidebar_label: '@deity/falcon-server'



**Coming Soon**


id: falcon-blog-data

title: '@deity/falcon-blog-data'

sidebar_label: '@deity/falcon-blog-data'



This extension
extension get
get data
data from
from [`@detiy/falcon-blog-extension`](falcon-blog-extension).


It includes
includes GraphQL
GraphQL queries
queries for
for blog
blog data
data (Post
(Post and
and PostList)


## PostQuery


This expects
expects `path`
`path` which
which is
is the
the path
path of
of the
the blog
blog post



query BlogPost($path:
BlogPost($path: String!)
String!) {

blogPost(path: $path)
$path) {




image {








## PostListQuery


The blog
blog list
list expects,
expects, but
but doesn't
doesn't require
require a
a pagniation
pagniation object
object as
as a
a parameter.


**Pagination Object**


const pagination
pagination =
= {

perPage: [ITEMS_PER_PAGE],

page: [CURRENT_PAGE]





query BlogPosts($pagination:
BlogPosts($pagination: PaginationInput)
PaginationInput) {

blogPostList(pagination: $pagination)
$pagination) {

items {





image {





pagination {











id: falcon-ui-kit

title: '@deity/falcon-ui-kit'

sidebar_label: '@deity/falcon-ui-kit'



**Coming Soon**


id: falcon-service-worker

title: '@deity/falcon-service-worker'

sidebar_label: '@deity/falcon-service-worker'



**Coming Soon**


id: falcon-i18n-webpack-plugin

title: '@deity/falcon-i18n-webpack-plugin'

sidebar_label: '@deity/falcon-i18n-webpack-plugin'



**Coming Soon**


id: falcon-ui

title: '@deity/falcon-ui'

sidebar_label: '@deity/falcon-ui'



Falcon UI
UI is
is a
a library
library of
of composable,
composable, themable,
themable, design-system-driven
design-system-driven UI
UI components
components for
for React.


Think of
of Falcon
Falcon UI
UI as
as a
a replacement
replacement for
for Bootstrap
Bootstrap or
or Material
Material UI.


[View the
the docs](https://falcon-ui.docs.deity.io/).


id: normal-module-override-webpack-plugin

title: '@deity/normal-module-override-webpack-plugin'

sidebar_label: '@deity/normal-module-override-webpack-plugin'



**Coming Soon**


id: falcon-client

title: '@deity/falcon-client'

sidebar_label: '@deity/falcon-client'



Falcon Client
Client is
is your
your applications
applications frontend.


To find
find out
out more
more about
about `falcon-client`
`falcon-client` see
see [the
[the docs](/platform/client/about)


id: falcon-adyen-plugin

title: '@deity/falcon-adyen-plugin'

sidebar_label: '@deity/falcon-adyen-plugin'



**Coming Soon**


id: falcon-logger

title: '@deity/falcon-logger'

sidebar_label: '@deity/falcon-logger'



Falcon Logger
Logger is
is a
a utility
utility tool
tool used
used for
for logging
logging in
in Falcon
Falcon packages,
packages, but
but can
can also
also be
be used
used for
for logging
logging in
in your
your custom
custom Node.js
Node.js apps.


Full details
details can
can be
be found
found [here](/v2019/platform/miscellaneous/falcon-logger).


id: falcon-paypal-plugin

title: '@deity/falcon-paypal-plugin'

sidebar_label: '@deity/falcon-paypal-plugin'



**Coming Soon**


id: create-falcon-app

title: '@deity/create-falcon-app'

sidebar_label: '@deity/create-falcon-app'



This CLI
CLI tool
tool helps
helps you
you to
to create
create your
your application
application based
based on
on Deity
Deity Falcon
Falcon with
with just
just one
one command.


[More information
information and
and usage
usage examples](/platform/getting-started/create)


## Usage



npx @deity/create-falcon-app
@deity/create-falcon-app <my-project>

yarn create
create @deity/falcon-app
@deity/falcon-app <my-project>



id: upgrading

title: Upgrading

sidebar_label: Upgrading



## Overview


Our packages
packages are
are all
all published
published to
to our
our private
private NPM
NPM account,
account, along
along side
side these
these packages
packages you'll
you'll also
also have
have an
an app.
app. `client`
`client` for
for most
most customers,
customers, `client`
`client` &
& `server`
`server` for
for enterprise
enterprise customers.
customers. Your
Your app
app will
will need
need upgrading
upgrading manually
manually according
according to
to the
the changes
changes you
you want
want to
to include.
 


## Package
Package updates


To update
update our
our packages
packages you
you simply
simply need
need to
to change
change them
them in
in your
your `package.json`
`package.json` and
and run
run either
either `yarn`
`yarn` or
or `npm
`npm update`.


Falcon platform
platform packages
packages are
are all
all pegged
pegged to
to the
the same
same version
version number
number so
so we
we recommend
recommend upgrading
upgrading them
them all
all at
at the
the same
same time.


Falcon payment
payment packages
packages are
are also
also all
all pegged
pegged to
to the
the same
same version,
version, but
but not
not to
to Falcon
Falcon platform
platform packages.





// server/package.json

"dependencies": {

"@deity/falcon-algoliasearch-api": "^2.7.0",

"@deity/falcon-algoliasearch-component": "^2.7.0",

"@deity/falcon-algoliasearch-endpoints": "^2.7.0",

"@deity/falcon-bigcommerce-api": "^2.7.0",

"@deity/falcon-bigcommerce-endpoints": "^2.7.0",

"@deity/falcon-blog-extension": "^2.7.0",

"@deity/falcon-logger": "^2.7.0",

"@deity/falcon-mailer": "^2.7.0",

"@deity/falcon-payments": "^2.6.4",

"@deity/falcon-payments-endpoints": "^2.6.4",

"@deity/falcon-payments-env": "^2.6.4",

"@deity/falcon-payments-mollie": "^2.6.4",

"@deity/falcon-payments-plain": "^2.6.4",

"@deity/falcon-payments-stripe": "^2.6.4"





// server/package.json

"dependencies": {

"@deity/falcon-algoliasearch-api": "^2.7.1",

"@deity/falcon-algoliasearch-component": "^2.7.1",

"@deity/falcon-algoliasearch-endpoints": "^2.7.1",

"@deity/falcon-bigcommerce-api": "^2.7.1",

"@deity/falcon-bigcommerce-endpoints": "^2.7.1",

"@deity/falcon-blog-extension": "^2.7.1",

"@deity/falcon-logger": "^2.7.1",

"@deity/falcon-mailer": "^2.7.1",

"@deity/falcon-payments": "^2.7.0",

"@deity/falcon-payments-endpoints": "^2.7.0",

"@deity/falcon-payments-env": "^2.7.0",

"@deity/falcon-payments-mollie": "^2.7.0",

"@deity/falcon-payments-plain": "^2.7.0",

"@deity/falcon-payments-stripe": "^2.7.0"




## App
App updates


As mentioned,
mentioned, you'll
you'll need
need to
to update
update your
your app
app manually.


We recommend
recommend a
a code
code `diff`
`diff` to
to view
view the
the changes
changes and
and pick
pick and
and choose
choose the
the changes
changes you
you need
need to
to include
include in
in your
your app.


To do
do this,
this, follow
follow these
these steps:


1. Run
Run `npx
`npx @deity/create-falcon-app@2.7.0
@deity/create-falcon-app@2.7.0 my-project`
my-project` (replace
(replace `2.7.0`
`2.7.0` with
with your
your current
current version)

2. Commit
Commit `my-project`

3. Delete
Delete the
the `my-project`
`my-project` directory

4. Run
Run `npx
`npx @deity/create-falcon-app
@deity/create-falcon-app my-project`
my-project` (this
(this will
will pull
pull the
the latest
latest version)

5. Compare
Compare the
the changes
changes and
and copy
copy across
across anything
anything relevant
relevant into
into your
your app.


id: key-concepts

title: Key
Key Concepts

sidebar_label: Key
Key Concepts

hide_title: true



import SearchBar
SearchBar from
from '@theme/SearchBar';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Badge
Badge from
from '@site/src/components/Badge';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';


# Key
Key Concepts
Concepts of
of Deity
Deity Platform

<p className="desc
className="desc pb20">Deity
pb20">Deity is
is the
the endlessly
endlessly flexible
flexible composer
composer providing
providing the
the utmost
utmost customer
customer centric
centric approach
approach to
to any
any fast-growing
fast-growing and
and forward
forward thinking
thinking ecommerce
ecommerce merchant.</p>


## The
The value
value of
of composable
composable architecture


Modernize and
and extend
extend your
your technology
technology stack
stack to
to improve
improve the
the way
way you
you build,
build, adapt
adapt and
and scale.
scale. Say
Say goodbye
goodbye to
to lock-ins,
lock-ins, performance
performance issues,
issues, costly
costly feature
feature implementations,
implementations, growth
growth limitations
limitations and
and code
code spaghetti.
spaghetti. Composable
Composable Commerce
Commerce is
is the
the new
new standard.


<div className="flex
className="flex mb100
mb100 brighten">

<Card open="true"
open="true" to="">

<img src="/img/icons/plugs.svg"
src="/img/icons/plugs.svg" />

<h4>Make systems
systems talk</h4>

<p>Let platforms
platforms and
and services
services work
work together
together without
without the
the need
need of
of direct
direct integrations
integrations between
between them.
them. Deity’s
Deity’s composer
composer makes
makes sure
sure the
the connections
connections are
are there.</p>


<Card open="true"
open="true" to="">

<img src="/img/icons/polygon.svg"
src="/img/icons/polygon.svg" />

<h4>Continuity of
of business
business processes</h4>

<p>Ensure continuity
continuity of
of existing
existing business
business processes
processes with
with modern,
modern, cloud-native
cloud-native solutions
solutions that
that interface
interface with
with legacy
legacy environments.</p>


<Card open="true"
open="true" to="">

<img src="/img/icons/brain.svg"
src="/img/icons/brain.svg" />

<h4>Utilize intelligent
intelligent tooling</h4>

<p>Take advantage
advantage of
of intelligent
intelligent tooling
tooling between
between the
the frontends
frontends and
and stack
stack of
of vendors
vendors to
to truly
truly compose
compose your
your digital
digital experiences.</p>






## How
How it
it works


<p className="desc
className="desc pb20">Truly
pb20">Truly compose
compose your
your ecommerce
ecommerce with
with a
a solid
solid and
and flexible
flexible foundation.
foundation. Integrate
Integrate any
any API-based
API-based service
service without
without adding
adding complexity
complexity or
or disrupting
disrupting your
your current
current setup.
setup. We
We provide
provide the
the connections.</p>


### Products
Products to
to build
build your
your digital
digital experience
 

<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/composer">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<p>Compose outstanding
outstanding digital
digital experiences
experiences to
to achieve
achieve transactional
transactional excellence.</p>


<Card to="/storefront">

<img src="/img/icons/shop.svg"
src="/img/icons/shop.svg" />


<p>Focus on
on customer
customer experience
experience to
to exceed
exceed expectations.</p>


<Card to="/payments">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<p>Integrate multiple
multiple payment
payment service
service providers
providers to
to use
use any
any payment
payment method.</p>


<Card to="/console">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />

<h4>Cloud Console</h4>

<p>Manage your
your subscriptions,
subscriptions, users,
users, deployments,
deployments, integrations
integrations and
and more
more with
with our
our web-based
web-based application.</p>





### Learn
Learn the
the basics


<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<h5>Working with
with extensions</h5>


Eu condimentum
condimentum orci
orci tristique
tristique felis
felis sit
sit est
est proin
proin ipsum
ipsum magna.
magna. Eget
Eget vestibulum
vestibulum et
et adipiscing
adipiscing in
in ornare
ornare tellus

libero cras
cras at
at aliquam.




<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<h5>Register a
a custom
custom module</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat






<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<h5>Setup a
a local
local development
development profile</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat





<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/data.svg"
src="/img/icons/data.svg" />


<h5>Overriding components</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat






<div className="flex
className="flex mb100
mb100 brighten">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />


<h5>Deploying a
a build
build to
to a
a remote
remote environment</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat





<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/switch.svg"
src="/img/icons/switch.svg" />


<h5>Set a
a custom
custom environment
environment variable</h5>


Cras ultricies
ultricies arcu
arcu dictum
dictum mauris
mauris condimentum
condimentum ac
ac massa
massa scelerisque
scelerisque blandit.
blandit. Neque
Neque purus
purus nullam
nullam ornare
ornare volutpat










id: 2-3-1

title: Release
Release Notes
Notes -
- 2.3.1

sidebar_label: "2.3.1"

description: Falcon
Falcon platform
platform v2.3.1
v2.3.1 release
release notes



## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅


- Added
Added indication
indication of
of total
total number
number of
of order
order items
items on
on orders
orders page
page (Demo
(Demo V2)

- Fixed
Fixed order
order page
page overflow
overflow when
when product
product has
has many
many options
options (Demo
(Demo V2)


id: 2-7-9

title: Release
Release Notes
Notes -
- 2.7.9

sidebar_label: '2.7.9'

description: Falcon
Falcon platform
platform v2.7.9
v2.7.9 release
release notes



###### Release
Release Date
Date (2021-05-10)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Updated
Updated `lodash`
`lodash` in
in all
all packages
packages to
to `4.17.21`
`4.17.21` to
to fix
fix security
security issues

- Replaced
Replaced `node-sass-chokidar`
`node-sass-chokidar` with
with `node-sass`
`node-sass` and
and update
update webpack
webpack config
config to
to fix
fix support
support for
for scss
scss modules


## Polish
Polish 💅




id: 2-3-0

title: Release
Release Notes
Notes -
- 2.3.0

sidebar_label: '2.3.0'

description: Falcon
Falcon platform
platform v2.3.0
v2.3.0 release
release notes



###### Release
Release Date
Date (2020-06-18)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Add
Add support
support for
for BigCommerce
BigCommerce embedded
embedded checkout

- Add
Add support
support for
for BigCommerce
BigCommerce multi
multi currency


## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix issue
issue with
with blog
blog post
post pages
pages not
not loading
loading on
on demo-v1

- Reset
Reset pagination
pagination after
after applying
applying filters

- Fix
Fix line
line item
item prices
prices in
in the
the mini
mini cart

- Refetch
Refetch mini
mini cart
cart prices
prices after
after product
product is
is removed

- `FormFieldLabel`
`FormFieldLabel` component
component is
is now
now themable


## Polish
Polish 💅


- Improve
Improve styling
styling on
on the
the checkout
checkout payment
payment options

- Improve
Improve messaging
messaging in
in checkout
checkout if
if no
no shipping
shipping methods
methods are
are available

- Small
Small styling
styling improvements
improvements to
to the
the checkout
checkout form


id: 2-7-8

title: Release
Release Notes
Notes -
- 2.7.8

sidebar_label: '2.7.8'

description: Falcon
Falcon platform
platform v2.7.8
v2.7.8 release
release notes



###### Release
Release Date
Date (2021-04-30)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Fixed
Fixed url
url resolver
resolver so
so it
it doesn't
doesn't pass
pass query
query string
string parameters
parameters to
to Magento
Magento (`@deity/falcon-magento2-api`)


## Polish
Polish 💅




id: 2-7-18

title: Release
Release Notes
Notes -
- 2.7.18

sidebar_label: '2.7.18'

description: Falcon
Falcon platform
platform v2.7.18
v2.7.18 release
release notes



###### Release
Release Date
Date (2021-09-08)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Add
Add `node-fetch`
`node-fetch` version
version `2.6.1`
`2.6.1` to
to resolutions
resolutions to
to fix
fix incompatibility
incompatibility issue.


## Polish
Polish 💅




## Upgrade
Upgrade Notes
Notes 📝




id: 2-7-7

title: Release
Release Notes
Notes -
- 2.7.7

sidebar_label: '2.7.7'

description: Falcon
Falcon platform
platform v2.7.7
v2.7.7 release
release notes



###### Release
Release Date
Date (2021-04-28)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Added
Added the
the api
api package
package `@deity/falcon-file-redirect-api`
`@deity/falcon-file-redirect-api` to
to the
the Falcon
Falcon server
server config
config for
for both
both demos

- Upgraded
Upgraded `@deity/falcon-payments`
`@deity/falcon-payments` and
and corresponding
corresponding packages
packages to
to `2.7.1`
`2.7.1` in
in both
both demos.


## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅




id: 2-4-0

title: Release
Release Notes
Notes -
- 2.4.0

sidebar_label: '2.4.0'

description: Falcon
Falcon platform
platform v2.4.0
v2.4.0 release
release notes



###### Release
Release Date
Date (2020-06-29)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Added
Added support
support for
for product
product options
options (Demo
(Demo V2)


## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅


- changed
changed HTML
HTML tag
tag of
of AddressDetailsLayout
AddressDetailsLayout to
to `<address>`
`<address>` (Falon
(Falon UI
UI Kit)


id: 2-7-13

title: Release
Release Notes
Notes -
- 2.7.13

sidebar_label: '2.7.13'

description: Falcon
Falcon platform
platform v2.7.13
v2.7.13 release
release notes



###### Release
Release Date
Date (2021-05-21)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- **Security
**Security Patch**
Patch** this
this patch
patch is
is recommended
recommended to
to be
be installed
installed by
by all
all users.
users. (`@deity/falcon-magento2-api`)


## Polish
Polish 💅




id: 2-6-2

title: Release
Release Notes
Notes -
- 2.6.2

sidebar_label: '2.6.2'

description: Falcon
Falcon platform
platform v2.6.2
v2.6.2 release
release notes



###### Release
Release Date
Date (2021-01-26)


## Breaking
Breaking Changes
Changes 💥


- Support
Support for
for Node
Node V10
V10 removed

- Renamed
Renamed `itemId`
`itemId` to
to `id`
`id` for
for cart
cart and
and order
order items
items (`@deity/falcon-shop-env`)


## New
New Features
Features 🚀


- Add
Add support
support for
for refunds
refunds and
and shipments
shipments in
in our
our BigCommerce
BigCommerce API
API package.

- `responsiveprops`
`responsiveprops` improvements
improvements added
added to
to `@detiy/falcon-ui`

- Added
Added support
support for
for multiple
multiple cart
cart coupons/vouchers
coupons/vouchers in
in the
the frontend

- Added
Added `EndpointManager.getDataSource`
`EndpointManager.getDataSource` method
method to
to get
get an
an instance
instance of
of the
the required
required DataSource
DataSource (`@deity/falcon-server-env`)

- Added
Added support
support for
for `KBC`
`KBC` payments
payments via
via `Mollie`.

- Schema.json
Schema.json added
added to
to blog
blog posts
posts and
and blog
blog listings
listings (`@deity/falcon-ui-kit`)
(`@deity/falcon-ui-kit`) -
- [See
[See Docs](/platform/client/schema-json)


## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix Mollie
Mollie Credit
Credit Card
Card component
component in
in Demo
Demo V2

- Fixed
Fixed crashes
crashes during
during dependency
dependency installation
installation on
on windows

- Fixed
Fixed loader
loader not
not showing
showing when
when changing
changing which
which product
product you
you are
are viewing


## Polish
Polish 💅


- Fix
Fix input
input font
font sizes
sizes in
in the
the checkout
checkout to
to prevent
prevent zoom
zoom on
on Safari
Safari mobile.

- Added
Added a
a content
content loader
loader for
for product
product pages
pages in
in Demo
Demo V2

- Show
Show the
the original
original prices
prices of
of sale
sale items
items in
in Cart
Cart and
and MiniCart

- Fixed
Fixed sidebar
sidebar overflow
overflow causing
causing styling
styling issues


id: 2-7-3

title: Release
Release Notes
Notes -
- 2.7.3

sidebar_label: '2.7.3'

description: Falcon
Falcon platform
platform v2.7.3
v2.7.3 release
release notes



###### Release
Release Date
Date (2021-03-17)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Added
Added possibility
possibility to
to pass
pass scope
scope mapping
mapping configuration
configuration for
for WordPress
WordPress via
via env
env variables
variables (`@deity/falcon-server`)


## Bug
Bug Fixes
Fixes 🐛


- Added
Added no-cache
no-cache headers
headers for
for sw.js
sw.js and
and SSR
SSR rendered
rendered content
content (`@deity/falcon-server`)


## Polish
Polish 💅




id: 2-7-17

title: Release
Release Notes
Notes -
- 2.7.17

sidebar_label: '2.7.17'

description: Falcon
Falcon platform
platform v2.7.17
v2.7.17 release
release notes



###### Release
Release Date
Date (2021-09-07)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Use
Use product
product gallery
gallery sort
sort order
order for
for BigCommerce
BigCommerce integration


## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix `mailto`
`mailto` address
address from
from config
config on
on the
the contact
contact page
page in
in demo
demo v2

- Add
Add Cart
Cart item
item price
price fallback
fallback in
in demo
demo v2

- Update
Update css
css modules
modules loading
loading in
in webpack
webpack config


## Polish
Polish 💅




## Upgrade
Upgrade Notes
Notes 📝




id: 2-7-2

title: Release
Release Notes
Notes -
- 2.7.2

sidebar_label: '2.7.2'

description: Falcon
Falcon platform
platform v2.7.2
v2.7.2 release
release notes



###### Release
Release Date
Date (2021-03-12)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix locale
locale mapping
mapping in
in BigCommerce
BigCommerce API
API (`@deity/falcon-bigcommerce-api`)


## Polish
Polish 💅




id: 2-7-16

title: Release
Release Notes
Notes -
- 2.7.16

sidebar_label: '2.7.16'

description: Falcon
Falcon platform
platform v2.7.16
v2.7.16 release
release notes



###### Release
Release Date
Date (2021-08-04)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix remove
remove cart
cart mutation
mutation after
after upgrading
upgrading to
to apollo/client

- Fix
Fix sidebar
sidebar action
action after
after adding
adding to
to cart
cart in
in Demo
Demo v2


## Polish
Polish 💅




## Upgrade
Upgrade Notes
Notes 📝




id: 2-5-0

title: Release
Release Notes
Notes -
- 2.5.0

sidebar_label: '2.5.0'

description: Falcon
Falcon platform
platform v2.5.0
v2.5.0 release
release notes



###### Release
Release Date
Date (2020-10-28)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Add
Add ability
ability to
to check
check whether
whether an
an email
email is
is registered
registered (Falcon
(Falcon BigCommerce
BigCommerce API/Falcon
API/Falcon Shop
Shop Data/Demo
Data/Demo v2)

- Add
Add checking
checking of
of Types
Types (yarn
(yarn check-types)
check-types) (Falcon
(Falcon Client)

- Add
Add HTTPS
HTTPS option
option (localhost)
(localhost) (Falcon
(Falcon Client)

- Add
Add IOC
IOC container
container (Falcon
(Falcon Server)

- Add
Add dynamically
dynamically generated
generated negative
negative spacings
spacings for
for all
all positive
positive spacings
spacings (Falcon
(Falcon UI)


## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix sidebar
sidebar horizontal
horizontal scrolling
scrolling bug
bug (Demo
(Demo v2)

- Fix
Fix copying
copying empty
empty `views`
`views` directory
directory (Falcon
(Falcon Client)

- Fix
Fix initial
initial language
language configuration
configuration (Falcon
(Falcon Client)

- fixed
fixed part
part of
of minor
minor types
types issues
issues (Falcon
(Falcon Client)


## Polish
Polish 💅


- Add
Add a
a fixed
fixed add
add to
to cart
cart bottom
bottom bar
bar in
in the
the product
product overview
overview page
page (Demo
(Demo v2)

- Added
Added on
on mobile
mobile the
the ability
ability for
for the
the header
header to
to transform
transform to
to a
a fixed
fixed bottom
bottom navigation
navigation menu
menu (Demo
(Demo v2)

- Refactor:
Refactor: Update
Update version
version of
of `@types/react`
`@types/react` and
and `react-router-dom`
`react-router-dom` (Falcon
(Falcon Client)

- Refactor:
Refactor: Changed
Changed config
config of
of TypeScript
TypeScript from
from js
js to
to `tsconfig.json`
`tsconfig.json` (Falcon
(Falcon Dev
Dev Tools)


id: 2-7-6

title: Release
Release Notes
Notes -
- 2.7.6

sidebar_label: '2.7.6'

description: Falcon
Falcon platform
platform v2.7.6
v2.7.6 release
release notes



###### Release
Release Date
Date (2021-04-06)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- `@deity/falcon-search-extension`
`@deity/falcon-search-extension` added
added as
as a
a dependency
dependency to
to Demo
Demo v1.


## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅




id: 2-7-12

title: Release
Release Notes
Notes -
- 2.7.12

sidebar_label: '2.7.12'

description: Falcon
Falcon platform
platform v2.7.12
v2.7.12 release
release notes



###### Release
Release Date
Date (2021-05-18)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- **Security
**Security Patch**
Patch** this
this patch
patch is
is recommended
recommended to
to be
be installed
installed by
by all
all users.
users. (`@deity/falcon-bigcommerce-api`)

- Changed
Changed the
the way
way the
the pending
pending payment
payment page
page redirects
redirects to
to be
be more
more efficient
efficient (demo
(demo v1
v1 and
and demo
demo v2)


## Polish
Polish 💅




id: 2-6-0

title: Release
Release Notes
Notes -
- 2.6.0

sidebar_label: '2.6.0'

description: Falcon
Falcon platform
platform v2.6.0
v2.6.0 release
release notes



###### Release
Release Date
Date (2020-12-22)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Falcon
Falcon Payments
Payments released
released with
with support
support for
for Mollie
Mollie &
& Stripe.
Stripe. [See
[See our
our payments
payments docs](https://docs.deity.io/docs/platform/payments/falcon-payments/overview)
docs](https://docs.deity.io/docs/platform/payments/falcon-payments/overview) for
for full
full feature
feature list.


## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅




id: 2-4-6

title: Release
Release Notes
Notes -
- 2.4.6

sidebar_label: '2.4.6'

description: Falcon
Falcon platform
platform v2.4.6
v2.4.6 release
release notes



###### Release
Release Date
Date (2020-09-11)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Add
Add WP
WP host
host configuration
configuration (Falcon
(Falcon WordPress
WordPress API)

- Add
Add `severity`
`severity` log
log field
field mapped
mapped from
from log
log level
level (Falcon
(Falcon Logger)


## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix header
header not
not scaling
scaling properly
properly on
on Firefox
Firefox (Demo
(Demo v2)

- Fix
Fix issue
issue when
when removing
removing an
an item
item from
from the
the MiniCart
MiniCart (Demo
(Demo v2)

- Fix
Fix issue
issue with
with `PageLayout`
`PageLayout` styling
styling (lack
(lack of
of full
full height)
height) (Demo
(Demo v2)

- Fix
Fix recently
recently viewed
viewed items
items not
not showing
showing up
up (Demo
(Demo v2)

- Fix
Fix form
form submission
submission by
by dropdown
dropdown (Falcon
(Falcon UI)

- Fix
Fix credit
credit card
card checkout
checkout (Falcon
(Falcon Stripe
Stripe Plugin)

- Fix
Fix fetching
fetching addresses
addresses on
on the
the `Order`
`Order` type
type (Falcon
(Falcon BigCommerce
BigCommerce API)

- Fix
Fix `NumberInput`
`NumberInput` buttons
buttons not
not disabling
disabling (Falcon
(Falcon UI)

- Fix
Fix `Sidebar`
`Sidebar` animation
animation when
when changing
changing sides
sides (Falcon
(Falcon UI)

- Fix
Fix customer
customer registration
registration (Demo
(Demo V1)

- Fix
Fix product
product options
options support
support to
to match
match new
new schema
schema (Magento
(Magento 2
2 API)


## Polish
Polish 💅


- Improve
Improve handling
handling of
of many
many items
items by
by `ProductGallery`
`ProductGallery` (Demo
(Demo v2)

- Refactor
Refactor containers
containers for
for uniformity
uniformity (Falcon
(Falcon Server)

- Add
Add checks
checks preventing
preventing error
error message
message spam
spam when
when starting
starting server
server (Falcon
(Falcon Server)


id: 2-7-1

title: Release
Release Notes
Notes -
- 2.7.1

sidebar_label: '2.7.1'

description: Falcon
Falcon platform
platform v2.7.1
v2.7.1 release
release notes



###### Release
Release Date
Date (2021-03-10)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Update
Update Falcon
Falcon Payments
Payments dependencies
dependencies from
from 2.6.4
2.6.4 ->
-> 2.7.0


## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅




id: 2-7-15

title: Release
Release Notes
Notes -
- 2.7.15

sidebar_label: '2.7.15'

description: Falcon
Falcon platform
platform v2.7.15
v2.7.15 release
release notes



###### Release
Release Date
Date (2021-08-04)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix the
the getRegionList
getRegionList method
method in
in the
the BigCommerce
BigCommerce API
API package
package to
to pull
pull all
all results
results (previously
(previously capped
capped at
at 50)


## Polish
Polish 💅




## Upgrade
Upgrade Notes
Notes 📝




id: 2-6-4

title: Release
Release Notes
Notes -
- 2.6.4

sidebar_label: '2.6.4'

description: Falcon
Falcon platform
platform v2.6.4
v2.6.4 release
release notes



###### Release
Release Date
Date (2021-02-23)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix issue
issue with
with our
our Magento
Magento API
API package
package where
where shipping
shipping costs
costs where
where being
being sent
sent to
to Falcon
Falcon Payments
Payments without
without tax
tax (`@deity/falcon-magento-api`).


## Polish
Polish 💅




id: 2-7-5

title: Release
Release Notes
Notes -
- 2.7.5

sidebar_label: '2.7.5'

description: Falcon
Falcon platform
platform v2.7.5
v2.7.5 release
release notes



###### Release
Release Date
Date (2021-03-29)


## Breaking
Breaking Changes
Changes 💥


- Allow
Allow for
for Magento
Magento URL
URL suffix
suffix to
to be
be controlled
controlled via
via env
env vars
vars (`@deity/falcon-magento2-api`).
(`@deity/falcon-magento2-api`). You
You may
may need
need to
to set
set the
the env
env var
var `MAGENTO_URL_SUFFIX`
`MAGENTO_URL_SUFFIX` to
to `.html`
`.html` when
when upgrading.


## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix missing
missing product
product description
description from
from product
product request
request (`@deity/falcon-magento2-api`).


## Polish
Polish 💅




id: 2-4-2

title: Release
Release Notes
Notes -
- 2.4.2

sidebar_label: '2.4.2'

description: Falcon
Falcon platform
platform v2.4.2
v2.4.2 release
release notes



###### Release
Release Date
Date (2020-07-15)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Added
Added `HelmetProvider`
`HelmetProvider` to
to `FalconClientMock`
`FalconClientMock` (Falcon
(Falcon Client)

- Added
Added support
support for
for passing
passing a
a function
function to
to the
the `globalCss`
`globalCss` prop
prop (Falcon
(Falcon UI)

- Added
Added keyboard
keyboard support
support to
to `<Dropdown>`
`<Dropdown>` component
component (Falcon
(Falcon UI)

- Added
Added integration
integration test
test for
for checkout
checkout flow
flow (Demo
(Demo V2)


## Bug
Bug Fixes
Fixes 🐛


- Fixed
Fixed Jest
Jest configuration
configuration for
for custom
custom app-level
app-level configurations
configurations (Falcon
(Falcon Client)

- Ignore
Ignore newlines
newlines when
when validating
validating character
character limits
limits (Falcon
(Falcon Front
Front Kit)

- Add
Add check
check for
for Intersection
Intersection Observer
Observer support
support (Falcon
(Falcon Front
Front Kit)

- Fixed
Fixed stale
stale content
content on
on orders
orders page
page (Demo
(Demo V2)

- Fixed
Fixed product
product loading
loading (BigCommerce
(BigCommerce API)


## Polish
Polish 💅


- Removed
Removed react-powerplug
react-powerplug dependency
dependency (Falcon
(Falcon UI
UI +
+ Falcon
Falcon UI
UI Kit)

- Removed
Removed react-adopt
react-adopt dependency
dependency (Demo
(Demo V2)

- Removed
Removed react-lazyload
react-lazyload dependency
dependency (Demo
(Demo V2)

- Removed
Removed react-powerplug
react-powerplug dependency
dependency (Demo
(Demo V2)


id: 2-7-11

title: Release
Release Notes
Notes -
- 2.7.11

sidebar_label: '2.7.11'

description: Falcon
Falcon platform
platform v2.7.11
v2.7.11 release
release notes



###### Release
Release Date
Date (2021-05-11)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅


- Enabled
Enabled introspection
introspection when
when debug
debug mode
mode is
is enabled
enabled (Falcon
(Falcon Server)


id: full-changelog

title: Falcon
Falcon Changelog

sidebar_label: 'Full
'Full Changelog'

description: Falcon
Falcon platform
platform all
all versions
versions and
and their
their release
release notes



Versions marked
marked with
with a
a number
number and
and date
date (e.g.
(e.g. Falcon
Falcon Platform
Platform v2.1.1
v2.1.1 (2020-05-08))
(2020-05-08)) are
are already
already released
released and
and available
available via
via npm.


## Falcon
Falcon Platform
Platform 2.7.18
2.7.18 (2021-09-08)


### Demo
Demo V2


- Add
Add `node-fetch`
`node-fetch` version
version `2.6.1`
`2.6.1` to
to resolutions
resolutions to
to fix
fix incompatibility
incompatibility issue.


## Falcon
Falcon Platform
Platform 2.7.17
2.7.17 (2021-09-07)


### Demo
Demo V2


- Fix
Fix `mailto`
`mailto` address
address from
from config
config on
on the
the contact
contact page

- Add
Add Cart
Cart item
item price
price fallback


### Falcon
Falcon BigCommerce
BigCommerce API


- Use
Use product
product gallery
gallery sort
sort order
order for
for BigCommerce
BigCommerce integration


### Falcon
Falcon Client


- Update
Update css
css modules
modules loading
loading in
in webpack
webpack config


## Falcon
Falcon Platform
Platform 2.7.16
2.7.16 (2021-08-05)


### Falcon
Falcon Shop
Shop Data


- Fix
Fix remove
remove cart
cart mutation
mutation after
after upgrading
upgrading to
to apollo/client


### Demo
Demo V2


- Fix
Fix sidebar
sidebar action
action after
after adding
adding to
to cart


## Falcon
Falcon Platform
Platform 2.7.15
2.7.15 (2021-08-04)


### Falcon
Falcon BigCommerce
BigCommerce API


- Add
Add limit
limit of
of 250
250 to
to regions
regions so
so it's
it's not
not capped
capped at
at 50
50 entries


## Falcon
Falcon Platform
Platform 2.7.14
2.7.14 (2021-07-14)


### GeoIP


- Added
Added support
support for
for GeoIP
GeoIP in
in both
both Falcon
Falcon Server
Server and
and Falcon
Falcon Platform.


### Falcon
Falcon Blog
Blog Extension


- Cache
Cache author
author data
data for
for blog
blog posts
posts for
for improved
improved performance.


### Falcon
Falcon Wordpress
Wordpress API


- Return
Return author
author data
data that
that matches
matches the
the author
author type
type declared
declared in
in the
the blog
blog extension.


### Falcon
Falcon Front
Front Kit


- Migrate
Migrate to
to `@apollo/client`
`@apollo/client` (away
(away from
from `@apollo/react`,
`@apollo/react`, `graphql-tag`).


### Falcon
Falcon Client


- Migrate
Migrate to
to `@apollo/client`
`@apollo/client` (away
(away from
from `@apollo/react`,
`@apollo/react`, `graphql-tag`).


### Demo
Demo Apps


- Migrate
Migrate to
to `@apollo/client`
`@apollo/client` (away
(away from
from `@apollo/react`,
`@apollo/react`, `graphql-tag`).


## Falcon
Falcon Platform
Platform 2.7.13
2.7.13 (2021-05-21)


### Falcon
Falcon BigCommerce
BigCommerce API


- Security
Security patch


### Demo
Demo v1
v1 &
& Demo
Demo v2


- Changed
Changed the
the way
way the
the pending
pending payment
payment page
page redirects
redirects to
to be
be more
more efficient


## Falcon
Falcon Platform
Platform 2.7.12
2.7.12 (2021-05-18)


### Falcon
Falcon Magento
Magento API


- Security
Security patch


## Falcon
Falcon Platform
Platform 2.7.11
2.7.11 (2021-05-11)


### Falcon
Falcon Server


- Enabled
Enabled introspection
introspection when
when debug
debug mode
mode is
is enabled


## Falcon
Falcon Platform
Platform 2.7.10
2.7.10 (2021-05-11)


### Falcon
Falcon Server


- Added
Added DEBUG
DEBUG env
env var
var on
on FS
FS so
so it's
it's possible
possible to
to enable
enable GraphQL
GraphQL Playground


## Falcon
Falcon Platform
Platform 2.7.9
2.7.9 (2021-05-10)


- Updated
Updated lodash
lodash in
in all
all packages
packages to
to 4.17.21
4.17.21 to
to fix
fix security
security issues


### Falcon
Falcon Client


- Replaced
Replaced node-sass-chokidar
node-sass-chokidar with
with node-sass
node-sass and
and updated
updated webpack
webpack config
config to
to fix
fix support
support for
for scss
scss modules


## Falcon
Falcon Platform
Platform 2.7.8
2.7.8 (2021-04-30)


### Falcon
Falcon Magento
Magento API


- Fixed
Fixed url
url resolver
resolver so
so it
it doesn't
doesn't pass
pass query
query string
string parameters
parameters to
to Magento


## Falcon
Falcon Platform
Platform 2.7.7
2.7.7 (2021-04-28)


### Falcon
Falcon Server


- Added
Added falcon-file-redirect-api


### Demo
Demo v1


- Upgraded
Upgraded Falcon
Falcon Payments
Payments packages
packages to
to 2.7.1


### Demo
Demo v2


- Upgraded
Upgraded Falcon
Falcon Payments
Payments packages
packages to
to 2.7.1


## Falcon
Falcon Platform
Platform v2.7.6
v2.7.6 (2021-04-06)


### Demo
Demo v1


- `@deity/falcon-search-extension`
`@deity/falcon-search-extension` added
added as
as a
a dependency.


## Falcon
Falcon Platform
Platform 2.7.5
2.7.5 (2021-03-29)


### Falcon
Falcon Magento
Magento API


- Fixed
Fixed missing
missing product
product description
description from
from product
product request.

- Allow
Allow for
for Magento
Magento URL
URL suffix
suffix to
to be
be controlled
controlled via
via env
env vars.


## Falcon
Falcon Platform
Platform 2.7.4
2.7.4 (2021-03-26)


### Falcon
Falcon Stripe
Stripe Plugin


- Return
Return errors
errors so
so they
they can
can be
be used
used in
in the
the client
client app.


### Falcon
Falcon Blog
Blog Extension


- Add
Add cache
cache tags
tags to
to blog
blog posts
posts and
and blog
blog pages.


## Falcon
Falcon Platform
Platform 2.7.3
2.7.3 (2021-03-17)


### Falcon
Falcon Server


- Added
Added possibility
possibility to
to pass
pass scope
scope mapping
mapping configuration
configuration for
for WordPress
WordPress via
via env
env variables


- Added
Added no-cache
no-cache headers
headers for
for sw.js
sw.js and
and SSR
SSR rendered
rendered content


## Falcon
Falcon Platform
Platform 2.7.2
2.7.2 (2021-03-12)


### Falcon
Falcon BigCommerce
BigCommerce API


- Fix
Fix `en`
`en` ->
-> `en-GB`
`en-GB` locale
locale mapping.


### Falcon
Falcon Server


- Update
Update schema
schema to
to allow
allow language
language to
to be
be in
in 2
2 character
character format.


## Falcon
Falcon Platform
Platform 2.7.1
2.7.1 (2021-03-10)


### Dependencies


- Update
Update Falcon
Falcon Payments
Payments dependencies
dependencies from
from 2.6.4
2.6.4 ->
-> 2.7.0


## Falcon
Falcon Platform
Platform 2.7.0
2.7.0 (2021-03-09)


### Falcon
Falcon BigCommerce
BigCommerce API


- Fix
Fix order
order statuses

- Fix
Fix cart
cart restoration
restoration for
for failed
failed payments

- Fix
Fix issue
issue with
with orders
orders being
being archived

- Add
Add a
a check
check to
to webhooks
webhooks to
to prevent
prevent webhook
webhook collisions


### Falcon
Falcon Magento
Magento API


- Add
Add support
support for
for native
native search

- Fix
Fix order
order statuses
statuses blocking
blocking order
order processing


### Falcon
Falcon Client


- Pass
Pass proper
proper httpLink
httpLink configuration
configuration to
to `getApolloClientUploadLink()`

- Fix
Fix missing
missing ApolloClient
ApolloClient Link


### Falcon
Falcon Front
Front Kit


- Clear
Clear shipping
shipping method
method in
in `CheckoutProvider`
`CheckoutProvider` when
when billing
billing address
address is
is changed
changed to
to line
line up
up with
with the
the session
session data


### Demo
Demo V1


- Add
Add missing
missing Mollie
Mollie ENV
ENV vars

- Add
Add search
search components


### New
New Features


- Add
Add support
support for
for redirects

- Add
Add support
support for
for blog
blog 'pages'


## Falcon
Falcon Platform
Platform v2.6.5
v2.6.5 (2021-02-25)


### Falcon
Falcon BigCommerce
BigCommerce API


- Fix
Fix issue
issue cart
cart being
being emptied
emptied on
on SSR.


## Falcon
Falcon Platform
Platform v2.6.4
v2.6.4 (2021-02-23)


### Falcon
Falcon Magento
Magento API


- Fix
Fix issue
issue with
with shipping
shipping being
being sent
sent to
to payments
payments without
without tax.


## Falcon
Falcon Platform
Platform 2.6.2
2.6.2 (2021-01-26)


- Dropped
Dropped Node
Node 10
10 support


### Create
Create Falcon
Falcon App


- fixed
fixed crashes
crashes during
during dependency
dependency installation
installation on
on windows


### Falcon
Falcon Server
Server Env


- added
added `EndpointManager.getDataSource`
`EndpointManager.getDataSource` method
method to
to get
get an
an instance
instance of
of the
the required
required DataSource


### Falcon
Falcon UI


- added
added more
more responsive
responsive style
style props
props and
and values

- fixed
fixed sidebar
sidebar overflow
overflow causing
causing issues


### Falcon
Falcon Demo


- added
added support
support for
for multiple
multiple cart
cart coupons/vouchers
coupons/vouchers in
in the
the frontend

- added
added a
a content
content loader
loader for
for the
the product
product page

- added
added a
a feature
feature which
which shows
shows original
original prices
prices of
of sale
sale items
items in
in `Cart`
`Cart` and
and `MiniCart`

- fixed
fixed loader
loader not
not showing
showing when
when changing
changing which
which product
product you
you are
are viewing

- fixed
fixed the
the invisibility
invisibility of
of the
the mobile
mobile bottom
bottom bar
bar when
when at
at the
the top
top of
of search/checkout
search/checkout pages

- fixed
fixed input
input font
font sizes
sizes causing
causing iOS
iOS Safari
Safari to
to zoom
zoom in
in on
on fields


### Falcon
Falcon BigCommerce
BigCommerce API


- added
added fetches
fetches for
for the
the `regularPrice`
`regularPrice` of
of items
items which
which are
are in
in the
the cart


### Falcon
Falcon Shop
Shop Data


- added
added `regularPrice`
`regularPrice` and
and `rowTotalWithDiscount`
`rowTotalWithDiscount` fields
fields to
to `MiniCartQuery`

- added
added `regularPrice`
`regularPrice` to
to `CartItem`


### Falcon
Falcon Shop
Shop Extension


- BREAKING:
BREAKING: renamed
renamed `itemId`
`itemId` to
to `id`


## Falcon
Falcon Platform
Platform v2.5.0
v2.5.0 (2020-10-28)


### Falcon
Falcon Demo


- added
added registered
registered guest
guest email
email validation
validation to
to the
the guest
guest checkout
checkout form

- fixed
fixed sidebar
sidebar horizontal
horizontal scrolling
scrolling bug

- Added
Added a
a fixed
fixed add
add to
to cart
cart bottom
bottom bar
bar in
in the
the product
product overview
overview page

- Changed
Changed on
on mobile
mobile the
the header
header to
to a
a fixed
fixed bottom
bottom navigation
navigation menu


### Falcon
Falcon BigCommerce
BigCommerce API


- added
added ability
ability to
to check
check whether
whether an
an email
email is
is registered


### Falcon
Falcon Shop
Shop Data


- added
added a
a query
query for
for checking
checking whether
whether an
an email
email is
is registered
registered to
to a
a customer


### Falcon
Falcon Client


- fixed
fixed coping
coping empty
empty `views`
`views` directory

- fixed
fixed initial
initial language
language configuration

- add
add checking
checking of
of Types
Types (yarn
(yarn check-types)

- update
update version
version of
of `@types/react`
`@types/react` and
and `react-router-dom`

- fixed
fixed part
part of
of minor
minor types
types issues

- added
added HTTPS
HTTPS option
option (localhost)


### Falcon
Falcon Server


- introduced
introduced IOC
IOC container


### Falcon
Falcon Dev
Dev Tools


- changed
changed config
config of
of TypeScript
TypeScript from
from js
js to
to `tsconfig.json`


### Falcon
Falcon UI


- added
added dynamically
dynamically generated
generated negative
negative spacings
spacings for
for all
all positive
positive spacings


### Falcon
Falcon UI
UI Kit


- added
added schema.json
schema.json components


## Falcon
Falcon Platform
Platform v2.4.8
v2.4.8 (2020-09-14)


### Falcon
Falcon Example
Example V2


- Update
Update theme
theme Presets


## Falcon
Falcon Platform
Platform v2.4.6
v2.4.6 (2020-09-11)


### Falcon
Falcon Demo


- improved
improved handling
handling of
of many
many items
items by
by `ProductGallery`

- fixed
fixed form
form submission
submission by
by dropdown

- fixed
fixed recently
recently viewed
viewed items
items not
not showing
showing up

- fixed
fixed issue
issue with
with `PageLayout`
`PageLayout` styling
styling (lack
(lack of
of full
full height)

- refactored
refactored the
the styling
styling of
of CMSContent
CMSContent for
for the
the sake
sake of
of uniformity

- added
added urlKey
urlKey to
to mini
mini cart
cart gql
gql query

- fixed
fixed Firefox
Firefox header
header bug
bug upon
upon page
page resize

- added
added `aria-controls`
`aria-controls` attributes
attributes to
to sidebar
sidebar controlling
controlling buttons


### Falcon
Falcon Logger


- added
added `severity`
`severity` log
log field
field mapped
mapped from
from log
log level


### Falcon
Falcon BigCommerce
BigCommerce API


- fixed
fixed fetching
fetching addresses
addresses on
on the
the `Order`
`Order` type


### Falcon
Falcon Magento
Magento Api


- fixed
fixed the
the Magento
Magento API
API package
package to
to work
work with
with the
the latest
latest product
product options
options GraphQL
GraphQL schema


### Falcon
Falcon UI


- fixed
fixed `NumberInput`
`NumberInput` buttons
buttons not
not disabling

- fixed
fixed `Sidebar`
`Sidebar` animation
animation when
when changing
changing sides


### Falcon
Falcon wordpress
wordpress api


- Added
Added wordpress
wordpress host
host configuration


### Falcon
Falcon Stripe
Stripe Plugin


- fixed
fixed an
an error
error when
when checking
checking out
out with
with a
a credit
credit card


### Falcon
Falcon Server


- refactored
refactored containers
containers for
for uniformity,
uniformity, added
added checks
checks preventing
preventing error
error message
message spam


## Falcon
Falcon Platform
Platform v2.4.2
v2.4.2 (2020-07-15)


### Falcon
Falcon Client


- removed
removed sourcemaps
sourcemaps from
from production
production builds

- added
added `HelmetProvider`
`HelmetProvider` to
to `FalconClientMock`

- fixed
fixed Jest
Jest configuration
configuration for
for custom
custom app-level
app-level configurations


### Falcon
Falcon UI


- added
added support
support for
for passing
passing a
a function
function to
to the
the `globalCss`
`globalCss` prop

- removed
removed `react-powerplug`
`react-powerplug` dependency

- added
added basic
basic keyboard
keyboard support
support to
to `Dropdown`


### Falcon
Falcon UI
UI Kit


- removed
removed `react-powerplug`
`react-powerplug` dependency

- added
added support
support for
for `placeholder`
`placeholder` in
in `Select`
`Select` component

- added
added a
a confirm
confirm password
password field
field to
to the
the signup
signup form


### Falcon
Falcon Front
Front Kit


- ignore
ignore newlines
newlines when
when validating
validating character
character limits

- Add
Add check
check for
for Intersection
Intersection Observer
Observer support

- added
added a
a confirm
confirm password
password field
field validator


### Falcon
Falcon Demo


- fixed
fixed stale
stale content
content on
on orders
orders page

- removed
removed `react-adopt`
`react-adopt` dependency

- removed
removed `react-lazyload`
`react-lazyload` dependency

- removed
removed `react-powerplug`
`react-powerplug` dependency

- added
added integration
integration test
test for
for checkout
checkout flow


### Falcon
Falcon BigCommerce
BigCommerce API


- fixed
fixed product
product loading


## Falcon
Falcon Platform
Platform v2.4.0


### Falcon
Falcon UI
UI Kit


- changed
changed HTML
HTML tag
tag of
of `AddressDetailsLayout`
`AddressDetailsLayout` to
to `address`


### Falcon
Falcon Demo


- added
added support
support for
for product
product options


## Falcon
Falcon Platform
Platform v2.3.1


### Falcon
Falcon Demo


- added
added indication
indication of
of total
total number
number of
of order
order items
items on
on orders
orders page

- fixed
fixed order
order page
page overflow
overflow when
when product
product has
has many
many options


## Falcon
Falcon Platform
Platform v2.3.0


### Falcon
Falcon Shop
Shop Data


- refetch
refetch `MiniCart`
`MiniCart` after
after removing
removing a
a cart
cart item


### Falcon
Falcon UI


- fixed
fixed `NumberInput`
`NumberInput` decrease
decrease button
button being
being disabled
disabled when
when `min`
`min` prop
prop was
was not
not defined

- fixed
fixed `NumberInput`
`NumberInput` buttons
buttons not
not being
being disabled
disabled when
when `min`
`min` or
or `max`
`max` props
props were
were `0`


### Falcon
Falcon UI
UI Kit


- fixed
fixed `FormFieldLabel`
`FormFieldLabel` to
to be
be themable

- added
added `lineClamp`
`lineClamp` CSS
CSS helper
helper function


### Falcon
Falcon Front
Front Kit


- reset
reset pagination
pagination to
to page
page 1
1 after
after applying
applying filters


## Falcon
Falcon Platform
Platform v2.2.0


### Falcon
Falcon Client


- added
added GraphQL
GraphQL Upload
Upload support

- upgraded
upgraded `typescript`
`typescript` to
to version
version 3.9.2

- upgraded
upgraded `babel`
`babel` to
to version
version 7.9.6


### Falcon
Falcon Server


- upgraded
upgraded ApolloServer-related
ApolloServer-related packages
packages to
to the
the latest
latest version

- `apollo-server-cache-memcached`
`apollo-server-cache-memcached` to
to `^0.6.5`

- `apollo-server-cache-redis`
`apollo-server-cache-redis` to
to `^1.2.1`

- `apollo-server-caching`
`apollo-server-caching` to
to `^0.5.1`

- `apollo-server-env`
`apollo-server-env` to
to `^2.4.4`

- `apollo-server-errors`
`apollo-server-errors` to
to `^2.4.1`

- `apollo-server-koa`
`apollo-server-koa` to
to `^2.14.2`

- `apollo-datasource`
`apollo-datasource` to
to `^0.7.1`

- `apollo-datasource-rest`
`apollo-datasource-rest` to
to `^0.9.2`


### Falcon
Falcon Theme
Theme Editor


- fixed
fixed updating
updating theme
theme with
with HMR


### Falcon
Falcon Front
Front Kit


- added
added props
props to
to allow
allow overriding
overriding `LocaleProvider`
`LocaleProvider` values

- BREAKING:
BREAKING: removed
removed export
export for
for `addCimodeLocale`


### Falcon
Falcon Shop
Shop Extension


- added
added `itemOptions`
`itemOptions` field
field on
on `OrderItem`


### Falcon
Falcon Scripts


- upgraded
upgraded `jest`
`jest` to
to version
version 26.0.1


### Falcon
Falcon Shop
Shop Extension


- BREAKING:
BREAKING: removed
removed type
type `CartItemOptionValue`

- BREAKING:
BREAKING: removed
removed field
field `data`
`data` from
from type
type `CartItemOption`


## Falcon
Falcon Platform
Platform v2.1.1
v2.1.1 (2020-05-08)


### Falcon
Falcon Server


- fixed
fixed initializing
initializing `Api`,
`Api`, `Extension`,
`Extension`, `Component`
`Component` and
and `Endpoints`
`Endpoints` containers
containers when
when a
a module
module is
is disabled


## Falcon
Falcon Platform
Platform v2.1.0
v2.1.0 (2020-05-07)


### Falcon
Falcon Server


- added
added `enabled`
`enabled` (default:
(default: `true`)
`true`) definition
definition flag
flag for
for all
all "Container"
"Container" entries


### Falcon
Falcon Client


- fixed
fixed overriding
overriding of
of babel
babel configuration

- improved
improved HMR
HMR by
by reloading
reloading the
the page
page less
less often
often and
and better
better error
error handling

- fixed
fixed passing
passing headers
headers during
during GraphQL
GraphQL requests
requests error
error handling


### Falcon
Falcon UI


- fixed
fixed accesibility
accesibility issues
issues of
of `NumberInput`

- improved
improved performance
performance of
of themed
themed components

- fixed
fixed disabled
disabled state
state of
of buttons
buttons on
on `NumberInput`


### Falcon
Falcon Theme
Theme Editor


- fixed
fixed white
white view
view when
when content
content overflowed


### Falcon
Falcon Front
Front Kit


- improved
improved performance
performance of
of `Field`
`Field` and
and `FormField`
`FormField` components

- added
added `forceReady`
`forceReady` prop
prop to
to `<EnsureTTI
`<EnsureTTI />`
/>` to
to allow
allow setting
setting ready
ready state
state declaratively


### ESLint
ESLint Config
Config Falcon


- added
added `react-hooks`
`react-hooks` ESLint
ESLint rules
rules and
and fixed
fixed errors
errors and
and warnings


### Create
Create Falcon
Falcon App


- intoduced
intoduced unified
unified example
example names
names (demo-v1,
(demo-v1, demo-v2)

- added
added `-f`
`-f` (`--full`)
(`--full`) flag
flag which
which is
is necessary
necessary to
to generate
generate example
example app
app with
with `client`
`client` and
and `server`,
`server`, otherwise
otherwise only
only `client`
`client` will
will be
be generated

- improved
improved search
search performance
performance of
of the
the demo-v2
demo-v2 template

- added
added possibility
possibility to
to run
run search
search and
and display
display search
search results
results without
without aggregations


### Falcon
Falcon Data


- fixed
fixed `useThrowError`
`useThrowError` hook
hook so
so it
it works
works correctly
correctly with
with test
test utils


### Falcon
Falcon Logger


- added
added 2nd
2nd parameter
parameter to
to `Logger.getFor()`
`Logger.getFor()` so
so it's
it's possible
possible to
to pass
pass data
data that
that will
will be
be added
added to
to each
each log
log message


## Falcon
Falcon Platform
Platform v2.0.0
v2.0.0 (2020-02-17)


### Falcon
Falcon Client


- changed
changed the
the way
way of
of defining
defining "proxyEndpoints"

- fixed
fixed typos
typos in
in build
build log
log messages

- added
added Apollo
Apollo hooks
hooks support
support (upgrade
(upgrade `apollo-client`
`apollo-client` to
to version
version `2.6.x`)

- improved
improved code
code redistribution
redistribution across
across chunks

- fixed
fixed self
self cached
cached service
service worker
worker (`/sw.js`)

- upgraded
upgraded `react`
`react` to
to version
version `16.10.2`

- improved
improved eslint
eslint configuration

- upgraded
upgraded `css-loader`
`css-loader` to
to version
version `3.2.0`

- fixed
fixed `/graphQL`
`/graphQL` proxy
proxy error
error handling

- fixed
fixed custom
custom error
error `500.html`
`500.html` view
view resolution

- fixed
fixed handling
handling of
of redirects
redirects by
by serviceworker

- fixed
fixed the
the `next`
`next` value
value for
for sign-in
sign-in redirects

- improved
improved a
a way
way of
of processing
processing the
the `svg`
`svg` files


### Falcon
Falcon I18n


- added
added `useI18n`
`useI18n` hook


### Falcon
Falcon UI


- fixed
fixed theme
theme merging

- fixed
fixed duplicated
duplicated conditions
conditions when
when extracting
extracting themed
themed css

- fixed
fixed incompatible
incompatible `css`
`css` prop
prop typings

- added
added `console.error`
`console.error` when
when an
an icon
icon is
is not
not defined
defined in
in the
the theme
theme during
during development

- improved
improved typings

- renamed
renamed `ThemedComponentPropsWithVariants`
`ThemedComponentPropsWithVariants` to
to `ComponentTheme`

- renamed
renamed `ThemedComponentProps`
`ThemedComponentProps` to
to `ThemingProps`

- renamed
renamed `BaseThemedComponentProps`
`BaseThemedComponentProps` to
to `BaseThemingProps`

- added
added `noScrollbars`
`noScrollbars` css
css generation
generation function


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit discontinued


- Breaking
Breaking change:
change: Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit has
has been
been discontinued,
discontinued, instead
instead we
we introduce
introduce [Falcon
[Falcon Front
Front Kit](#falcon-front-kit-v1.0.0),
Kit](#falcon-front-kit-v1.0.0), [Falcon
[Falcon UI
UI Kit](#falcon-ui-kit-v1.0.0),
Kit](#falcon-ui-kit-v1.0.0), [Falcon
[Falcon Data](#falcon-data-v1.0.0),
Data](#falcon-data-v1.0.0), [Falcon
[Falcon Shop
Shop Data](#falcon-shop-data-v1.0.0)
Data](#falcon-shop-data-v1.0.0) and
and [Falcon
[Falcon Blog
Blog Data](#falcon-blog-data-v1.0.0)


### Falcon
Falcon Front
Front Kit


- initial
initial release

- added
added convention
convention for
for validation
validation error
error messages
messages translation

- fixed
fixed synchronization
synchronization of
of account
account and
and sign
sign in
in icon
icon with
with customer
customer logging
logging in
in and
and out
out state

- added
added Apollo
Apollo hooks
hooks support
support (upgrade
(upgrade `apollo-client`
`apollo-client` to
to version
version `2.6.x`)

- improved
improved dynamic
dynamic url
url resolution

- added
added `Add`/`EditAddressFormProvider`
`Add`/`EditAddressFormProvider` components
components to
to handle
handle relevant
relevant form
form data

- added
added `Submit`
`Submit` component
component which
which provides
provides context
context to
to form
form submit
submit components

- fixed
fixed `LocaleSwitcher`
`LocaleSwitcher` which
which did
did not
not take
take into
into account
account `whitelist`ed
`whitelist`ed languages,
languages, and
and `LocaleContext`
`LocaleContext` which
which hardcoded
hardcoded language
language fallback
fallback instead
instead of
of taking
taking it
it from
from `clientConfig`

- extracted
extracted `CurrencyProvider`
`CurrencyProvider` and
and `Currency`
`Currency` components
components from
from `LocaleProvider`
`LocaleProvider` and
and `Locale`,
`Locale`, also
also introduced
introduced `useLocale`
`useLocale` and
and `useCurrency`
`useCurrency` hooks

- updated
updated Formik
Formik to
to version
version 2.0

- added
added `InBrowserOnly`
`InBrowserOnly` component

- added
added `SwitchDynamicURL`
`SwitchDynamicURL` component
component in
in order
order to
to define
define dynamic
dynamic URL
URL routes
routes in
in `react`/`react-router`
`react`/`react-router` `v4`
`v4` way

- added
added `SEO`
`SEO` component
component to
to render
render `title`,
`title`, `description`
`description` and
and `keywords`
`keywords` as
as proper
proper meta-tags

- added
added support
support for
for url
url with
with query
query string
string provided
provided to
to `<ProtectedRoute
`<ProtectedRoute />`
/>` component
component via
via `redirectTo`
`redirectTo` prop


### Falcon
Falcon UI
UI Kit


- initial
initial release

- added
added Apollo
Apollo hooks
hooks support
support (upgrade
(upgrade `apollo-client`
`apollo-client` to
to version
version `2.6.x`)

- fixed
fixed warning
warning when
when `AddressDetails`
`AddressDetails` receives
receives non-unique
non-unique values

- changed
changed `Grid`
`Grid` component
component default
default `gridGap`
`gridGap` to
to `md`

- added
added `AddressFormFields`
`AddressFormFields` and
and `Add`/`EditAddressForm`
`Add`/`EditAddressForm` components
components to
to make
make address
address forms
forms more
more reusable

- fixed
fixed `ProductCard`
`ProductCard` component
component which
which should
should not
not require
require `thumbnail`

- integrated
integrated `FormSubmit`
`FormSubmit` with
with Formik,
Formik, which
which allows
allows it
it to
to hook
hook into
into form
form state

- updated
updated Formik
Formik to
to version
version 2.0

- moved
moved sidebar
sidebar close
close icon
icon from
from `Sidebar`
`Sidebar` to
to `SidebarLayout`

- improved
improved scroll
scroll handling
handling of
of `ProductGallery`


### Falcon
Falcon Data


- initial
initial release

- improved
improved Falcon
Falcon `Query`
`Query` component
component to
to not
not hide
hide Apollo
Apollo `Query`
`Query` component
component render
render props

- added
added Apollo
Apollo hooks
hooks support
support (upgrade
(upgrade `apollo-client`
`apollo-client` to
to version
version `2.6.x`)

- improved
improved way
way of
of handling
handling errors


### Falcon
Falcon Shop
Shop Data


- initial
initial release

- added
added Apollo
Apollo hooks
hooks support
support (upgrade
(upgrade `apollo-client`
`apollo-client` to
to version
version `2.6.x`)

- fixed
fixed response
response types
types of
of `AddressQuery`
`AddressQuery` and
and `CountryListQuery`

- set
set `ssr:
`ssr: false`
false` for
for `CartQuery`
`CartQuery` by
by default


### Falcon
Falcon Blog
Blog Data


- initial
initial release

- added
added Apollo
Apollo hooks
hooks support
support (upgrade
(upgrade `apollo-client`
`apollo-client` to
to version
version `2.6.x`)


### Falcon
Falcon Shop
Shop Extension


- introduced
introduced Country
Country and
and Region
Region types
types to
to allow
allow fetching
fetching more
more details
details with
with address
address queries

- added
added `@cache`
`@cache` for
for `Query.productList`
`Query.productList` query

- added
added `Product.categories`
`Product.categories` and
and `Category.{urlPath,image,attributes,seo}`
`Category.{urlPath,image,attributes,seo}` fields

- introduced
introduced `Coupon`
`Coupon` type
type to
to be
be used
used throughout
throughout the
the Extension


### Falcon
Falcon Server


- Falcon-Server
Falcon-Server has
has been
been fully
fully migrated
migrated to
to [TypeScript](https://github.com/microsoft/TypeScript/)
[TypeScript](https://github.com/microsoft/TypeScript/) 🎉

- Changed
Changed the
the flow
flow of
of Extension
Extension Containers,
Containers, whereby
whereby `Extension`
`Extension` base
base class
class has
has been
been removed
removed in
in favor
favor of
of a
a cleaner
cleaner code

- Now
Now every
every `schema.graphql`
`schema.graphql` file
file needs
needs to
to be
be placed
placed in
in the
the root
root of
of the
the package

- Custom
Custom `Extenstion`
`Extenstion` can
can deliver
deliver its
its own
own `schemaDirectives`
`schemaDirectives` now
now which
which will
will be
be properly
properly merged
merged into
into the
the main
main Schema

- Improved
Improved BackendConfig
BackendConfig fetching
fetching technique
technique (asynchronously
(asynchronously in
in parallel)

- improved
improved Cache
Cache calls
calls by
by tracking
tracking simultaneous
simultaneous requests
requests with
with the
the same
same cache-key

- introduced
introduced `@cacheId`
`@cacheId` directive
directive to
to assist
assist to
to `@cache`
`@cache` for
for generating
generating cache
cache tags

- fixed
fixed falsy
falsy value
value check
check when
when extracting
extracting a
a value
value by
by `fieldName`
`fieldName` from
from the
the provided
provided `sourceValue`

- fixed
fixed priority
priority for
for `ApiDataSource.getExtraResolvers`
`ApiDataSource.getExtraResolvers` values

- `graphqlUtils`
`graphqlUtils` methods
methods moved
moved to
to `falcon-server-env`
`falcon-server-env` package

- simplified
simplified schema
schema stitching
stitching call
call on
on Falcon-Server

- fixed
fixed `cache`
`cache` exposing
exposing `EndpointContainer`

- exposed
exposed `dataSource`
`dataSource` map
map for
for route
route context
context via
via `ctx.dataSources`

- changed
changed the
the convention
convention for
for exporting
exporting the
the Extension
Extension module
module with
with `Extension`
`Extension` name


### Falcon
Falcon Server
Server Env


- fixed
fixed HttpCache
HttpCache deserialization

- added
added TTL
TTL option
option for
for cache
cache tags

- added
added optional
optional `ApiDataSource.getExtraResolvers`
`ApiDataSource.getExtraResolvers` static
static method
method to
to define
define extra
extra resolvers

- added
added re-export
re-export of
of all
all internally
internally used
used components
components and
and helper
helper utils

- fixed
fixed the
the issue
issue with
with the
the Cache
Cache queue
queue and
and its
its error
error handling


### Falcon
Falcon Logger


- improved
improved error
error handling
handling for
for `logger-pretty`
`logger-pretty` when
when working
working with
with incompatible
incompatible log
log messages


### Falcon
Falcon Magento2
Magento2 API


- added
added basic
basic filtration
filtration into
into `productList`
`productList` query
query resolver

- fixed
fixed `lastOrder`
`lastOrder` resolver

- improved
improved dynamic
dynamic url
url resolution

- changed
changed return
return type
type of
of `PlaceOrder`
`PlaceOrder` mutation
mutation to
to `Order
`Order |
| PlaceOrder3dSecureResult`
PlaceOrder3dSecureResult` type

- configured
configured TypeScript


### Falcon
Falcon Scripts


- added
added regeneration
regeneration of
of Type
Type Script
Script definition
definition `d.ts`
`d.ts` files
files for
for `watch`
`watch` script

- fixed
fixed command
command error
error messages
messages printing
printing after
after its
its done

- pinned
pinned Node
Node version
version when
when compiling
compiling packages
packages to
to support
support Node
Node 8


### ESLint
ESLint Config
Config Falcon


- upgraded
upgraded dependencies
dependencies and
and fixed
fixed errors


### Create
Create Falcon
Falcon App


- fixed
fixed yarn
yarn check
check which
which was
was creating
creating an
an empty
empty "yarn.lock"
"yarn.lock" file

- fixed
fixed dependencies
dependencies in
in generated
generated client

- added
added placeholder
placeholder for
for `build:prod`
`build:prod` step
step in
in generated
generated server
server code


## Falcon
Falcon v1.3
v1.3 (2019-08-01)


- required
required changes
changes were
were made
made to
to make
make Falcon
Falcon compatible
compatible with
with Node
Node v12

- updated
updated all
all dependencies
dependencies to
to fix
fix lodash
lodash security
security issues

- added
added translations
translations to
to checkout
checkout process


### Falcon
Falcon Server
Server v0.4.0
v0.4.0 (2019-08-01)


- added
added support
support of
of ComponentContainer

- added
added auto-installing
auto-installing of
of Subscription
Subscription handlers

- improved
improved the
the way
way of
of extracting
extracting root
root fields
fields for
for partial
partial extension
extension schemas

- fixed
fixed the
the usage
usage of
of CacheProvider
CacheProvider when
when working
working with
with non-scalar
non-scalar values


### Falcon
Falcon Client
Client v0.5.3
v0.5.3 (2019-08-01)


- fixed
fixed issues
issues with
with tests
tests setup


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.5.3
v0.5.3 (2019-08-01)


- fixed
fixed issues
issues with
with product
product count
count in
in MiniCart


## Falcon
Falcon v1.2
v1.2 (2019-06-26)


### Falcon
Falcon Client
Client v0.5.0
v0.5.0 (2019-06-26)


- changed
changed Service
Service Worker
Worker pre-cache
pre-cache strategy
strategy to
to cache
cache all
all static
static content
content and
and skip
skip requesting
requesting Falcon
Falcon Client
Client `SSR`
`SSR` until
until the
the next
next Service
Service Worker
Worker release

- upgraded
upgraded Workbox
Workbox to
to the
the latest
latest 4.3.1
4.3.1 version

- add
add build
build for
for Service
Service Worker
Worker `sw.js`
`sw.js` file

- added
added source-map
source-map support
support for
for all
all modes

- improvement:
improvement: made
made eslint
eslint optional


### Falcon
Falcon Service
Service Worker
Worker v0.0.1
v0.0.1 (2019-06-26)


- initial
initial release


### Falcon
Falcon Logger
Logger v1.0
v1.0 (2019-06-26)


- changed
changed Logger
Logger provider
provider to
to [Pino](http://getpino.io/)

- added
added `setApp`,
`setApp`, `getFor`
`getFor` and
and `traceTime`
`traceTime` API
API methods


### Falcon
Falcon Server
Server v0.3.0
v0.3.0 (2019-06-26)


- added
added source-map
source-map support
support for
for all
all modes




## Falcon
Falcon v1.1
v1.1 (2019-05-29)


### Falcon
Falcon Client
Client v0.4.2
v0.4.2 (2019-05-29)


- fixed
fixed issue
issue with
with lack
lack of
of third-party
third-party packages
packages source-maps

- added
added possibility
possibility to
to customize
customize Service
Service Worker


### Falcon
Falcon Server
Server v0.2.2
v0.2.2 (2019-05-29)


- added
added ability
ability to
to cache
cache GQL
GQL resolvers
resolvers by
by tags

- added
added ability
ability to
to flush
flush the
the cache
cache via
via GQL
GQL directive

- improved
improved logging
logging for
for falcon-server
falcon-server extensions
extensions initialization


### Falcon
Falcon Scripts
Scripts v0.0.1
v0.0.1 (2019-05-29)


- initial
initial release


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.5.0
v0.5.0 (2019-05-29)


- feat:
feat: (Breaking
(Breaking change)
change) corrected
corrected names
names for
for collections
collections `[noun]sList`
`[noun]sList` -->
--> `[noun]List`


### Falcon
Falcon Magento2
Magento2 API
API v0.6.0
v0.6.0 (2019-05-29)


- fixed
fixed issue
issue with
with incomplete
incomplete product
product price
price data
data which
which led
led to
to incorrect
incorrect rendering
rendering of
of products

- added
added oAuth
oAuth authorization
authorization type
type for
for integration
integration requests




## Falcon
Falcon v1.0


### Falcon
Falcon Magento2
Magento2 API
API v0.5.0
v0.5.0 (2019-04-11)


- fixed
fixed issue
issue with
with merging
merging guest's
guest's with
with customer's
customer's carts

- fixed
fixed issue
issue with
with 0
0 price
price for
for the
the first
first product
product added
added to
to cart
cart by
by authorized
authorized user


### Falcon-Server
Falcon-Server v0.2.1
v0.2.1 (2019-04-11)


- introduced
introduced `@cache`
`@cache` GraphQL
GraphQL directive
directive to
to cache
cache resolver
resolver results

- `url`
`url` resolver
resolver is
is cached
cached now


### Falcon
Falcon Shop
Shop Extension
Extension v0.4.1
v0.4.1 (2019-04-11)


- `menu`,
`menu`, `Category`,
`Category`, `Category.products`,
`Category.products`, `Product`
`Product` and
and `Product.breadcrumbs`
`Product.breadcrumbs` resolvers
resolvers are
are cached
cached now


### Falcon
Falcon Client
Client v0.4.1
v0.4.1 (2019-04-11)


- fixed
fixed absolute
absolute path
path to
to output
output directory
directory embedded
embedded in
in bundle


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.4.1
v0.4.1 (2019-04-11)


- added
added basic
basic component
component set
set (queries,
(queries, mutations
mutations and
and ui)
ui) to
to build
build filters

- fix
fix for
for not
not reloaded
reloaded Product
Product Thumbnails
Thumbnails on
on ProductList

- added
added message
message placeholder
placeholder for
for empty
empty Product
Product List




## Falcon
Falcon v1.0
v1.0 RC3
RC3 (2019-04-02)


### Falcon
Falcon Client
Client v0.4.0
v0.4.0 (2019-04-02)


- changed
changed GraphQL
GraphQL Proxy
Proxy config
config in
in favor
favor of
of passing
passing GraphQL
GraphQL URL
URL explicitly

- changed
changed the
the way
way of
of configuring
configuring PORT
PORT for
for `falcon-client`
`falcon-client` and
and `webpackDevServer`

- fixed
fixed vulnerability
vulnerability of
of `razzle-dev-utils`
`razzle-dev-utils` >
> `react-dev-utils`
`react-dev-utils` dependency

- fixed
fixed issue
issue where
where appHtmlMiddleware
appHtmlMiddleware does
does not
not pass
pass GoogleTagManager
GoogleTagManager information
information to
to falcon-client/src/components/Html.js
falcon-client/src/components/Html.js (even
(even though
though the
the config
config is
is correct).

- added
added `bootstrap/configureServer`
`bootstrap/configureServer` script
script to
to proxy
proxy requests
requests from
from Falcon-Client
Falcon-Client to
to Falcon-Server

- added
added root
root client
client `Query.getConfig`
`Query.getConfig` resolver
resolver (`getConfig
(`getConfig (key:
(key: "...")
"...") @client`)
@client`) to
to extract
extract config
config value
value for
for the
the specified
specified key


### Falcon
Falcon UI
UI v0.2.0
v0.2.0 (2019-04-02)


- exposed
exposed `withTheme()`
`withTheme()` so
so theme
theme values
values can
can be
be accessed
accessed from
from not
not themed
themed components


### Falcon
Falcon Server
Server v0.2.0
v0.2.0 (2019-04-02)


- introduced
introduced `onRouterCreated`
`onRouterCreated` and
and `onRouterInitialized`
`onRouterInitialized` bootstrap
bootstrap events

- introduced
introduced scalar
scalar `JSON`
`JSON` GraphQL
GraphQL type
type available
available for
for any
any extension

- exposes
exposes `/endpoints`
`/endpoints` endpoint
endpoint to
to get
get a
a list
list of
of entries
entries to
to be
be proxies
proxies to
to the
the external
external backend
backend (service)


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.4.0
v0.4.0 (2019-04-02)


- `CheckoutMutation`
`CheckoutMutation` now
now handles
handles "union"
"union" result
result types
types from
from Falcon-Server


### Falcon
Falcon Shop
Shop Extension
Extension v0.4.0
v0.4.0 (2019-04-02)


- `Cart.quoteCurrency`
`Cart.quoteCurrency` is
is now
now deprecated

- `PaymentMethodInput`
`PaymentMethodInput` GraphQL
GraphQL input
input now
now accepts
accepts `additionalData`
`additionalData` object

- `Mutation.placeOrder`
`Mutation.placeOrder` can
can now
now return
return 2
2 result
result types
types -
- `PlaceOrderSuccessfulResult`
`PlaceOrderSuccessfulResult` and
and `PlaceOrder3dSecureResult`


### Falcon
Falcon Magento2
Magento2 API
API v0.4.0
v0.4.0 (2019-04-02)


- added
added Adyen
Adyen (credit
(credit card)
card) and
and PayPal
PayPal Payment
Payment Gateways
Gateways support

- updated
updated urls
urls of
of Magento
Magento REST
REST endpoints


### Falcon
Falcon Payment
Payment Plugin
Plugin v0.0.1


- initial
initial release


### Falcon
Falcon Adyen
Adyen Plugin
Plugin v0.0.1


- initial
initial release


### Falcon
Falcon PayPal
PayPal Plugin
Plugin v0.0.1


- initial
initial release




## Falcon
Falcon v1.0
v1.0 RC2
RC2 (2019-03-13)


### Falcon
Falcon Client
Client v0.3.1
v0.3.1 (2019-03-13)


- added
added `.browserslistrc`
`.browserslistrc` support
support for
for javascript,
javascript, fixed
fixed #293

- added
added support
support for
for normal
normal module
module replacement

- HTML5
HTML5 autocomplete
autocomplete on
on checkout
checkout address
address form

- introduced
introduced `graphqlProxy`
`graphqlProxy` config
config flag
flag to
to control
control GraphQL
GraphQL proxy
proxy via
via Falcon-Client
Falcon-Client route

- added
added possibility
possibility to
to override
override any
any component
component with
with custom
custom implementation

- updated
updated `ApolloClient`
`ApolloClient` to
to the
the latest
latest version
version with
with built-in
built-in local
local state
state management

- fixed
fixed issues
issues with
with handling
handling cookies
cookies when
when Falcon
Falcon Server
Server runs
runs under
under a
a different
different domain
domain than
than Falcon
Falcon Client

- fixed
fixed issues
issues with
with address
address autocompletion
autocompletion on
on checkout
checkout page

- fixed
fixed configuration
configuration of
of loadable
loadable components


### Normal
Normal Module
Module Override
Override Webpack
Webpack Plugin
Plugin v0.0.1
v0.0.1 (2019-03-13)


- feat:
feat: first
first version
version of
of Normal
Normal Module
Module Override
Override Webpack
Webpack Plugin


### Falcon
Falcon Magento2
Magento2 API
API v0.3.1
v0.3.1 (2019-03-13)


- fixed
fixed problems
problems with
with fetching
fetching store
store configurations
configurations for
for logged
logged in
in users
users when
when Falcon
Falcon Server
Server is
is restarted




## Falcon
Falcon v1.0
v1.0 RC
RC (2019-02-14)


### Falcon
Falcon Shop
Shop Extension
Extension v0.3.0
v0.3.0 (2019-02-14)


- updated
updated schema
schema to
to handle
handle filters
filters correctly


### Falcon
Falcon Magento2
Magento2 API
API v0.3.0
v0.3.0 (2019-02-14)


- added
added filters
filters implementation

- updated
updated endpoint
endpoint for
for placing
placing order
order so
so it's
it's compatible
compatible with
with falcon-magento2-module
falcon-magento2-module v3.0.0

- added
added fetching
fetching of
of dynamic
dynamic menu


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.3.0
v0.3.0 (2019-02-14)


- added
added `SearchProvider`
`SearchProvider` with
with `SearchContext`
`SearchContext` that
that handles
handles basic
basic filtering

- added
added handling
handling of
of dynamic
dynamic menu

- updated
updated `ApolloClient`
`ApolloClient` to
to the
the newest
newest version
version (v2.5.1)


### Falcon
Falcon Client
Client v0.3.0
v0.3.0 (2019-02-14)


- fixed
fixed offline
offline mode


### Falcon
Falcon Server
Server v0.3.0
v0.3.0 (2019-02-14)


- fixed
fixed missing
missing dependencies
dependencies (`core-js`)
(`core-js`) issue




## Falcon
Falcon v0.3
v0.3 (2019-01-18)


### Falcon
Falcon Client
Client v0.2.0
v0.2.0 (2019-01-18)


- improvement:
improvement: React
React 16.6
16.6 support

- added
added support
support for
for scss
scss with
with css
css modules


### Falcon
Falcon Server
Server v0.1.1
v0.1.1 (2019-01-18)


- refactor:
refactor: `Events`
`Events` enum
enum has
has been
been moved
moved from
from `falcon-server`
`falcon-server` to
to `falcon-server-env`
`falcon-server-env` package


### Falcon
Falcon Magento2
Magento2 API
API v0.2.0
v0.2.0 (2019-01-18)


- changed
changed url
url resolver
resolver to
to use
use new
new format
format of
of data
data sent
sent by
by `/url`
`/url` endpoint

- added
added support
support for
for fetching
fetching breadcrumbs
breadcrumbs from
from new
new endpoint

- added
added support
support for
for product
product list
list sorting

- modified
modified fetching
fetching of
of category
category products
products -
- now
now it
it uses
uses `/categories/{id}/products`
`/categories/{id}/products` endpoint

- added
added aggregations
aggregations parsing
parsing for
for ProductList


### Falcon
Falcon UI
UI v0.2.0
v0.2.0 (2019-01-18)


- feat:
feat: added
added `Menu`
`Menu` component


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.2.0
v0.2.0 (2019-01-18)


- feat:
feat: added
added queries
queries and
and mutations
mutations for:

- getting
getting all
all orders
orders and
and by
by id

- addresses
addresses operations
operations (add
(add new
new address,
address, remove
remove address,
address, change
change address)

- editing
editing customer
customer information
information and
and changing
changing password

- feat:
feat: added
added `CheckboxFormField`

- improvement:
improvement: extracted
extracted `Field`
`Field` component
component in
in order
order to
to improve
improve support
support for
for custom
custom `FormField`'s
`FormField`'s component

- added
added `SortOrderProvider`
`SortOrderProvider` which
which handles
handles fetching
fetching and
and setting
setting sort
sort options
options for
for product
product lists


### Falcon
Falcon Shop
Shop Extension
Extension v0.2.0
v0.2.0 (2019-01-18)


- feat:
feat: introduced
introduced resolver
resolver `addresses:
`addresses: AddressList`
AddressList` in
in order
order to
to retrieve
retrieve all
all customer
customer addresses,
addresses, added
added types
types `EditAddressInput`,
`EditAddressInput`, `AddAddressInput`




## Falcon
Falcon v0.2
v0.2 (2018-12-12)


### Falcon
Falcon Client
Client v0.1.0
v0.1.0 (2018-12-12)


- feat:
feat: support
support for
for Google
Google Analytics
Analytics added

- improvement:
improvement: removed
removed razzle

- feat:
feat: added
added translations
translations for
for common
common app
app areas
areas (except
(except checkout)


### Falcon
Falcon Server
Server v0.1.0
v0.1.0 (2018-12-12)


- feat:
feat: Basic
Basic Cache
Cache implementation
implementation was
was introduced

- feat:
feat: (Breaking
(Breaking change)
change) changed
changed Event
Event flow
flow for
for ApiContainer
ApiContainer and
and its
its entries
entries -
- every
every ApiDataSource
ApiDataSource instance
instance is
is being

created on
on GQL
GQL request

- feat:
feat: added
added `backendConfig`
`backendConfig` Query
Query type

- feat:
feat: `type
`type BackendConfig`,
BackendConfig`, `enum
`enum SortOrderDirection`,
SortOrderDirection`, `input
`input SortOrderInput`
SortOrderInput` were
were introduced
introduced in
in the
the base
base Schema

- fix:
fix: added
added separate
separate `endpoints`
`endpoints` config
config section
section and
and dedicated
dedicated base
base class

- refactor:
refactor: `Events`
`Events` enum
enum has
has been
been moved
moved from
from `falcon-server`
`falcon-server` to
to `falcon-server-env`
`falcon-server-env` package


### Falcon
Falcon UI
UI v0.1.0
v0.1.0 (2018-12-12)


- docs:
docs: comprehensive
comprehensive documentation
documentation added

- feat:
feat: support
support for
for keyframe
keyframe animations
animations defined
defined in
in theme


### Falcon
Falcon Theme
Theme Editor
Editor v0.1.0
v0.1.0 (2018-12-12)


- feat:
feat: inspect
inspect mode,
mode, more
more props,
props, improved
improved performance,
performance, layout
layout tweaks


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.1.0
v0.1.0 (2018-12-12)


- feat:
feat: basic
basic blog
blog UI
UI (listing
(listing posts,
posts, displaying
displaying single
single post)

- feat:
feat: added
added queries
queries and
and mutations
mutations for
for cart
cart operations
operations (add
(add to
to cart,
cart, remove
remove from
from cart,
cart, change
change cart
cart item)

- feat:
feat: added
added queries
queries and
and mutations
mutations for
for sign
sign in
in /
/ sign
sign out
out operations

- feat:
feat: added
added `ProtectedRoute`
`ProtectedRoute` and
and `OnlyUnauthenticatedRoute`
`OnlyUnauthenticatedRoute` route
route components

- feat:
feat: added
added queries
queries and
and mutations
mutations for
for checkout
checkout process
process and
and implemented
implemented checkout
checkout logic
logic abstraction

- feat:
feat: added
added `Form`
`Form` component
component which
which provides
provides translation
translation context
context for
for `FormField`s


### Create
Create Falcon
Falcon App
App v1.1.1
v1.1.1 (2018-12-12)


- feat:
feat: allow
allow ejecting
ejecting `falcon-ecommerce-uikit`
`falcon-ecommerce-uikit` package
package via
via `eject`
`eject` command


### Create
Create Falcon
Falcon App
App v1.0.7
v1.0.7 (2018-10-25)


- docs:
docs: updated
updated documentation

- fix:
fix: fixed
fixed problem
problem with
with React
React 16.6.0


### Falcon
Falcon Server
Server Env
Env v0.1.0
v0.1.0 (2018-12-12)


- feat:
feat: Provided
Provided `Cache`
`Cache` wrapper
wrapper class
class and
and built-in
built-in `InMemoryLRUCache`
`InMemoryLRUCache` cache
cache provider

- feat:
feat: added
added getter
getter and
and setter
setter methods
methods to
to work
work with
with "named"
"named" session
session object
object from
from the
the context
context in
in ApiDataSource

- feat:
feat: `ApiDataSource`
`ApiDataSource` and
and `Extension`
`Extension` models
models are
are now
now accept
accept `eventEmitter`
`eventEmitter` instance

- feat:
feat: Provided
Provided `EndpointManager`
`EndpointManager` base
base class

- feat:
feat: Base
Base `Extension`
`Extension` class
class provides
provides auto-binding
auto-binding for
for its
its own
own GraphQL
GraphQL Schema
Schema to
to the
the assigned
assigned ApiDataSource
ApiDataSource instance

(via `getGraphQLConfig()`
`getGraphQLConfig()` method)


### Falcon
Falcon Magento2
Magento2 API
API v0.1.0
v0.1.0 (2018-12-12)


- feat:
feat: Magento
Magento Admin
Admin token
token is
is now
now being
being stored
stored in
in cache


### eject-ts
eject-ts v0.1.0
v0.1.0 (2018-12-12)


- feat:
feat: eject-ts
eject-ts CLI


### Falcon-i18n
Falcon-i18n v0.0.4


- feat:
feat: added
added `i18nProvider`
`i18nProvider` with
with `I18n`
`I18n` and
and `T`
`T` components
components to
to ease
ease internationalization
internationalization support




## Falcon
Falcon v0.1
v0.1 (2018-10-05)


### Falcon
Falcon Client
Client v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: development
development and
and build
build process
process using
using razzle
razzle (https://github.com/jaredpalmer/razzle)

- feat:
feat: built
built in
in SSR

- feat:
feat: built
built in
in i18n

- feat:
feat: connection
connection with
with Falcon
Falcon Server
Server via
via [Apollo
[Apollo Client](https://www.apollographql.com/docs/react/)

- feat:
feat: state
state management
management via
via [Apollo
[Apollo Link
Link State](https://www.apollographql.com/docs/link/links/state.html)


### Falcon
Falcon Server
Server v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: extensions
extensions system
system with
with built-in
built-in schema
schema stitching

- feat:
feat: all
all the
the communication
communication based
based on
on GraphQL
GraphQL (using
(using [Apollo
[Apollo Server](https://www.apollographql.com/docs/apollo-server/))


### Falcon
Falcon UI
UI v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: basic
basic set
set of
of components
components with
with theming
theming capabilities

- feat:
feat: first
first version
version of
of theme
theme editor
editor as
as React
React component


### Falcon
Falcon E-commerce
E-commerce UI
UI Kit
Kit v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: product
product list
list view

- feat:
feat: product
product page
page view

- feat:
feat: mini
mini cart
cart view
view on
on sidebar


### Create
Create Falcon
Falcon App
App v1.0.0
v1.0.0 (2018-10-05)


- feat:
feat: creating
creating Falcon
Falcon project
project from
from predefined
predefined template


### Falcon
Falcon Shop
Shop Extension
Extension v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: first
first version
version of
of schema
schema for
for shop
shop features


### Falcon
Falcon Magento2
Magento2 Api
Api v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: resolvers
resolvers for
for Falcon
Falcon Shop
Shop Extension
Extension used
used for
for communication
communication with
with Magento2
Magento2 shop


### Falcon
Falcon Blog
Blog Extension
Extension v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: first
first version
version of
of schema
schema for
for blog
blog features


### Falcon
Falcon WordPress
WordPress Api
Api v0.0.1
v0.0.1 (2018-10-05)


- feat:
feat: resolvers
resolvers for
for Falcon
Falcon Blog
Blog Extension
Extension used
used for
for communication
communication with
with WordPress
WordPress backend


id: 2-6-5

title: Release
Release Notes
Notes -
- 2.6.5

sidebar_label: '2.6.5'

description: Falcon
Falcon platform
platform v2.6.5
v2.6.5 release
release notes



###### Release
Release Date
Date (2021-02-25)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix the
the issue
issue where
where the
the cart
cart was
was being
being emptied
emptied on
on server
server side
side rendered
rendered pages
pages loads
loads (`@deity/falcon-bigcommerce-api`).


## Polish
Polish 💅




id: 2-7-4

title: Release
Release Notes
Notes -
- 2.7.4

sidebar_label: '2.7.4'

description: Falcon
Falcon platform
platform v2.7.4
v2.7.4 release
release notes



###### Release
Release Date
Date (2021-03-26)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛


- Return
Return errors
errors from
from Stripe
Stripe so
so they
they can
can be
be used
used in
in the
the client
client app
app (`@deity/falcon-stripe-plugin`).



## Polish
Polish 💅


- Add
Add cache
cache tags
tags to
to blog
blog posts
posts and
and blog
blog pages
pages so
so they
they are
are cached
cached by
by GraphQL
GraphQL (`@deity/falcon-blog-extension`).


id: 2-7-10

title: Release
Release Notes
Notes -
- 2.7.10

sidebar_label: '2.7.10'

description: Falcon
Falcon platform
platform v2.7.10
v2.7.10 release
release notes



###### Release
Release Date
Date (2021-05-11)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀


- Added
Added `DEBUG`
`DEBUG` env
env var
var on
on FS
FS so
so it's
it's possible
possible to
to enable
enable GraphQL
GraphQL Playground


## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅




id: 2-7-0

title: Release
Release Notes
Notes -
- 2.7.0

sidebar_label: '2.7.0'

description: Falcon
Falcon platform
platform v2.7.0
v2.7.0 release
release notes



###### Release
Release Date
Date (2021-03-09)


## Breaking
Breaking Changes
Changes 💥


- Add
Add normalised
normalised order
order status
status mapping
mapping to
to both
both the
the BigCommerce
BigCommerce and
and Magento
Magento 2
2 API
API packages
packages (`@deity/falcon-magento-api`
(`@deity/falcon-magento-api` +
+ `@deity/falcon-bigcommerce-api`)

- Update
Update Mollie
Mollie Plugin
Plugin to
to contain
contain 2
2 core
core components,
components, `MolliePlugin`
`MolliePlugin` and
and `MollieCardPlugin`.
`MollieCardPlugin`. There
There is
is no
no longer
longer a
a default
default export
export for
for `@deity/falcon-mollie-plugin`.


## New
New Features
Features 🚀


- Add
Add support
support for
for native
native Magento
Magento search
search (`@deity/falcon-magento-api`)

- Add
Add search
search components
components to
to demo
demo v1

- Add
Add support
support for
for [redirects](/platform/redirects/overview)

- Add
Add support
support for
for blog
blog 'pages'


## Bug
Bug Fixes
Fixes 🐛


- Fix
Fix cart
cart restoration
restoration for
for failed
failed or
or cancelled
cancelled payments
payments (`@deity/falcon-bigcommerce-api`)

- Fix
Fix issues
issues with
with BigCommerce
BigCommerce orders
orders automatically
automatically being
being archived
archived (`@deity/falcon-bigcommerce-api`)

- Fix
Fix missing
missing ApolloClient
ApolloClient Link
Link (`@deity/falcon-client`)

- Clear
Clear shipping
shipping method
method in
in `CheckoutProvider`
`CheckoutProvider` when
when billing
billing address
address is
is changed
changed to
to line
line up
up with
with the
the session
session data
data (`@deity/front-kit`)

- Add
Add missing
missing Mollie
Mollie ENV
ENV vars
vars into
into demo
demo v1

- Refunds
Refunds now
now only
only send
send totals
totals rather
rather than
than item
item data
data to
to Falcon
Falcon Payments
Payments to
to avoid
avoid issues
issues with
with totals
totals not
not adding
adding up
up when
when discounts
discounts are
are applied.
applied. (`@deity/falcon-magento-api`
(`@deity/falcon-magento-api` +
+ `@deity/falcon-bigcommerce-api`)


## Polish
Polish 💅


- Add
Add a
a sanity
sanity check
check into
into all
all order
order webhooks
webhooks to
to prevent
prevent collisions
collisions when
when multiple
multiple apps
apps are
are using
using the
the same
same BigCommerce
BigCommerce store
store (`@deity/falcon-bigcommerce-api`)

- Pass
Pass proper
proper httpLink
httpLink configuration
configuration to
to `getApolloClientUploadLink()`
`getApolloClientUploadLink()` (`@deity/falcon-client`)


## Upgrade
Upgrade Notes
Notes 📝


- [ENTERPRISE
[ENTERPRISE ONLY]
ONLY] We've
We've noticed
noticed on
on some
some installations
installations an
an error
error caused
caused by
by clashing
clashing `node-fetch`
`node-fetch` versions.
versions. To
To fix
fix this
this run
run `npx
`npx yarn-deduplicate`
yarn-deduplicate` &
& `yarn
`yarn install`
install` in
in the
the `server`
`server` directory.

- [ENTERPRISE
[ENTERPRISE ONLY]
ONLY] the
the lines
lines below
below can
can be
be removed
removed from
from your
your `server/index.js`
`server/index.js` file
file because
because these
these have
have been
been moved
moved into
into our
our `@deity/falcon-server`
`@deity/falcon-server` package.



process.on('unhandledRejection', (reason,
(reason, promise)
promise) =>
=> {

console.log('Unhandled Rejection
Rejection at:
at: Promise',
Promise', promise,
promise, 'reason:',
'reason:', reason);


process.on('uncaughtException', ex
ex =>
=> {

console.log('Uncaught Exception:
Exception: ',
', ex);




id: 2-7-14

title: Release
Release Notes
Notes -
- 2.7.14

sidebar_label: '2.7.14'

description: Falcon
Falcon platform
platform v2.7.14
v2.7.14 release
release notes



###### Release
Release Date
Date (2021-07-14)


## Breaking
Breaking Changes
Changes 💥


- Migrate
Migrate to
to `@apollo/client`
`@apollo/client` (away
(away from
from `@apollo/react`,
`@apollo/react`, `graphql-tag`).
`graphql-tag`). See
See [upgrade
[upgrade notes](#upgrade-notes-)


## New
New Features
Features 🚀


- GeoIP
GeoIP information.
information. [See
[See Docs](/platform/geoip/overview)


## Bug
Bug Fixes
Fixes 🐛


- Return
Return author
author data
data that
that matches
matches the
the author
author type
type declared
declared in
in the
the blog
blog extension.


## Polish
Polish 💅


- Cache
Cache author
author data
data for
for blog
blog posts
posts for
for improved
improved performance.


## Upgrade
Upgrade Notes
Notes 📝


The following
following imports
imports of
of changed
changed in
in favour
favour of
of using
using `@apollo/client`.
`@apollo/client`. You'll
You'll need
need to
to update
update their
their import
import to
to reflect
reflect this:


- `gql`
`gql` ->
-> `import
`import {
{ gql
gql }
} from
from '@apollo/client';`

- `useApolloClient`
`useApolloClient` ->
-> `import
`import {
{ useApolloClient
useApolloClient }
} from
from '@apollo/client';`

- `MockedProvider`
`MockedProvider` ->
-> `import
`import {
{ MockedProvider
MockedProvider }
} from
from '@apollo/client/testing';`

- `NetworkStatus`
`NetworkStatus` ->
-> `import
`import {
{ NetworkStatus
NetworkStatus }
} from
from '@apollo/client';`

- `useMutation`
`useMutation` ->
-> `import
`import {
{ useMutation
useMutation }
} from
from '@apollo/client';`

- `ApolloProvider`
`ApolloProvider` ->
-> `import
`import {
{ ApolloProvider
ApolloProvider }
} from
from '@apollo/client/react';`

- `withApollo`
`withApollo` ->
-> `import
`import {
{ withApollo
withApollo }
} from
from '@apollo/client/react/hoc';`


id: 2-4-8

title: Release
Release Notes
Notes -
- 2.4.8

sidebar_label: '2.4.8'

description: Falcon
Falcon platform
platform v2.4.8
v2.4.8 release
release notes



###### Release
Release Date
Date (2020-09-14)


## Breaking
Breaking Changes
Changes 💥




## New
New Features
Features 🚀




## Bug
Bug Fixes
Fixes 🐛




## Polish
Polish 💅


- Update
Update theme
theme Presets
Presets (Demo
(Demo v2)


id: changelog

title: Latest
Latest Changes

sidebar_label: Changelog

description: Deity
Deity platform
platform the
the latest
latest changes.



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem,
TabItem, ChangelogItem
ChangelogItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';


# Deity
Deity Composer


<p className="desc">Learn
className="desc">Learn about
about the
the latest
latest and
and previous
previous releases
releases of
of Deity
Deity Composer.</p>


<div className="hr"
className="hr" />

<div className="date">November
className="date">November 20th,
20th, 2022</div>


## Deity
Deity Composer
Composer v2.41
v2.41 <Badge
<Badge variant="green">Stable</Badge>


<TabsContainer packageName="@deity/deity-composer">





{ label:
label: 'Updates',
'Updates', value:
value: 'updates'
'updates' },

{ label:
label: 'Packages',
'Packages', value:
value: 'packages'
'packages' }



<TabItem value="updates">

<ChangelogItem variant="breaking">Fixed
variant="breaking">Fixed several
several critical
critical bugs
bugs that
that caused
caused the
the app
app to
to crash</ChangelogItem>

<ChangelogItem variant="hotfix">Improved
variant="hotfix">Improved security
security by
by implementing
implementing two-factor
two-factor authentication</ChangelogItem>



description="Non facere
facere doloremque
doloremque est
est laudantium
laudantium Quis
Quis Ut
Ut illo
illo ut
ut consequatur
consequatur iste
iste et
et dolor
dolor nesciunt
nesciunt et
et perspiciatis
perspiciatis aperiam
aperiam sit
sit explicabo
explicabo vitae!
vitae! Complete
Complete overhaul
overhaul of
of the
the app's
app's design
design and
and user
user experience

Added new
new feature
feature Z,
Z, which
which allows
allows users
users to
to do
do XYZ

Improved security
security by
by implementing
implementing two-factor
two-factor authentication

Fixed several
several critical
critical bugs
bugs that
that caused
caused the
the app
app to
to crash"


Updated user
user interface
interface for
for a
a more
more modern
modern look


<ChangelogItem variant="feature"
variant="feature" description="Non
description="Non facere
facere doloremque
doloremque est
est laudantium
laudantium Quis
Quis Ut
Ut illo
illo ut
ut consequatur">

Added ability
ability to
to customize
customize the
the app's
app's interface


<ChangelogItem variant="improvement">Improved
variant="improvement">Improved performance
performance and
and reduced
reduced loading
loading times</ChangelogItem>

<ChangelogItem variant="improvement">Improved
variant="improvement">Improved performance
performance of
of feature
feature Y</ChangelogItem>

<ChangelogItem variant="bugfix">Added
variant="bugfix">Added a
a method
method for
for getting
getting the
the current
current branch.</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed bug
bug that
that caused
caused login
login issues
issues for
for some
some users</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed several
several minor
minor bugs
bugs and
and improved
improved overall
overall stability
stability of
of the
the app</ChangelogItem>

<ChangelogItem variant="deprecated">changed
variant="deprecated">changed the
the version
version number</ChangelogItem>


<TabItem value="packages">

<CodeBlock language="json">

{`"devDependencies": {

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"






<hr />

<div className="date">November
className="date">November 19th,
19th, 2021</div>


## Deity
Deity Composer
Composer v2.40
v2.40 <Badge
<Badge variant="green">Stable</Badge>


<p className="desc">

This release
release brings
brings all
all kinds
kinds of
of exciting
exciting new
new features,
features, quality
quality of
of life
life and
and performance
performance improvements
improvements plus
plus a
a lot
lot of

bugfixes. Read
Read our
our blog
blog for
for a
a more
more detailed
detailed rundown.



<TabsContainer packageName="@deity/deity-composer">





{ label:
label: 'Updates',
'Updates', value:
value: 'updates'
'updates' },

{ label:
label: 'Packages',
'Packages', value:
value: 'packages'
'packages' }



<TabItem value="updates">

<ChangelogItem variant="bugfix">Added
variant="bugfix">Added a
a method
method for
for getting
getting the
the current
current branch.</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed bug
bug that
that caused
caused login
login issues
issues for
for some
some users</ChangelogItem>

<ChangelogItem variant="bugfix">Fixed
variant="bugfix">Fixed several
several minor
minor bugs
bugs and
and improved
improved overall
overall stability
stability of
of the
the app</ChangelogItem>

<ChangelogItem variant="deprecated">changed
variant="deprecated">changed the
the version
version number</ChangelogItem>


<TabItem value="packages">

<CodeBlock language="json">

{`"devDependencies": {

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"

"@deity/falcon-mollie-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-payment-plugin": "3.0.0-beta.4",
"3.0.0-beta.4", //
// up
up from
from "3.0.0-beta.3"

"@deity/falcon-paypal-plugin": "3.0.0-beta.7",
"3.0.0-beta.7", //
// up
up from
from "3.0.0-beta.6"








id: create

title: 4.
4. Creating
Creating your
your application

sidebar_label: 4.
4. Creating
Creating your
your application

description: Create
Create your
your Falcon
Falcon App
App using
using our
our simple
simple CLI
CLI tool.



## Our
Our examples


import Examples
Examples from
from './../../../../src/components/Examples';


<Examples />


## Create
Create Falcon
Falcon App


To generate
generate a
a new
new application
application based
based on
on Falcon
Falcon Platform
Platform you
you can
can use
use our
our CLI
CLI tool,
tool, **create
**create falcon
falcon app**.


:::note Using
Using the
the new
new theme?

By default
default the
the demo
demo based
based on
on "demo-v2"
"demo-v2" assumes
assumes it's
it's connected
connected to
to a
a **BigCommerce**
**BigCommerce** instance,
instance, which
which uses
uses **Algolia**
**Algolia** and
and **Stripe**.
**Stripe**. Without
Without these
these credentials
credentials the
the application
application will
will not
not start
start (you'll
(you'll see
see the
the errors
errors in
in the
the console).
console). The
The old
old theme
theme will,
will, by
by default,
default, be
be connected
connected to
to our
our demo
demo **Magento
**Magento 2**
2** and
and **Wordpress**
**Wordpress** instances.



import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">{`npx
language="bash">{`npx @deity/create-falcon-app
@deity/create-falcon-app <project-name>`}</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">{`yarn
language="bash">{`yarn create
create @deity/falcon-app
@deity/falcon-app <project-name>`}</CodeBlock>





This will
will generate
generate a
a Falcon
Falcon site
site into
into a
a directory
directory with
with the
the name
name of
of your
your projects
projects (`<project-name>`).


**Regular Project**




|- client



**Enterprise /
/ Full
Full Project**




|- client

|- server



### Options


- **`--example
**`--example <name-of-example>`**
<name-of-example>`** The
The example
example flag
flag is
is used
used to
to define
define which
which example
example we
we want
want to
to start
start with.
with. The
The options
options are
are `demo-v1`(default)
`demo-v1`(default) and
and `demo-v2`.

`demo-v1` by
by default
default connects
connects to
to a
a demo
demo **Magento
**Magento 2**
2** and
and **Wordpress**
**Wordpress** instance.
instance. To
To use
use the
the <a
<a href="https://demo.deity.io"
href="https://demo.deity.io" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">latest
noopener">latest demo</a>
demo</a> use
use `demo-v2`.
`demo-v2`. This
This requires
requires you
you to
to have
have your
your own
own **BigCommerce**,
**BigCommerce**, **Algolia**
**Algolia** and
and **Stripe**
**Stripe** accounts.



npx @deity/create-falcon-app
@deity/create-falcon-app --example
--example demo-v2
demo-v2 <project-name>



- **`--full`**
**`--full`** To
To generate
generate **Falcon
**Falcon Server**
Server** use
use the
the `--full`
`--full` flag.
flag. You
You will
will only
only be
be able
able to
to deploy
deploy Falcon
Falcon Server
Server changes
changes if
if you're
you're on
on an
an Enterprise
Enterprise plan.



npx @deity/create-falcon-app
@deity/create-falcon-app --full
--full <project-name>



## Configuring
Configuring Falcon
Falcon Client


:::note Running
Running Falcon
Falcon Server
Server Locally?

If you're
you're an
an Enterprise
Enterprise customer
customer and
and running
running Falcon
Falcon Server
Server locally
locally you
you can
can skip
skip this
this step
step and
and connect
connect to
to Falcon
Falcon Server
Server using
using the
the default
default settings.



Before you
you can
can start
start your
your app
app you'll
you'll need
need to
to configure
configure Falcon
Falcon Client
Client to
to point
point to
to Falcon
Falcon Server.


### 1.
1. Create
Create a
a local.json
local.json file


Create a
a `local.json`
`local.json` file
file in
in your
your `client/config/`
`client/config/` direcotry.
direcotry. This
This file
file is
is ignored
ignored by
by `git`
`git` and
and should
should **not**
**not** be
be committed.


### 2.
2. Add
Add your
your details.


Add the
the following
following code
code to
to your
your `local.json`
`local.json` file,
file, replacing
replacing `[YOUR_SITE_URL]`
`[YOUR_SITE_URL]` with
with your
your site
site URL.




"graphqlUrl": "[YOUR_SITE_URL]/graphql"




## Starting
Starting your
your app


### Sandbox
Sandbox /
/ Production
Production customers


To get
get your
your app
app started
started you'll
you'll need
need to
to start
start (and
(and keep
keep running)
running) **Falcon
**Falcon Client**.


In a
a terminal
terminal window
window go
go into
into the
the client
client directory
directory (`cd
(`cd client/`)
client/`) and
and run
run the
the start
start command.


<TabsContainer title="Client">





{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">




cd client

npm start




<TabItem value="yarn">




cd client

yarn start







Once these
these have
have started,
started, visit
visit <a
<a href="http://localhost:3000"
href="http://localhost:3000" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">http://localhost:3000</a>
noopener">http://localhost:3000</a> to
to see
see your
your app.


### Enterprise
Enterprise customers


If you're
you're on
on an
an Enterprise
Enterprise plan
plan and
and have
have access
access to
to **Falcon
**Falcon Server**
Server** you
you may
may also
also want
want to
to run
run this
this locally.


By default
default **Falcon
**Falcon Server**
Server** runs
runs on
on `http://localhost:4000`
`http://localhost:4000` and
and uses
uses `http://localhost:4000/graphql`
`http://localhost:4000/graphql` for
for it's
it's graphQl
graphQl endpoint.


As well
well as
as having
having **Falcon
**Falcon Client**
Client** running
running you'll
you'll need
need to
to open
open a
a new
new terminal
terminal window
window and
and run
run the
the start
start command
command in
in the
the `server`
`server` directory.


<TabsContainer title="Server">





{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">




cd server/

npm start




<TabItem value="yarn">




cd server/

yarn start









id: overview

title: Overview

description: How
How to
to get
get started
started with
with Falcon
Falcon Platform




id: link-repository

title: Link
Link Your
Your Repository

sidebar_label: 3.
3. Link
Link Repository



import Content
Content from
from "../../console/getting-started/link-repository.mdx"


<Content />
id: create-application

title: Create
Create Deity
Deity Application

sidebar_label: 2.
2. Create
Create Application


import Content
Content from
from "../../console/getting-started/create-application.mdx"


<Content />
id: repository

title: 6.
6. Code
Code repository

sidebar_label: 6.
6. Code
Code repository



The last
last step
step is
is to
to deploy
deploy your
your changes.
changes. For
For that
that our
our cloud
cloud platform
platform will
will need
need access
access to
to your
your code
code repository.
repository. We
We use
use an
an **SSH
**SSH key**
key** for
for access
access and
and **web
**web hooks**
hooks** to
to allow
allow us
us to
to watch
watch for
for code
code changes.


We currently
currently support
support <a
<a href="https://github.com/"
href="https://github.com/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">GitHub</a>,
noopener">GitHub</a>, <a
<a href="https://bitbucket.org/"
href="https://bitbucket.org/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">BitBucket</a>
noopener">BitBucket</a> or
or <a
<a href="https://about.gitlab.com/"
href="https://about.gitlab.com/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">GitLab</a>.


We'll only
only need
need **read
**read access**
access** to
to your
your repo.


## 1.
1. Getting
Getting your
your details


You can
can get
get your
your **SSH
**SSH key**
key** and
and **web
**web hook**
hook** details
details using
using `dcloud`.


Simply run
run the
the following
following command
command from
from a
a terminal
terminal window
window when
when logged
logged into
into `dcloud`:



dcloud repo
repo -i





### GitHub


#### Adding
Adding an
an SSH
SSH Key


- Go
Go to
to `https://github.com/<accountName>/<repoName>/settings/keys/new`

- Add
Add your
your key


![GitHub SSH
SSH access](/img/docs/cloud/github-ssh-key.png)


#### Adding
Adding a
a web
web hook


- Go
Go to
to `https://github.com/<accountName>/<repoName>/settings/hooks/new`

- Add
Add the
the webhook
webhook provided
provided by
by `dcloud
`dcloud repo:list
repo:list -i`.


![GitHub WebHook](/img/docs/cloud/github-webhook.png)




### Bitbucket


#### Adding
Adding an
an SSH
SSH Key


- Go
Go to
to `https://bitbucket.org/<accountName>/<repoName>/admin/access-keys/`

- Add
Add your
your key


![BitBucket SSH
SSH access
access -
- add](/img/docs/cloud/bitbucket-ssh-key-2.png)


#### Adding
Adding a
a web
web hook


Coming soon




### GitLab


#### Adding
Adding an
an SSH
SSH Key


- Go
Go to
to `https://gitlab.com/<accountName>/<repoName>/-/settings/repository`

- Open
Open the
the **Deploy
**Deploy keys**
keys** section

- Add
Add your
your key


![GitLab SSH
SSH access](/img/docs/cloud/gitlab-ssh-key.png)


#### Adding
Adding a
a web
web hook


Coming soon


### Setup
Setup Complete


That's everything
everything done.
done. You're
You're now
now ready
ready to
to start
start using
using Deity
Deity Cloud.
Cloud. View
View the
the full
full list
list of
of `dcloud`
`dcloud` [commands](../cloud/dcloud).


Next step,
step, [deploy](/platform/deployment/overview)
[deploy](/platform/deployment/overview) your
your code.




## 2.
2. Check
Check your
your connection


To check
check your
your repository
repository and
and cloud
cloud instance
instance are
are linked
linked run
run the
the following
following command.
command. Your
Your repo
repo URL
URL should
should be
be returned



dcloud repo



## 3.
3. View
View your
your builds


Every time
time you
you push
push a
a commit,
commit, a
a build
build is
is triggered.
triggered. These
These builds
builds are
are not
not 'deployed'
'deployed' automatically
automatically but
but are
are made
made available
available to
to deploy
deploy once
once they
they are
are finished.


To view
view your
your builds
builds run



dcloud build:list



## 4.
4. Deploy
Deploy your
your code


To deploy
deploy a
a build
build you
you can
can run
run the
the command



dcloud deployment:run
deployment:run [buildId]
[buildId] [environmentName]



[More details
details can
can be
be found
found here](/platform/cloud/dcloud#deploy)


id: prerequisites

title: 1.
1. Prerequisites

sidebar_label: 1.
1. Prerequisites



## Falcon
Falcon Platform
Platform account


Before you
you start
start you'll
you'll need
need a
a Falcon
Falcon Platform
Platform account.


You can
can <a
<a href="https://deity.com/pricing"
href="https://deity.com/pricing" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Choose
noopener">Choose your
your plan</a>
plan</a> and
and get
get an
an account
account setup
setup from
from our
our site.


:::note BigCommerce
BigCommerce Users

If you're
you're using
using our
our **BigCommerce**
**BigCommerce** integration
integration you
you can
can set
set up
up and
and account
account through
through our
our app.
app. [View
[View the
the BigCommerce
BigCommerce integration
integration docs
docs here.](/platform/integration/bigcommerce/getting-started)



## Technical
Technical requirements


- [NodeJS](https://nodejs.org)
[NodeJS](https://nodejs.org) (>=12)

- [Yarn](https://yarnpkg.com)
[Yarn](https://yarnpkg.com) (>=1.22)


:::note Falcon
Falcon Tests
Tests are
are ran
ran against
against major
major Node
Node versions
versions -
- 12
12 and
and 14.

We recommend
recommend that
that you
you use
use one
one of
of the
the above
above versions.
versions. These
These are
are LTS
LTS versions
versions of
of Node
Node and
and thus
thus will
will be
be supported
supported for
for a
a longer
longer period.



id: configure

title: 5.
5. Configure
Configure your
your environment

sidebar_label: 5.
5. Configure
Configure your
your environment



## Overview


Each cloud
cloud environment
environment can
can have
have a
a set
set of
of configuartion
configuartion variables.
variables. These
These are
are used
used to
to store
store information
information like
like shop
shop API
API keys.


Depending on
on your
your integrations
integrations (Magento,
(Magento, BigCommerce,
BigCommerce, Stripe
Stripe etc)
etc) you'll
you'll need
need to
to add
add different
different varaibles
varaibles to
to your
your cloud
cloud environment.


:::note Configuration
Configuration documentation

We highly
highly recommend
recommend you
you read
read our
our [config
[config docs](/platform/configuration/overview)
docs](/platform/configuration/overview) before
before doing
doing this
this step.



## Steps


### 1.
1. Log
Log into
into your
your environment


Hopefully you're
you're still
still logged
logged in
in from
from [the
[the 'Install
'Install Dcloud'
Dcloud' step](/platform/getting-started/dcloud#login-to-your-cloud-env).
step](/platform/getting-started/dcloud#login-to-your-cloud-env). If
If not,
not, follow
follow the
the steps
steps there.


### 2.
2. What
What variables
variables need
need setting?


This depends
depends on
on your
your integrations.


Each one
one of
of our
our integrations
integrations has
has it's
it's own
own variables
variables and
and documentaion
documentaion that
that can
can be
be found
found in
in the
the 'Integrations'
'Integrations' section.
section. For
For example,
example, our
our [Magento
[Magento 2
2 docs](/platform/integration/magento2/getting-started#5-configure-your-magento-connection).


:::note client
client vs
vs server
server variables

Your environment
environment variables
variables are
are universal,
universal, meaning
meaning they
they are
are accessible
accessible by
by both
both your
your client
client and
and server
server apps
apps and
and you
you don't
don't need
need to
to set
set them
them in
in a
a different
different way.



### 3.
3. Set
Set your
your variables


Once you've
you've worked
worked out
out which
which variables
variables need
need setting
setting you
you can
can set
set them
them using
using dcloud.


You can
can then
then set
set environment
environment variables
variables using
using the
the following
following command:



dcloud env:var:set
env:var:set <env>
<env> <name>
<name> [value]





This example
example would
would set
set the
the `MAGENTO_HOST`
`MAGENTO_HOST` variable
variable on
on the
the `test`
`test` environment
environment to
to `magento.deity.io`.



dcloud env:var:set
env:var:set test
test MAGENTO_HOST
MAGENTO_HOST magento.deity.io



:::note Encrypted
Encrypted /
/ secret
secret variables

Use the
the `-s`
`-s` flag
flag when
when setting
setting environment
environment variables
variables so
so they
they are
are encrypted.

`dcloud env:var:set
env:var:set -s
-s test
test API_KEY
API_KEY your_key`



### 4.
4. Apply
Apply your
your changes


To apply
apply your
your variable
variable changes
changes you
you can
can run
run the
the command:



dcloud env:var:apply
env:var:apply <env>



:::note Deployments

Running a
a deployment
deployment will
will restart
restart your
your app
app and
and will
will also
also apply
apply new
new changes
changes to
to env
env variables.



### 5.
5. Test
Test your
your changes


Unless you're
you're running
running Falcon
Falcon Server
Server locally
locally (Enterprise
(Enterprise plans
plans only),
only), now
now is
is a
a great
great time
time to
to test
test your
your changes.
changes. By
By connecting
connecting your
your local
local client
client app
app to
to your
your remote
remote server
server app
app (via
(via the
the GraphQL
GraphQL URL
URL [explained
[explained here](/platform/getting-started/create#2-add-your-details))
here](/platform/getting-started/create#2-add-your-details)) you
you should
should be
be able
able to
to see
see any
any config
config changes
changes you've
you've made.


We recommend
recommend changing
changing your
your shop
shop integration
integration variables
variables so
so you
you can
can see
see your
your own
own products
products and
and categories
categories locally.


id: dcloud

title: 2.
2. Installing
Installing Dcloud

sidebar_label: 2.
2. Install
Install Dcloud



## What's
What's Dcloud?


Dcloud is
is our
our CLI
CLI tool
tool for
for managing
managing your
your Deity
Deity cloud
cloud account.
account. From
From here
here you
you can
can manage
manage deployments,
deployments, environment
environment variables
variables and
and much
much more.
more. [Read
[Read our
our full
full Deity
Deity Cloud
Cloud docs
docs for
for more
more information.](/platform/cloud/about)


## Install
Install Dcloud


Before doing
doing anything
anything you'll
you'll need
need to
to install
install our
our CLI
CLI tool
tool on
on your
your local
local machine.


This can
can be
be done
done using
using **npm**.



npm i
i -g
-g dcloud



### Check
Check Dcloud
Dcloud is
is installed


To test
test this
this has
has installed
installed correctly
correctly run
run the
the command
command `dcloud`
`dcloud` and
and you
you should
should be
be returned
returned a
a list
list of
of available
available options.


:::note Keep
Keep Dcloud
Dcloud up
up to
to date

We strongly
strongly advise
advise you
you keep
keep your
your Dcloud
Dcloud version
version up
up to
to date.
date. If
If you
you don't
don't have
have the
the latest
latest version
version you'll
you'll see
see a
a warning
warning when
when trying
trying to
to run
run `dcloud`
`dcloud` commands.
commands. To
To update
update dcloud
dcloud simply
simply re-run
re-run `npm
`npm i
i -g
-g dcloud`.



## Login
Login to
to your
your cloud
cloud env


Once you've
you've got
got dcloud
dcloud installed
installed you'll
you'll need
need to
to login.



dcloud login



Running the
the login
login command
command will
will take
take you
you through
through logging
logging in
in step
step by
by step.


It will
will open
open a
a browser
browser window
window which
which will
will ask
ask you
you to
to confirm
confirm the
the code
code in
in the
the CLI
CLI window.


<img src="/img/docs/cloud/dcloud-confirm.png"
src="/img/docs/cloud/dcloud-confirm.png" alt="Dcloud
alt="Dcloud Confirm"
Confirm" width="600"
width="600" style={{
style={{ display:
display: 'block',
'block', marginBottom:
marginBottom: 20
20 }}/>


<img src="/img/docs/cloud/dcloud-confirm-2.png"
src="/img/docs/cloud/dcloud-confirm-2.png" alt="Dcloud
alt="Dcloud Confirm"
Confirm" width="300"
width="300" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


After this
this you'll
you'll be
be redirected
redirected to
to login.
login. You
You can
can use
use the
the credentials
credentials provided
provided to
to you
you by
by our
our team
team when
when creating
creating an
an account.


### Getting
Getting your
your NPM
NPM token


Once you've
you've successfully
successfully logged
logged in,
in, your
your **NPM
**NPM access**
access** token
token will
will appear
appear in
in your
your current
current terminal
terminal window.
window. You'll
You'll need
need this
this in
in a
a later
later step
step so
so we
we advise
advise adding
adding it
it to
to a
a password
password manager.


:::note Lost
Lost your
your NPM
NPM token?

If you've
you've lost
lost your
your NPM
NPM token
token you
you can
can run
run `dcloud
`dcloud project:npm-token`
project:npm-token` to
to get
get it.



### Check
Check you're
you're logged
logged in


To check
check you're
you're logged
logged in,
in, simply
simply run
run `dcloud
`dcloud whoami`
whoami` and
and you
you should
should see
see the
the email
email assocatied
assocatied with
with your
your account.


id: access-packages

title: Access
Access Deity
Deity Packages

sidebar_label: 1.
1. Access
Access Npm
Npm Packages



import Content
Content from
from "../../console/getting-started/access-packages.mdx"


<Content />


id: deployment

title: Deployment

sidebar_label: 7.
7. Deployment



Deployment is
is handled
handled through
through **Falcon
**Falcon Cloud**,
Cloud**, all
all you
you need
need to
to do
do is
is push
push your
your code.


Read more
more about
about [Falcon
[Falcon Cloud](/platform/cloud/about)


To check
check your
your build
build code
code locally
locally you
you can
can run
run the
the `build`
`build` &
& `start`
`start` commands
commands with
with the
the `:prod`
`:prod` flag
flag from
from both
both the
the `server`
`server` and
and `client`.


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">




npm build:prod

npm start:prod




<TabItem value="yarn">




yarn build:prod

yarn start:prod








Find out
out more
more about
about our
our [CLI
[CLI commands](/platform/client/getting-started#build)


id: sign-up

title: Sign
Sign Up

sidebar_label: Sign
Sign Up



import Content
Content from
from "../../console/getting-started/sign-up.mdx"


<Content />
id: new-project

title: Start
Start developing
developing your
your project

sidebar_label: Start
Start Developing



import Content
Content from
from "../../console/getting-started/new-project.mdx"


<Content />
id: npm

title: 3.
3. Access
Access our
our packages

sidebar_label: 3.
3. Access
Access our
our packages



## Overview


In order
order to
to be
be able
able to
to get
get access
access to
to the
the **Falcon
**Falcon Platform
Platform packages**,
packages**, you
you will
will need
need to
to connect
connect to
to our
our private
private npm
npm registry.


You can
can do
do this
this using
using the
the **authorisation
**authorisation token**
token** from
from [Step
[Step 2](/platform/getting-started/dcloud#getting-your-npm-token).


You'll need
need to
to add
add your
your token
token to
to a
a [.npmrc
[.npmrc file](https://docs.npmjs.com/cli/v7/configuring-npm/npmrc).


We recommend
recommend adding
adding your
your token
token to
to a
a user
user config,
config, it
it can
can however
however be
be added
added in
in your
your projects
projects root.


## Setup


### Add
Add /
/ Edit
Edit your
your .npmrc


You'll need
need to
to either
either create
create or
or edit
edit a
a `.npmrc`
`.npmrc` file.
file. The
The user
user config
config can
can be
be found
found in
in your
your users
users root
root directory
directory `~/.npmrc`.
`~/.npmrc`. If
If you
you don't
don't have
have one,
one, you
you can
can create
create one:



nano ~/.npmrc



:::note Using
Using Windows?

If you're
you're using
using Windows
Windows you
you can
can just
just use
use file
file explorer
explorer and
and any
any text
text editor
editor to
to create
create /
/ edit
edit this
this file.



### Add
Add your
your token


Add the
the following
following code
code to
to your
your `.npmrc`
`.npmrc` file,
file, replacing
replacing `<YOUR_TOKEN>`
`<YOUR_TOKEN>` with
with your
your token.









### Test
Test your
your access


To test
test your
your access
access you
you can
can run



npm view
view @deity/create-falcon-app



This will
will return
return the
the list
list of
of available
available versions
versions of
of Create
Create Falcon
Falcon App.
App. If
If you
you see
see version
version then
then you
you have
have access
access :-)


id: tutorials

title: Storefront
Storefront Tutorials

description: Deity
Deity Platform
Platform Cookbook,
Cookbook, examples
examples of
of every
every day
day tasks
tasks you
you might
might need
need to
to do
do when
when building
building your
your app



import Content
Content from
from "../../../storefront/resources/tutorials.md"


<Content />
id: themeable-component

title: Creating
Creating a
a themeable
themeable component

sidebar_label: Creating
Creating a
a themeable
themeable component



import Content
Content from
from "../../../../storefront/resources/tutorials/themeable-component.mdx"


<Content />
id: scss-global

title: Loading
Loading a
a global
global scss
scss file

sidebar_label: Loading
Loading a
a global
global scss
scss file



import Content
Content from
from "../../../../storefront/resources/tutorials/scss-global.md"


<Content />
id: post-css-support

title: Adding
Adding Post
Post CSS
CSS support

sidebar_label: Adding
Adding Post
Post CSS
CSS support



import Content
Content from
from "../../../../storefront/resources/tutorials/post-css-support.mdx"


<Content />
id: change-logo

title: Changing
Changing the
the site
site logo

sidebar_label: Changing
Changing the
the site
site logo



import Content
Content from
from "../../../../storefront/resources/tutorials/change-logo.md"


<Content />
id: analytics

title: Setting
Setting up
up Google
Google Analytics
Analytics /
/ Tag
Tag Manager

sidebar_label: Setting
Setting up
up Google
Google Analytics


import Content
Content from
from "../../../../storefront/resources/tutorials/analytics.md"


<Content />
id: icon

title: Adding
Adding an
an SVG
SVG icon

sidebar_label: Adding
Adding an
an SVG
SVG icon



import Content
Content from
from "../../../../storefront/resources/tutorials/icon.mdx"


<Content />
id: testing

title: Adding
Adding a
a component
component test

sidebar_label: Testing
Testing a
a component



import Content
Content from
from "../../../../storefront/resources/tutorials/testing.md"


<Content />
id: contact

title: Contact
Contact Us

sidebar_label: Contact
Contact Us



## #help


The best
best place
place to
to go
go for
for support
support is
is our
our <a
<a href="https://deity-community.slack.com/archives/CDL2XDSHZ"
href="https://deity-community.slack.com/archives/CDL2XDSHZ" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">community
noopener">community Slack
Slack channel</a>.
channel</a>. We
We do
do our
our best
best to
to respond
respond as
as quickly
quickly as
as possible.


If Slack
Slack isn't
isn't your
your thing
thing you
you can
can always
always contact
contact us
us using
using our
our <a
<a href="https://deity.com/contact"
href="https://deity.com/contact" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">online
noopener">online form</a>.


id: faqs

title: F.A.Q.

sidebar_label: F.A.Q.

description: Frequently
Frequently Asked
Asked Questions



import Faqs
Faqs from
from '../../../../src/components/Faqs';


<Faqs />


id: config

title: Configuration
Configuration /
/ Integration
Integration FAQs

sidebar_label: Integrations

description: Configuration
Configuration and
and Integration
Integration frequently
frequently asked
asked questions,
questions, answered
answered by
by the
the Deity
Deity team.



import Link
Link from
from '@docusaurus/Link';

import Categories
Categories from
from '../../../../../src/components/Faqs/Categories';

import Accordion
Accordion from
from '../../../../../src/components/Accordion';


<Accordion title="Do
title="Do you
you support
support Shopify?">

We don't
don't currently
currently have
have a
a Shopify
Shopify Integration.
Integration. If
If you
you wanted
wanted to
to build
build your
your own
own you
you could
could check
check out
out our{'
our{' '}

<Link to="/platform/cookbook/integrations/contentful">Cookbook
to="/platform/cookbook/integrations/contentful">Cookbook entry</Link>
entry</Link> that
that shows
shows how
how to
to integrate
integrate with
with 3rd
3rd party

services, such
such as
as Shopify.



### Check
Check out
out our
our other
other FAQs


<Categories />


id: server

title: Falcon
Falcon Server
Server FAQs

description: Falcon
Falcon Server
Server frequently
frequently asked
asked questions,
questions, answered
answered by
by the
the Deity
Deity team.

sidebar_label: Composer

enterprise_only: true



import Link
Link from
from '@docusaurus/Link';

import Categories
Categories from
from '../../../../../src/components/Faqs/Categories';

import Accordion
Accordion from
from '../../../../../src/components/Accordion';


<Accordion title="Coming
title="Coming Soon">

There aren't
aren't any
any questions
questions or
or answers
answers here
here just
just yet.



### Check
Check out
out our
our other
other FAQs

<Categories />


id: storefront

title: Falcon
Falcon Client
Client FAQs

description: Falcon
Falcon Client
Client frequently
frequently asked
asked questions,
questions, answered
answered by
by the
the Deity
Deity team.



import Link
Link from
from '@docusaurus/Link';

import Categories
Categories from
from '../../../../../src/components/Faqs/Categories';

import Accordion
Accordion from
from '../../../../../src/components/Accordion';


<Accordion title="Can
title="Can I
I use
use NextJS">

Unfortunately, Falcon-Client
Falcon-Client (the
(the frontend
frontend app)
app) cannot
cannot be
be used
used together
together with
with NextJs.
NextJs. NextJs
NextJs uses
uses its
its own

template/routing system,
system, which
which is
is incompatible
incompatible with
with ours.
ours. Falcon-Server
Falcon-Server (data/graphql
(data/graphql server
server app)
app) could
could be
be used
used as
as a

middleware between
between Spree
Spree backend
backend and
and your
your frontend.
frontend. It
It could
could be
be even
even used
used to
to provide
provide data
data for
for your
your NextJs
NextJs frontend

(depending on
on how
how you
you want
want to
to organize
organize your
your whole
whole setup).


<Accordion title="How
title="How can
can I
I access
access configuration
configuration values?">

This works
works differently
differently for
for Falcon
Falcon Client
Client and
and Falcon
Falcon Server.
Server. Configuration
Configuration information
information can
can be
be found{'
found{' '}

<Link to="/platform/configuration/overview">here</Link>.


<Accordion title="Offline
title="Offline support
support doesn't
doesn't seem
seem to
to be
be working...">

Our service
service worker,
worker, that
that provides
provides offline
offline support
support is
is only
only used
used in
in production
production mode.
mode. If
If you're
you're running
running your
your app
app in

development `yarn
`yarn start`
start` rather
rather than
than `yarn
`yarn start:prod`
start:prod` offline
offline mode
mode won't
won't work.



### Check
Check out
out our
our other
other FAQs


<Categories />


id: misc

title: Troubleshooting

sidebar_label: Troubleshooting

description: Miscellaneous
Miscellaneous frequently
frequently asked
asked questions,
questions, answered
answered by
by the
the Deity
Deity team.



import Link
Link from
from '@docusaurus/Link';

import Categories
Categories from
from '../../../../../src/components/Faqs/Categories';

import Accordion
Accordion from
from '../../../../../src/components/Accordion';



<Accordion title="Error:
title="Error: Your
Your lockfile
lockfile needs
needs to
to be
be updated,
updated, but
but yarn
yarn was
was run
run with
with `--frozen-lockfile`.">

If you're
you're seeing
seeing this
this error
error it
it is
is likley
likley to
to be
be an
an issue
issue with
with your
your globally
globally installed
installed version
version of
of `create-react-app`.
`create-react-app`. To
To fix
fix it
it run
run the
the following
following commands
commands and
and then
then try
try to
to install
install you
you app
app again.


npm uninstall
uninstall -g
-g create-falcon-app

npm uninstall
uninstall -g
-g @deity/create-falcon-app




### Check
Check out
out our
our other
other FAQs

<Categories />


id: general

title: General
General FAQs

sidebar_label: General

description: General
General frequently
frequently asked
asked questions,
questions, answered
answered by
by the
the Deity
Deity team.



import Link
Link from
from '@docusaurus/Link';

import Categories
Categories from
from '../../../../../src/components/Faqs/Categories';

import Accordion
Accordion from
from '../../../../../src/components/Accordion';


<Accordion title="How
title="How much
much does
does Falcon
Falcon Platform
Platform cost?">

Falcon Platform
Platform comes
comes in
in a
a few
few different
different tiers
tiers depending
depending on
on your
your needs.
needs. To
To get
get a
a quote
quote please{'
please{' '}

<Link href="https://deity.com/contact">contact
href="https://deity.com/contact">contact our
our sales
sales team</Link>.



<Accordion title="How
title="How do
do I
I get
get started?">

Before you
you start
start you'll
you'll need
need to
to create
create an
an account.
account. This
This will
will give
give you
you access
access to
to our
our cloud
cloud hosting
hosting and
and our
our private
private NPM

packages. To
To create
create an
an account,
account, please
please <Link
<Link href="https://deity.com/contact">contact
href="https://deity.com/contact">contact our
our sales
sales team</Link>.



<Accordion title="Is
title="Is Falcon
Falcon production
production ready?">

Yes. Both
Both Falcon
Falcon Platform
Platform and
and Falcon
Falcon 2019
2019 are
are both
both production
production ready.



<Accordion title="Can
title="Can I
I use
use the
the same
same code
code as
as demo.deity.io?">

Yes. Our
Our demo
demo store
store uses
uses <strong>Demo
<strong>Demo V2</strong>.
V2</strong>. You
You can
can find
find information
information about
about this
this and
and other
other example
example apps{'
apps{' '}

<Link to="/platform/getting-started/create">here</Link>.



### Check
Check out
out our
our other
other FAQs


<Categories />


id: cloud

title: Falcon
Falcon Cloud
Cloud FAQs

sidebar_label: Cloud
Cloud Console

description: Falcon
Falcon Cloud
Cloud frequently
frequently asked
asked questions,
questions, answered
answered by
by the
the Deity
Deity team.



import Link
Link from
from '@docusaurus/Link';

import Categories
Categories from
from '../../../../../src/components/Faqs/Categories';

import Accordion
Accordion from
from '../../../../../src/components/Accordion';


<Accordion title="Can
title="Can I
I use
use Falcon
Falcon Cloud
Cloud without
without the
the other
other Falcon
Falcon Platform
Platform services?">

Falcon Cloud
Cloud is
is configured
configured to
to work
work seamlessly
seamlessly with
with our
our other
other services
services such
such as
as Falcon
Falcon Client
Client and
and Falcon
Falcon Server.
Server. If
If you
you have
have something
something unique
unique in
in mind
mind our
our team
team would
would love
love to
to hear
hear about
about it.
it. Please
Please <Link
<Link href="https://deity.com/contact">contact
href="https://deity.com/contact">contact our
our sales
sales team</Link>
team</Link> and
and we
we can
can discuss
discuss options.



### Check
Check out
out our
our other
other FAQs

<Categories />


id: tutorials

title: Example
Example Integrations

enterprise_only: true


import ExamplesContent
ExamplesContent from
from "../../../composer/integration/examples.md"


<ExamplesContent />


id: braintree

title: Integrating
Integrating with
with Braintree
Braintree Payments
Payments (deprecated)

sidebar_label: Braintree
Braintree Payments

description: Deity
Deity Platform
Platform Braintree
Braintree Payments
Payments integration

enterprise_only: true


import Content
Content from
from "../../../../integrations/resources/tutorials/braintree.mdx"


<Content />
id: contentful

title: Integrating
Integrating with
with Contentful
Contentful Part
Part 1

sidebar_label: Contentful
Contentful Part
Part 1

description: Deity
Deity Platform
Platform Contentful
Contentful integration

enterprise_only: true


import Content
Content from
from "../../../../integrations/resources/tutorials/contentful.mdx"


<Content />
id: jsonplaceholder

title: Integrating
Integrating with
with Json
Json Placeholder

sidebar_label: Json
Json Placeholder

description: Deity
Deity Platform
Platform Json
Json Placeholder
Placeholder integration

enterprise_only: true


import Content
Content from
from "../../../../integrations/resources/tutorials/jsonplaceholder.mdx"


<Content />
id: contentful2

title: Integrating
Integrating with
with Contentful
Contentful Part
Part 2

sidebar_label: Contentful
Contentful Part
Part 2

description: Deity
Deity Platform
Platform Contentful
Contentful integration

enterprise_only: true


import Content
Content from
from "../../../../integrations/resources/tutorials/contentful2.mdx"


<Content />
id: tutorials

title: Storefront
Storefront Tutorials

description: Deity
Deity Platform
Platform Cookbook,
Cookbook, examples
examples of
of every
every day
day tasks
tasks you
you might
might need
need to
to do
do when
when building
building your
your app



Our Cookbook
Cookbook is
is a
a collection
collection of
of 'recipes'
'recipes' for
for you
you to
to reference
reference and
and use
use in
in your
your own
own projects.


<img src="/img/docs/platform/noodles.svg"
src="/img/docs/platform/noodles.svg" alt="Noodle
alt="Noodle Illustration"
Illustration" width="200"
width="200" style={{margin:
style={{margin: '20px
'20px 0
0 40px
40px 0'}}
0'}} />


These 'recipes'
'recipes' vary
vary from
from simple
simple theming
theming processes
processes like
like [changing
[changing the
the logo](client/change-logo)
logo](client/change-logo) to
to more
more complex
complex integrations
integrations like
like [adding
[adding a
a new
new payment
payment provider](integrations/braintree).



:::note Something
Something missing?

Please [contact
[contact us](https://deity.com/contact)
us](https://deity.com/contact) if
if you
you want
want to
to see
see a
a specific
specific recipe
recipe or
or task
task added
added to
to our
our Cookbook.



id: cloud

title: Falcon
Falcon Cloud

sidebar_label: Falcon
Falcon Cloud



## Getting
Getting Started
Started with
with Cloud

<iframe width="560"
width="560" height="315"
height="315" src="https://www.youtube.com/embed/CSrkxZgtY6w?rel=0"
src="https://www.youtube.com/embed/CSrkxZgtY6w?rel=0" frameborder="0"
frameborder="0" allow="accelerometer;
allow="accelerometer; autoplay;
autoplay; encrypted-media;
encrypted-media; gyroscope;
gyroscope; picture-in-picture"
picture-in-picture" allowFullScreen></iframe>


id: client

title: Falcon
Falcon Client

sidebar_label: Falcon
Falcon Client



### Getting
Getting started
started with
with theming

<iframe width="560"
width="560" height="315"
height="315" src="https://www.youtube.com/embed/W8WoLoF54kI?rel=0"
src="https://www.youtube.com/embed/W8WoLoF54kI?rel=0" frameborder="0"
frameborder="0" allow="accelerometer;
allow="accelerometer; autoplay;
autoplay; encrypted-media;
encrypted-media; gyroscope;
gyroscope; picture-in-picture"
picture-in-picture" allowFullScreen></iframe>


### Overriding
Overriding a
a module
module in
in Falcon
Falcon Client

<iframe width="560"
width="560" height="315"
height="315" src="https://www.youtube.com/embed/caaWQ1S-lOQ?rel=0"
src="https://www.youtube.com/embed/caaWQ1S-lOQ?rel=0" frameborder="0"
frameborder="0" allow="accelerometer;
allow="accelerometer; autoplay;
autoplay; encrypted-media;
encrypted-media; gyroscope;
gyroscope; picture-in-picture"
picture-in-picture" allowFullScreen></iframe>


id: guides

title: Video
Video Guides

sidebar_label: Video
Video Guides



## Video
Video Guides


id: configuration

title: Configuration

sidebar_label: Configuration



Falcon Client
Client and
and Falcon
Falcon Server
Server configs
configs work
work in
in the
the same
same way.


Falcon Client
Client configuration
configuration can
can be
be found
found in
in the
the `client/config`
`client/config` directory
directory and
and Falcon
Falcon Server's
Server's config
config is
is found
found in
in `server/config`.


The config
config is
is set
set up
up use
use <a
<a href="https://www.npmjs.com/package/config"
href="https://www.npmjs.com/package/config" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">`NPM
noreferrer">`NPM Config`</a>.


Each of
of the
the config
config files
files is
is merged
merged to
to create
create your
your applications
applications configuration.


- `default.json`

- `local.json`
`local.json` (optional)

- `[NODE_CONFIG_ENV].json`
`[NODE_CONFIG_ENV].json` (optional)

- `custom-environment-variables.json`
`custom-environment-variables.json` (optional)


## Config
Config priority
priority /
/ order


The order
order in
in which
which the
the config
config files
files are
are merged
merged is:


`default.json` <
< `[NODE_CONFIG_ENV].json`
`[NODE_CONFIG_ENV].json` <
< `local.json`
`local.json` <
< `custom-environment-variables.json`


## default.json


The `default.json`
`default.json` contains
contains shared
shared config
config that
that can
can be
be committed
committed to
to your
your repository
repository (not
(not passwords
passwords and
and API
API keys).


## [NODE_CONFIG_ENV].json


The name
name of
of this
this file
file depends
depends on
on the
the config
config `NODE_CONFIG_ENV`.
`NODE_CONFIG_ENV`. For
For your
your `production`
`production` environment
environment it
it would
would be
be `production.json`
`production.json` and
and would
would only
only be
be loaded
loaded on
on that
that env.
env. For
For this
this reason
reason this
this file
file should
should contain
contain environment
environment specific
specific config.


## local.json


This file
file is
is **not**
**not** committed
committed to
to your
your repository.
repository. It
It **can**
**can** contain
contain sensitive
sensitive data
data such
such as
as API
API keys
keys and
and passwords
passwords you're
you're using
using for
for your
your application
application locally.


## custom-environment-variables.json


This file
file has
has the
the highest
highest priority
priority and
and should
should be
be used
used to
to map
map config
config to
to environment
environment variables
variables (set
(set on
on your
your Node
Node environment).
environment). These
These mapping
mapping can
can be
be used
used for
for sensitive
sensitive data
data such
such as
as passwords
passwords that
that you
you wouldn't
wouldn't want
want committed
committed to
to your
your repository.


If you're
you're using
using Falcon
Falcon Cloud
Cloud you
you can
can set
set env
env variables
variables using
using the
the [dcloud
[dcloud CLI
CLI tool](/platform/cloud/dcloud).


**CLI Command**



dcloud env:var:set
env:var:set <env>
<env> <name>
<name> [value]




dcloud env:var:set
env:var:set production
production GTM_CODE
GTM_CODE XXXXXXXXX







"googleTagManager": {

"id": "GTM_CODE"





### Adding
Adding encrypted
encrypted environment
environment variables
variables in
in DCloud


If an
an environment
environment variable
variable such
such as
as an
an API
API secret
secret key
key needs
needs to
to be
be encrypted
encrypted you
you simply
simply need
need to
to use
use the
the `-s`
`-s` or
or `--secret`
`--secret` flag
flag when
when setting
setting it.



dcloud env:var:set
env:var:set -s
-s production
production GTM_CODE
GTM_CODE XXXXXXXXX



id: getting-started

title: Getting
Getting Started

description: How
How to
to get
get started
started with
with Falcon
Falcon Platform



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem,
TabItem, ChangelogItem
ChangelogItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';


<p className="desc
className="desc pb20">

From the
the Deity
Deity Console,
Console, you
you can
can manage
manage and
and configure
configure the
the entire
entire Deity
Deity platform
platform stack.
stack. Manage
Manage your
your storefront
storefront domains,
domains, configure
configure third
third party
party integrations
integrations with
with Deity
Deity composer,
composer, or
or setup
setup payment
payment gateway
gateway business
business rules,
rules, all
all from
from one
one place
place –
– the
the Console.




<div className="mb100">

	<Card isPadding={false}>

	 <div
<div className="flex">

	 <CardContent>

	 <h2>Sign
<h2>Sign up
up for
for Cloud
Cloud Console</h2>

	 <div
<div className="mb20">

	 <p
<p >

	 Manage
Manage your
your subscriptions,
subscriptions, users,
users, deployments,
deployments, integrations
integrations and
and more
more with
with our
our web-based
web-based application.

	 </p>

	 </div>
  
	 <Button
<Button variant="contained"
variant="contained" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

	 Sign
Sign up
up for
for an
an account
account &nbsp;

	 <svg
<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

				<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

				<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

				<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

				<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>


	 </Button>&nbsp;
</Button>&nbsp; &nbsp;
 
	 <Button
<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud"
href="https://console.deity.cloud" target="_blank">

	 Sign
Sign in
in &nbsp;

	 	<svg
	<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

			<path d="M9.17969
d="M9.17969 16.6016L13.2812
16.6016L13.2812 12.5L9.17969
12.5L9.17969 8.39844"
8.39844" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

			<path d="M2.34375
d="M2.34375 12.5H13.2812"
12.5H13.2812" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

			<path d="M13.2812
d="M13.2812 3.90625H18.75C18.9572
3.90625H18.75C18.9572 3.90625
3.90625 19.1559
19.1559 3.98856
3.98856 19.3024
19.3024 4.13507C19.4489
4.13507C19.4489 4.28159
4.28159 19.5312
19.5312 4.4803
4.4803 19.5312
19.5312 4.6875V20.3125C19.5312
4.6875V20.3125C19.5312 20.5197
20.5197 19.4489
19.4489 20.7184
20.7184 19.3024
19.3024 20.8649C19.1559
20.8649C19.1559 21.0114
21.0114 18.9572
18.9572 21.0938
21.0938 18.75
18.75 21.0938H13.2812"
21.0938H13.2812" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>



	 </CardContent>

	 </div>





## Start
Start Developing


import Content
Content from
from "./getting-started/new-project.mdx"


<Content />


id: integrations

title: Integrations

hide_table_of_contents: true


import Content
Content from
from "../integrations.mdx"


<Content />
id: adyen

title: Adyen

sidebar_label: Adyen



import Content
Content from
from "../payments/providers/adyen.md"


<Content />
id: examples

title: Example
Example Integrations

enterprise_only: true


import ExamplesContent
ExamplesContent from
from "../composer/integration/examples.md"


<ExamplesContent />


id: wpay

title: Wpay

sidebar_label: Wpay


import Content
Content from
from "../payments/providers/wpay.md"


<Content />
id: overview

title: Introduction

description: How
How to
to start
start integrating



to do


id: overview

title: Magento
Magento 2
2 Integration

sidebar_label: Magento
Magento 2





<a href="https://magento.com/"
href="https://magento.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Magento
Magento site">

<img src="/img/docs/platform/magento-logo.svg"
src="/img/docs/platform/magento-logo.svg" alt="Magento
alt="Magento Logo"
Logo" width="200"/>





## Overview


Falcon Platform
Platform provides
provides the
the best
best front-end
front-end experiences
experiences for
for Magento
Magento 2
2 platform.


We support
support **magento
**magento >=
>= 2.3**



Falcon magento
magento module
module is
is required
required to
to run
run with
with Falcon
Falcon Platform.

Magento module
module is
is based
based on
on core
core REST
REST API
API of
of Magento
Magento platform.


## Supported
Supported Features


We have
have covered
covered all
all features
features essential
essential for
for customer
customer shopping
shopping and
and we
we keep
keep improving
improving our
our feature
feature coverage
coverage over
over time.
time. cover
cover every
every feature.



- Cms
Cms pages

- Cms
Cms blocks

- Top
Top navigation
navigation menu

- Newsletter
Newsletter support

- Multiple
Multiple stores
stores support
support (multilanguage
(multilanguage support)

- Multiple
Multiple currency
currency support


**Catalog /
/ Product
Product list**


- Layered
Layered navigation

- Product
Product lazy
lazy load

- Sorting

- Supported
Supported product
product types:
types: simple,
simple, configurable

- Catalog
Catalog price
price rules

- Tier
Tier prices


**Catalog /
/ Product
Product Detail
Detail Page**

- Product
Product images
images &
& gallery

- Tier
Tier prices

- Sale
Sale Prices

- Configurable
Configurable product:
product: swatches




- Login

- Register

- Reset
Reset Password

- Address
Address Book

- Customer
Customer Dashboard

- Account
Account Details

- Orders




- Add
Add /
/ Remove
Remove /
/ Update
Update Items

- Add
Add /
/ Remove
Remove Coupons




- Guest
Guest /
/ Customer
Customer Checkout

- Adding
Adding new
new address
address /
/ reusing
reusing existing
existing ones

- Shipping
Shipping methods

- Various
Various payment
payment methods

- Gift
Gift cards
cards support

- Deity
Deity payment
payment portal
portal (Paypal,
(Paypal, Mollie,
Mollie, Stripe)




- Canonical
Canonical URLs

- Url
Url rewrites

- ProductProduct // CategoryCategory metameta attributes
id: getting-started

title: Getting
Getting started

sidebar_label: Getting
Getting started



## Getting
Getting Started



Falcon magento
magento module
module should
should be
be installed
installed over
over preinstalled
preinstalled magento
magento instance.
instance. In
In case
case you
you don't
don't have
have magento
magento installed
installed yet

please checkout
checkout <a
<a href="https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-install.html">Magento
href="https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-install.html">Magento install
install guide</a>.
 


Using our
our example
example project,
project, `demo-v1`
`demo-v1` you
you will
will have
have Magento
Magento 2
2 support
support without
without having
having to
to do
do any
any custom
custom dev.


### 1.
1. Configure
Configure composer
composer repository


To install
install falcon
falcon magento
magento module
module you
you will
will need
need a
a `repository-url`
`repository-url` and
and `token`.
`token`. You
You should
should get
get this
this data
data from
from our
our team
team after
after signing
signing up.


Run the
the following
following command
command in
in your
your magento
magento instance:


composer config
config --global
--global --auth
--auth http-basic.deity.repo.packagist.com
http-basic.deity.repo.packagist.com token
token `token`



Afterwards update
update you
you `composer.json`
`composer.json` file
file with
with following
following data


"repositories": [

{"type": "composer",
"composer", "url":
"url": "repository-url"}




### 2.
2. Install
Install falcon
falcon magento
magento module

Run the
the following
following composer
composer command


composer require
require deity/falcon-magento
deity/falcon-magento ^5.4.0



After package
package installed,
installed, install
install falcon
falcon module
module into
into your
your magento
magento with


bin/magento setup:upgrade



and flush
flush magento
magento cache


bin/magento cache:flush



### 3.
3. Create
Create an
an integration
integration within
within Magento.


From the
the admin
admin (system->integrations)
(system->integrations) you
you can
can create
create a
a new
new integration.


<img src="/img/docs/platform/magento2-admin.png"
src="/img/docs/platform/magento2-admin.png" alt="Magento
alt="Magento admin"
admin" width="300"
width="300" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


From here
here you
you will
will get
get the
the following
following credentials
credentials to
to use
use later:

<img src="/img/docs/platform/magento2/integration-details.png"
src="/img/docs/platform/magento2/integration-details.png" alt="Integration
alt="Integration details"
details" width="300"
width="300" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


- `CONSUMER_KEY`

- `CONSUMER_SECRET`

- `ACCESS_TOKEN`

- `ACCESS_TOKEN_SECRET`


### 4.
4. Create
Create your
your Falcon
Falcon App.

Install Falcon
Falcon Platform
Platform using
using the
the `demo-v1`
`demo-v1` example
example and
and `create-falcon-app`


### 5.
5. Configure
Configure your
your Magento
Magento connection

Add your
your Magento
Magento 2
2 details
details to
to your
your `server/config/`
`server/config/` files.
files. Below
Below is
is an
an example
example of
of the
the config
config variables
variables you'll
you'll need
need to
to add.

If you're
you're using
using `demo-v1`
`demo-v1` this
this will
will be
be set
set up
up to
to use
use our
our demo
demo Magento
Magento 2
2 instance
instance and
and should
should work
work out
out of
of the
the box.




"endpoints": {

"magento": {

"config": {

"host": "MAGENTO_HOST"




"apis": {

"magento2": {

"config": {

"host": "MAGENTO_HOST",

"defaultLocale": "MAGENTO_DEFAULT_LOCALE",

"itemUrlSuffix": "MAGENTO_URL_SUFFIX",

"auth": {

"consumerKey": "MAGENTO_CONSUMER_KEY",

"consumerSecret": "MAGENTO_CONSUMER_SECRET",

"accessToken": "MAGENTO_ACCESS_TOKEN",

"accessTokenSecret": "MAGENTO_ACCESS_TOKEN_SECRET"








### Deity
Deity Cloud
Cloud Environment
Environment Variables


- `MAGENTO_HOST`:
`MAGENTO_HOST`: Your
Your Magento
Magento site
site URL
URL (without
(without protocol)
protocol) e.g.
e.g. `magento.deity.io`

- `MAGENTO_CONSUMER_KEY`:
`MAGENTO_CONSUMER_KEY`: your
your consumer
consumer key

- `MAGENTO_CONSUMER_SECRET`:
`MAGENTO_CONSUMER_SECRET`: your
your consumer
consumer secret

- `MAGENTO_ACCESS_TOKEN`:
`MAGENTO_ACCESS_TOKEN`: your
your access
access token

- `MAGENTO_ACCESS_TOKEN_SECRET`:
`MAGENTO_ACCESS_TOKEN_SECRET`: your
your access
access token
token secret

- `MAGENTO_DEFAULT_LOCALE`:
`MAGENTO_DEFAULT_LOCALE`: default
default locale
locale for
for your
your Magento
Magento store.
store. e.g.
e.g. `en_GB`

- `MAGENTO_URL_SUFFIX`:
`MAGENTO_URL_SUFFIX`: Your
Your suffix
suffix for
for products
products and
and categories.
categories. e.g.
e.g. `.html`.
`.html`. Defaults
Defaults to
to `null`.



### 6.
6. Update
Update magento
magento configuration


When your
your falcon
falcon instance
instance is
is up
up and
and running
running its
its important
important to
to update
update magento
magento with
with falcon
falcon instance
instance data

Go to
to Magento
Magento admin
admin `Stores->Configuration`

On Configuration
Configuration page
page open
open `Services->Falcon`

<img src="/img/docs/platform/magento2/magento-falcon-config.png"
src="/img/docs/platform/magento2/magento-falcon-config.png" alt="Magento
alt="Magento admin"
admin" width="600"
width="600" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


Enter your
your falcon
falcon domain
domain to
to `Falcon
`Falcon frontend
frontend url`,
url`, and
and cache
cache webhook
webhook url
url to
to `Url
`Url to
to flush
flush cache
cache on
on Falcon
Falcon Server`.


### 7.
7. Configure
Configure Deity
Deity Payment
Payment Gateway


To configure
configure Deity
Deity Payment
Payment Gateway
Gateway go
go to
to Magento
Magento admin
admin `Stores->Configuration`
`Stores->Configuration` and
and select
select `Sales
`Sales ->
-> Payment
Payment Methods`
Methods` section


<img src="/img/docs/platform/magento2/deity_payments.png"
src="/img/docs/platform/magento2/deity_payments.png" alt="Magento
alt="Magento admin"
admin" width="600"
width="600" style={{
style={{ marginBottom:
marginBottom: 20
20 }}/>


If your
your shop
shop does
does not
not support
support offline
offline payments
payments (like
(like Cash
Cash on
on Delivery)
Delivery) you
you can
can disable
disable `Deity
`Deity Offline
Offline Payments`
Payments` on
on this
this page.


### 8.
8. Disable
Disable your
your Magento
Magento frontend

Since Falcon
Falcon magento
magento module
module version
version 5.4.0
5.4.0 disable
disable magento
magento frontend
frontend function
function is
is included
included into
into the
the module
module core.

To disable
disable magento
magento frontend
frontend from
from cli
cli run
 

php bin/magento
bin/magento config:set
config:set admin/deity_disable_frontend/block_frontend_access
admin/deity_disable_frontend/block_frontend_access 1


Or go
go to
to magento
magento admin
admin config
config area


Stores >
> Configuration
Configuration >
> Advanced
Advanced >
> Admin
Admin >
> Disable
Disable Frontend


Flush cache
cache after
after changing
changing config.


### 9.
9. Complete

Complete, you
you should
should now
now have
have a
a fully
fully working
working Magento
Magento 2
2 /
/ Falcon
Falcon Platform
Platform site


id: mollie

title: Mollie

sidebar_label: Mollie



import Content
Content from
from "../payments/providers/mollie.md"


<Content />


id: unbxd

title: Unbxd

sidebar_label: Unbxd



to do


id: overview

title: BigCommerce
BigCommerce Integration

sidebar_label: BigCommerce

description: Our
Our BigCommerce
BigCommerce integration
integration provides
provides everything
everything you
you need
need to
to get
get your
your shop
shop online.
online. From
From product
product pages
pages to
to the
the checkout.





<a href="https://www.bigcommerce.com/"
href="https://www.bigcommerce.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the BigCommerce
BigCommerce site">

<img src="/img/docs/platform/bigcommerce-logo.svg"
src="/img/docs/platform/bigcommerce-logo.svg" alt="BigCommerce
alt="BigCommerce Logo"
Logo" width="200"/>





Our BigCommerce
BigCommerce integration
integration provides
provides everything
everything you
you need
need to
to get
get your
your shop
shop online.
online. From
From product
product pages
pages to
to the
the checkout.


All you
you need
need is
is a
a BigCommerce
BigCommerce store
store and
and our
our BigCommerce
BigCommerce App
App and
and you
you can
can be
be up
up and
and running
running in
in a
a few
few clicks.




rel="noreferrer noopener"


aria-label="visit the
the BigCommerce
BigCommerce site"

style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}><img
}}><img src="/img/docs/platform/bigcommerce/partner-header.jpg"
src="/img/docs/platform/bigcommerce/partner-header.jpg" alt="BigCommerce
alt="BigCommerce and
and Falcon
Falcon Platform
Platform Graphic"
Graphic" width="500"/>>
width="500"/>> </a>


- [Get
[Get started](/platform/integration/bigcommerce/getting-started)

- [Feature
[Feature List](/platform/integration/bigcommerce/features)

- [BigCommerce
[BigCommerce demo
demo app](https://demo.deity.io/)

- [BigCommerce
[BigCommerce partner
partner page](https://www.bigcommerce.com/deity/)


id: embedded-checkout

title: Embedded
Embedded Checkout

sidebar_label: Embedded
Embedded Checkout

description: How
How to
to use
use the
the BigCommerce
BigCommerce Embedded
Embedded Checkout



## About


The [BigCommerce
[BigCommerce Embedded
Embedded Checkout](https://developer.bigcommerce.com/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial)
Checkout](https://developer.bigcommerce.com/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial) allows
allows customer
customer to
to load
load an
an iframe
iframe version
version of
of the
the checkout.
checkout. The
The benefits
benefits to
to this
this is
is it
it supports
supports all
all the
the features
features and
and payment
payment methods
methods BigCommerce
BigCommerce supports
supports out
out of
of the
the box.


## How
How to
to use


To use
use the
the BigCommerce
BigCommerce Embedded
Embedded checkout
checkout you
you simply
simply need
need to
to add
add it
it into
into your
your checkout
checkout components.


With our
our core
core app
app this
this will
will be:




### 1.
1. Import
Import the
the component



import {
{ EmbeddedCheckout
EmbeddedCheckout }
} from
from './components';



:::note Check
Check the
the component
component exists

Out of
of the
the box
box you
you should
should have
have a
a `client/src/pages/shop/Checkout/components/EmbeddedCheckout.js`
`client/src/pages/shop/Checkout/components/EmbeddedCheckout.js` file.
file. If
If not,
not, please
please create
create a
a new
new app
app using
using `@deity/create-falcon-app`
`@deity/create-falcon-app` and
and grab
grab it
it from
from there.
there. This
This is
is specific
specific to
to demo-v2



### 2.
2. Get
Get the
the embedded
embedded checkout
checkout URL


Our cart
cart query
query can
can have
have extra
extra params
params passed
passed to
to it
it to
to grab
grab the
the embedded
embedded checkout
checkout iframe
iframe URL
URL needed
needed to
to render
render the
the checkout.


Find `CartQuery`
`CartQuery` in
in the
the `Checkout.js`
`Checkout.js` file.


It should
should look
look something
something like
like this:



export const
const CartQuery
CartQuery =
= props
props =>
=> {

return <FalconCartQuery
<FalconCartQuery fetchPolicy="cache-and-network"
fetchPolicy="cache-and-network" {...props}
{...props} />;




Change this
this to
to add
add `variables={{
`variables={{ includeEmbeddedUrl:
includeEmbeddedUrl: true
true }}`



export const
const CartQuery
CartQuery =
= props
props =>
=> {

return <FalconCartQuery
<FalconCartQuery fetchPolicy="cache-and-network"
fetchPolicy="cache-and-network" variables={{
variables={{ includeEmbeddedUrl:
includeEmbeddedUrl: true
true }}
}} {...props}
{...props} />;




This will
will return
return `cart.embeddedUrl`
`cart.embeddedUrl` with
with the
the query.


### 3.
3. Render
Render the
the component


Find `EnsureCanProceedCheckout`
`EnsureCanProceedCheckout` in
in the
the `Checkout.js`
`Checkout.js` file.


This should
should be
be wrapped
wrapped in
in `CartQuery`
`CartQuery` from
from step
step 2.


After the
the checks
checks against
against the
the cart
cart having
having items
items you
you can
can add:



if (cart.embeddedUrl)
(cart.embeddedUrl) {

return <EmbeddedCheckout
<EmbeddedCheckout url={cart.embeddedUrl}
url={cart.embeddedUrl} />;




So it
it will
will end
end up
up something
something like
like this:



return (


{({ data:
data: {
{ cart
cart }
} })
}) =>
=> {

if (!cart
(!cart ||
|| cart.itemsQty
cart.itemsQty ===
=== 0
0 ||
|| cart.items.length
cart.items.length ===
=== 0)
0) {

// try
try to
to restore
restore the
the cart
cart if
if you
you can

if (!called)
(!called) {


return <Loader
<Loader />;



// If
If we
we have
have a
a cart
cart but
but the
the items
items haven't
haven't loaded

if (cart
(cart &&
&& cart.itemsQty
cart.itemsQty !==
!== 0
0 &&
&& cart.items.length
cart.items.length ===
=== 0)
0) {

return <Loader
<Loader />;



// We
We can't
can't restore
restore the
the cart
cart or
or there
there are
are no
no items

return <Redirect
<Redirect to="/cart"
to="/cart" />;



if (cart.embeddedUrl)
(cart.embeddedUrl) {

return <EmbeddedCheckout
<EmbeddedCheckout url={cart.embeddedUrl}
url={cart.embeddedUrl} />;





## Notes


The embedded
embedded checkout
checkout requires
requires you
you to
to pass
pass the
the correct
correct channel
channel ID
ID in
in your
your BigCommerce
BigCommerce API
API config.


The host
host for
for this
this channel
channel must
must match
match your
your app.


If you're
you're developing
developing locally
locally please
please follow
follow the
the notes
notes in
in the
the [BigCommerce
[BigCommerce docs](https://developer.bigcommerce.com/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial#how-can-i-work-with-embedded-checkout-locally).


id: getting-started

title: Getting
Getting Started

sidebar_label: Getting
Getting Started

description: Using
Using our
our BigCommerce
BigCommerce App,
App, getting
getting started
started is
is easy.



## Prerequisites


Before you
you get
get started
started you'll
you'll need
need a
a BigCommerce
BigCommerce store
store and
and have
have access
access to
to the
the admin
admin panel.


## 1.
1. Install
Install our
our app





rel="noopener noreferrer"

title="Download our
our BigCommerce
BigCommerce App">
App"> <img


alt="BigCommerce app"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}




The first
first thing
thing you'll
you'll need
need to
to do
do is
is visit
visit the
the [BigCommerce
[BigCommerce App
App Store](https://www.bigcommerce.com/apps/deity-falcon-pwa-storefront/)
Store](https://www.bigcommerce.com/apps/deity-falcon-pwa-storefront/) and
and download
download our
our app.


## 2.
2. Setup
Setup our
our app


Once you've
you've added
added our
our app
app you
you can
can configure
configure it.
it. From
From the
the BigCommerce
BigCommerce admin
admin panel
panel visit
visit the
the Apps
Apps ->
-> My
My Apps
Apps section
section and
and select
select the
the **Falcon
**Falcon PWA**
PWA** app.


Once you're
you're viewing
viewing the
the app
app click
click **install**.




alt="BigCommerce app
app setup"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### i.
i. Permissions




alt="BigCommerce permissions
permissions screen"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



Our app
app will
will need
need to
to have
have access
access to
to some
some areas
areas of
of your
your store
store to
to work.
work. You'll
You'll need
need to
to agree
agree to
to this
this to
to continue.


### ii.
ii. Start
Start your
your Deity
Deity Falcon
Falcon account
account setup


Once you've
you've agreed
agreed to
to allow
allow our
our app
app the
the BigCommerce
BigCommerce permissions
permissions it
it needs
needs you
you be
be show
show a
a splash
splash screen
screen allowing
allowing you
you to
to [view
[view a
a demo
demo store\*\*](#demo)
store\*\*](#demo) so
so you
you can
can get
get to
to know
know Falcon
Falcon Platform
Platform a
a little
little better.
better. You'll
You'll also
also be
be giving
giving the
the option
option to
to **'Get
**'Get Deity
Deity Falcon'**.
Falcon'**. Click
Click that
that to
to continue
continue with
with your
your setup.


The next
next steps
steps will
will take
take you
you through
through creating
creating an
an account
account with
with us.




alt="Falcon Platform
Platform splash
splash screen"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### iii.
iii. Choose
Choose your
your plan


We offer
offer various
various price
price plans,
plans, once
once you've
you've chosen
chosen the
the plan
plan that's
that's right
right for
for you,
you, you
you can
can continue
continue to
to add
add your
your company
company /
/ personal
personal details.




alt="Falcon Platform
Platform price
price plans"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### iiii.
iiii. Add
Add your
your personal
personal details


You'll now
now be
be given
given the
the option
option to
to add
add your
your personal
personal details,
details, we'll
we'll use
use these
these as
as part
part of
of your
your invoice.




alt="Falcon Platform
Platform personal
personal details"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### v.
v. Adding
Adding Payment
Payment Details


The final
final step
step of
of your
your account
account setup
setup is
is adding
adding your
your payment
payment details.




alt="Falcon Platform
Platform payment
payment details"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



If setup
setup is
is successful
successful a
a BigCommerce
BigCommerce token
token will
will be
be generated
generated and
and you'll
you'll be
be shown
shown your
your BigCommerce
BigCommerce /
/ Falcon
Falcon Platform
Platform dashboard.




alt="BigCommerce Token
Token Generation"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



## 3.
3. Your
Your dashboard.


You'll be
be able
able to
to manage
manage your
your Falcon
Falcon Platform
Platform account
account from
from within
within your
your BigCommerce
BigCommerce admin
admin panel.




alt="BigCommerce admin
admin panel"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



From here
here you'll
you'll be
be able
able to
to change
change personal
personal detail,
detail, subscription
subscription and
and payment
payment information
information and
and link
link your
your site
site to
to a
a live
live URL
URL (Custom
(Custom URLs
URLs are
are not
not available
available for
for **sandbox**
**sandbox** accounts).


When you
you load
load up
up your
your dashboard
dashboard you'll
you'll see
see a
a link
link to
to your
your new
new Falcon
Falcon PWA
PWA store.




alt="BigCommerce admin
admin panel"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



:::note New
New account?

If you've
you've just
just set
set up
up your
your account
account it
it might
might take
take a
a few
few minutes
minutes before
before your
your site
site is
is available.



## 4.
4. Connecting
Connecting your
your code
code repository


Your site
site will
will be
be currently
currently setup
setup using
using our
our example
example app.


If you
you don't
don't already
already have
have an
an Falcon
Falcon Client
Client app
app in
in a
a code
code repository
repository you'll
you'll need
need to
to create
create one
one [link
[link here].


You repository
repository should
should have
have the
the `client`
`client` folder
folder in
in its
its `root`
`root` directory.


:::note Do
Do you
you have
have an
an Enterprise
Enterprise account?

If you
you have
have an
an Enterprise
Enterprise account
account your
your **Falcon
**Falcon Server**
Server** instance
instance should
should also
also be
be in
in the
the same
same code
code repository.
repository. with
with `client`
`client` and
and `server`
`server` directories
directories in
in the
the root.



### i.
i. Accessing
Accessing our
our NPM
NPM packages


To access
access our
our private
private packages
packages you'll
you'll need
need to
to use
use your
your **NPM
**NPM Token**
Token** and
and **NPM
**NPM Username**,
Username**, this
this can
can be
be found
found from
from the
the `Falcon
`Falcon Client`
Client` tab.


You can
can log
log into
into [deity.npm.io](https://npm.deity.io/)
[deity.npm.io](https://npm.deity.io/) to
to view
view these
these pacakges.


To have
have access
access to
to the
the packages
packages for
for local
local development
development you
you can
can follow
follow [these
[these steps](/platform/getting-started/npm/).




alt="BigCommerce admin
admin panel
panel -
- NPM
NPM token"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



### ii.
ii. Create
Create your
your app


Once you
you have
have access
access to
to our
our packages
packages you'll
you'll be
be able
able to
to create
create your
your app
app using
using `npx
`npx @deity/create-falcon-app
@deity/create-falcon-app --example
--example demo-v2
demo-v2 [YOUR_DIRECTORY_NAME]`.
[YOUR_DIRECTORY_NAME]`. For
For more
more information
information about
about creating
creating an
an app
app follow
follow [these
[these instructions](/platform/getting-started/create).


### iii.
iii. Connect
Connect your
your app


The last
last step
step is
is to
to connect
connect your
your app
app so
so it's
it's being
being used
used by
by your
your Falcon
Falcon Cloud
Cloud account.
account. If
If you
you visit
visit the
the the
the `Falcon
`Falcon Client`
Client` tab
tab you'll
you'll see
see information
information about
about **Authorising**
**Authorising** Cloud
Cloud to
to have
have access
access to
to your
your repository
repository and
and adding
adding a
a **Webhook**
**Webhook** so
so cloud
cloud can
can listen
listen for
for changes
changes (so
(so your
your Cloud
Cloud instance
instance knows
knows when
when you
you push
push code).


You can
can see
see detailed
detailed docs
docs for
for this
this step
step [here](/platform/getting-started/repository).


## 5.
5. Local
Local development


When developing
developing your
your app
app locally
locally you'll
you'll want
want to
to connect
connect your
your Falcon
Falcon Client
Client app
app to
to Falcon
Falcon Server,
Server, which
which in
in turn
turn will
will connect
connect to
to BigCommerce.


This can
can be
be done
done by
by adding
adding your
your Falcon
Falcon Server
Server credentials
credentials to
to your
your `client/config/local.json`
`client/config/local.json` file.
file. You
You can
can find
find out
out more
more about
about configurations
configurations [here](/platform/configuration/overview).


Add the
the following
following code
code to
to your
your `local.json`
`local.json` file,
file, replacing
replacing `[YOUR_SITE_URL]`
`[YOUR_SITE_URL]` with
with your
your site
site URL.




"graphqlUrl": "[YOUR_SITE_URL]/graphql"




## 6.
6. Falcon
Falcon Cloud
Cloud +
+ Deployments


Falcon Cloud
Cloud comes
comes as
as part
part of
of Falcon
Falcon Platform
Platform and
and is
is where
where your
your site
site is
is hosted.
hosted. To
To manage
manage deployments
deployments you
you can
can use
use our
our [DCloud
[DCloud CLI
CLI tool](/platform/cloud/installation).
tool](/platform/cloud/installation). You'll
You'll need
need an
an **access
**access token**
token** to
to log
log into
into using
using DCloud.
DCloud. This
This can
can be
be found
found in
in the
the `Falcon
`Falcon Server`
Server` tab.




alt="BigCommerce admin
admin panel
panel -
- falcon
falcon server
server tab"


style={{ marginBottom:
marginBottom: "20px",
"20px", display:
display: "block"
"block" }}



## 7.
7. Adding
Adding integrations


If you
you want
want to
to add
add other
other integrations
integrations such
such as
as **Algolia**
**Algolia** or
or **Wordpress**
**Wordpress** information
information can
can be
be found
found in
in the
the integrations
integrations tab.


## \*\*Demo
\*\*Demo Store


This demo
demo store
store will
will **NOT**
**NOT** pull
pull in
in your
your products
products at
at this
this stage
stage and
and should
should only
only be
be used
used as
as a
a reference
reference to
to the
the features
features available.
available. From
From here
here you'll
you'll be
be able
able to
to chat
chat to
to our
our support
support team
team if
if you
you have
have any
any questions.


id: features

title: Features

sidebar_label: Features

description: Falcon
Falcon Platform
Platform has
has a
a large
large percentage
percentage coverage
coverage of
of BigCommerce
BigCommerce features.



:::note New
New features
features coming
coming soon

We are
are actively
actively developing
developing our
our BigCommerce
BigCommerce integration
integration and
and will
will be
be adding
adding support
support for
for more
more features.





- Category
Category tree
tree from
from admin


**Product Types**


- Simple
Simple Products

- Configurable
Configurable Products

- Gift
Gift Cards


**Product Page
Page Features**


- Image
Image Gallery

- Related
Related Products
Products (partial
(partial support)

- Recently
Recently Viewed
Viewed Products
Products (partial
(partial support)




- Tax
Tax Calculation

- Tiered
Tiered Pricing
Pricing (partial
(partial support)

- Special
Special /
/ Sale
Sale prices


**Category/Product List**


- Sort
Sort Orders

- Add
Add to
to cart

- Filtering
Filtering (partial
(partial support)




- Product
Product search

- Search
Search aggregations/facets
aggregations/facets (when
(when used
used with
with our
our [Algolia
[Algolia Extension](/platform/integration/algolia))

- Search
Search sort
sort order


**Customer Area**


- Login

- Register

- Customer
Customer information
information (view/edit)

- Address
Address book
book (edit/add/remove)

- Change
Change password

- Previous
Previous order
order grid


**Cart/Mini Cart**


- Add/remove/edit
Add/remove/edit cart
cart items

- Add/remove
Add/remove coupons




- Guest
Guest Checkout

- Customer
Customer Checkout

- Shipping
Shipping methods
methods from
from admin

- Saved
Saved customer
customer addresses

- Embedded
Embedded one
one page
page checkout
checkout (supports
(supports BigCommerce
BigCommerce payment
payment and
and shipping
shipping methods).




- Google
Google Analytics

- Google
Google Tag
Tag Manager

- Structured
Structured Data
Data (Schema)

- Meta
Meta Data

- Canonicals
Canonicals (partial
(partial support)

- Site
Site Maps
Maps (frontend
(frontend specific)

- 301
301 redirects




- Multi-currency
Multi-currency (partial
(partial support)

- Multi-language
Multi-language (partial
(partial support)


id: technical

title: Technical
Technical Information

sidebar_label: Technical
Technical Information

description: Our
Our integration
integration is
is made
made up
up of
of 2
2 main
main pacakges,
pacakges, falcon-bigcommerce-api
falcon-bigcommerce-api and
and falcon-bigcommerce-endpoints.



The key
key packages
packages involved
involved in
in the
the integration
integration are:


- `@deity/falcon-bigcommerce-api`

- `@deity/falcon-bigcommerce-endpoints`


`falcon-bigcommerce-api` uses
uses both
both **REST
**REST API**
API** and
and **GraphQL**
**GraphQL** endpoints
endpoints for
for communicating
communicating with
with BigCommerce.


## Important
Important notes


The current
current BigCommerce
BigCommerce REST
REST API
API does
does not
not provide
provide any
any endpoints
endpoints to
to resolve
resolve frontend
frontend URLs,
URLs, for
for this
this reason
reason -
- the
the BigCommerce
BigCommerce GraphQL
GraphQL API
API is
is used
used just
just to
to resolve
resolve frontend
frontend URLs.
URLs. Once
Once it
it gets
gets the
the URL
URL type,
type, it's
it's able
able to
to fetch
fetch the
the (category
(category or
or product)
product) data
data from
from the
the BigCommerce
BigCommerce REST
REST API.


The BigCommerce
BigCommerce REST
REST API
API does
does not
not support
support aggregations
aggregations when
when navigating/filtering
navigating/filtering category
category products.
products. In
In order
order to
to provide
provide visitors
visitors with
with the
the best
best Search
Search experience
experience possible,
possible, it
it is
is recommended
recommended to
to use
use the
the falcon-algoliasearch
falcon-algoliasearch module,
module, which
which also
also allows
allows fetching
fetching the
the products
products directly
directly from
from the
the Algolia
Algolia index
index (for
(for this
this reason
reason it's
it's vital
vital to
to configure
configure Algolia
Algolia and
and BigCommerce
BigCommerce webhooks
webhooks properly
properly to
to ensure
ensure the
the correct
correct data
data flow
flow across
across backends
backends because,
because, Falcon-Server
Falcon-Server is
is the
the only
only middleware
middleware that
that connects
connects them
them both).


In order
order to
to avoid
avoid the
the requirement
requirement for
for your
your server
server to
to be
be PCI
PCI compliant,
compliant, it
it is
is recommended
recommended to
to use
use @deity-io/falcon-payments
@deity-io/falcon-payments module
module which
which handles
handles this
this requirement
requirement for
for you
you and
and provides
provides payments
payments on
on the
the client-side,
client-side, so
so you
you only
only get
get a
a transaction
transaction ID
ID to
to check/verify
check/verify server
server side.
side. Otherwise,
Otherwise, you'll
you'll have
have to
to handle
handle sensitive
sensitive payment
payment information
information and
and pass
pass this
this data
data to
to BigCommerce.


### Order
Order Webhooks


We use
use the
the Falcon
Falcon Server
Server config
config `envName`
`envName` to
to avoid
avoid webhook
webhook collision
collision amongst
amongst apps
apps connecting
connecting to
to the
the same
same BigCommerce
BigCommerce Store.


For enterprise
enterprise customers
customers that
that are
are running
running their
their own
own instance
instance of
of Falcon
Falcon Server
Server we
we highly
highly recommend
recommend each
each app
app /
/ developer
developer chooses
chooses a
a unique
unique name
name for
for their
their app
app and
and sets
sets it
it in
in their
their `local.json`
`local.json` config
config file.


## Known
Known issues


### File
File Upload
Upload Product
Product Modifier


We don't
don't currently
currently support
support file
file upload
upload product
product modifiers.
modifiers. Support
Support will
will be
be added
added in
in a
a future
future release.


### Product
Product Modifier
Modifier Cache


Unfortunately, the
the BigCommerce
BigCommerce product
product update
update webhook
webhook is
is not
not triggered
triggered if
if you
you make
make changes
changes to
to product
product modifier
modifier options.
options. This
This means
means that
that our
our cache
cache clearing
clearing isn't
isn't triggered.
triggered. To
To see
see updates
updates immediately
immediately you'll
you'll need
need to
to change
change another
another product
product attribute
attribute such
such as
as name,
name, price
price or
or description.
description. We
We suggest
suggest making
making a
a tiny
tiny change
change and
and then
then reverting
reverting it
it straight
straight after.


By default
default the
the cache
cache lifetime
lifetime (TTL)
(TTL) of
of the
the product
product cache
cache is
is 5
5 minutes,
minutes, you
you can
can always
always wait
wait for
for the
the cache
cache to
to expire
expire if
if your
your changes
changes don't
don't need
need to
to be
be reflected
reflected on
on the
the frontend
frontend urgently.


### Legacy
Legacy product
product option
option support


When using
using legacy
legacy (`v2`)
(`v2`) options,
options, we
we currently
currently support
support only
only the
the following
following option
option types:
types: *Multiple
*Multiple Choice*,
Choice*, *Swatch*.
*Swatch*. This
This means
means you
you will
will be
be able
able to
to use
use legacy
legacy options
options for
for things
things like
like choosing
choosing size,
size, color
color or
or model.
model. If
If your
your product
product has
has other
other option
option types,
types, the
the product
product will
will be
be visible
visible in
in your
your storefront,
storefront, but
but you
you won't
won't be
be able
able to
to add
add it
it to
to cart.


Furthermore, each
each product
product that
that has
has legacy
legacy options
options must
must have
have one
one or
or more
more SKUs
SKUs associated
associated with
with it.
it. You
You can
can check
check if
if your
your product
product has
has SKUs
SKUs in
in the
the [BigCommerce
[BigCommerce Control
Control Panel](https://login.bigcommerce.com/),
Panel](https://login.bigcommerce.com/), by
by viewing
viewing a
a product
product and
and going
going to
to *Options
*Options &
& SKUs*
SKUs* and
and clicking
clicking the
the tab
tab *SKUs*.
*SKUs*. If
If you
you haven't
haven't already
already created
created SKUs,
SKUs, the
the easiest
easiest way
way to
to do
do so
so is
is to
to click
click the
the *Generate
*Generate SKUs*
SKUs* button
button (the
(the chosen
chosen options
options in
in the
the dialog
dialog are
are not
not important
important for
for us).
us). For
For more
more info
info on
on the
the SKU
SKU Generator,
Generator, check
check out
out [BigCommerce
[BigCommerce Support](https://support.bigcommerce.com/s/article/The-Auto-SKU-Generator).


To find
find out
out more
more about
about legacy
legacy options,
options, check
check out
out this
this [BigCommerce
[BigCommerce Support
Support article](https://support.bigcommerce.com/s/article/Product-Options-v3#compare).


id: manual

title: Manual
Manual Configuration

sidebar_label: Manual
Manual Configuration

description: Step
Step by
by step
step guide
guide to
to configure
configure your
your BigCommerce
BigCommerce and
and Falcon
Falcon integration.



## Getting
Getting Started


You might
might want
want to
to manually
manually configure
configure your
your BigCommerce
BigCommerce Integration
Integration if
if you're
you're an
an **Enterprise
**Enterprise customer**
customer** and
and are
are running
running **Falcon
**Falcon Server
Server Locally**.


If you're
you're using
using our
our example
example app,
app, `demo-v2`
`demo-v2` most
most of
of the
the heavy
heavy lifting
lifting will
will be
be done
done for
for you
you and
and you'll
you'll only
only need
need to
to add
add a
a few
few configurations.


### 1.
1. Create
Create a
a BigCommerce
BigCommerce Account


You can
can create
create an
an account
account and
and start
start your
your free
free trial
trial [here](https://www.bigcommerce.com/essentials/free-trial/)


<img src="/img/docs/platform/bigcommerce-account-1.png"
src="/img/docs/platform/bigcommerce-account-1.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="300"
width="300" style={{marginBottom:
style={{marginBottom: 20}}/>


Once you've
you've created
created an
an account,
account, or
or if
if you
you already
already had
had one
one you'll
you'll need
need to
to create
create API
API keys.
keys. From
From within
within your
your dashboard
dashboard visit
visit **Advanced
**Advanced Settings
Settings ->
-> API
API Accounts**.


<img src="/img/docs/platform/bigcommerce-account-2.png"
src="/img/docs/platform/bigcommerce-account-2.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="180"
width="180" style={{marginBottom:
style={{marginBottom: 20}}/>


You should
should then
then be
be able
able to
to create
create a
a **V2/V3
**V2/V3 API
API Token**.


<img src="/img/docs/platform/bigcommerce-account-3.png"
src="/img/docs/platform/bigcommerce-account-3.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="180"
width="180" style={{marginBottom:
style={{marginBottom: 20}}/>


We recommend
recommend enabling
enabling **all
**all permissions**
permissions** for
for you
you API
API so
so you
you don't
don't have
have to
to regenerate
regenerate it
it at
at a
a later
later date.


<img src="/img/docs/platform/bigcommerce-account-4.png"
src="/img/docs/platform/bigcommerce-account-4.png" alt="BigCommerce
alt="BigCommerce Account"
Account" width="140"
width="140" style={{marginBottom:
style={{marginBottom: 20}}/>


You will
will then
then get
get a
a download
download with
with your
your API
API keys.
keys. Keep
Keep this
this safe
safe as
as you
you won't
won't be
be able
able to
to generate
generate it
it again.
again. We
We recommend
recommend storing
storing this
this information
information in
in a
a secure
secure password
password manager
manager such
such as
as 1password.


You should
should get
get the
the following
following credentials:


- ACCESS
ACCESS TOKEN

- CLIENT
CLIENT ID

- CLIENT
CLIENT SECRET

- NAME

- API
API PATH


#### Your
Your Store
Store hash


From your
your `API
`API Path`
Path` you
you will
will be
be able
able to
to get
get your
your `Store
`Store Hash`.
 

If you
you `API
`API Path`
Path` is
is https://api.bigcommerce.com/stores/abcdefg123/v3/
https://api.bigcommerce.com/stores/abcdefg123/v3/ then
then your
your `Store
`Store Hash`
Hash` is
is `abcdefg123`.
`abcdefg123`. You
You will
will need
need this
this later.


#### Your
Your Store
Store url


You'll also
also need
need your
your stores
stores frontend
frontend URL.
URL. This
This is
is simply
simply the
the URL
URL you
you visit
visit to
to see
see your
your store.
store. It
It will
will look
look something
something like
like `https://test-store.mybigcommerce.com/`


#### GraphQL
GraphQL Token


Your GraphQL
GraphQL Token
Token has
has to
to be
be generated.
generated. Luckily
Luckily BigCommerce
BigCommerce has
has a
a request
request runner
runner in
in their
their docs
docs that
that allow
allow you
you to
to generate
generate a
a token.


- [BigCommerce
[BigCommerce Docs](https://developer.bigcommerce.com/api-docs/storefront/graphql/graphql-storefront-api-overview#authentication)

- [BigCommerce
[BigCommerce Request
Request Runner](https://developer.bigcommerce.com/api-docs/getting-started/making-requests#making-requests)


#### GraphQL
GraphQL Url


This will
will be
be your
your store
store URL
URL with
with `graphql`
`graphql` at
at the
the end.
end. e.g.
e.g. `https://test-store.mybigcommerce.com/graphql`.


### 2.
2. Configure
Configure BigCommerce


The default
default configuration
configuration for
for BigCommerce
BigCommerce looks
looks like
like this:




"endpoints": {

"bigcommerce": {

"package": "@deity/falcon-bigcommerce-endpoints",

"config": {

"protocol": "https",

"host": null,

"accessToken": null,

"clientId": null,

"clientSecret": null,

"url": "/bc/webhook",

"webhookBaseUrl": null




"apis": {

"bigcommerce": {

"package": "./src/falcon-custom-bc-api",

"config": {

"protocol": "https",

"paymentHost": null,

"host": null,

"accessToken": null,

"clientId": null,

"clientSecret": null,

"gqlUrl": null,

"gqlToken": null,

"frontendUrl": "http://localhost:3000",

"mailerComponent": "mailer",

"paymentsComponent": "payments"






Use your
your `server/config/local.json`
`server/config/local.json` or
or your
your `environment
`environment variables`
variables` (Deity
(Deity Cloud)
Cloud) to
to add
add the
the sensitive
sensitive data
data where
where needed.



"endpoints": {

"bigcommerce": {

"config": {

"host": "api.bigcommerce.com/stores/[STORE_HASH]",

"accessToken": "[ACCESS_TOKEN]",

"clientId": "[CLIENT_ID]",

"clientSecret": "[CLIENT_SECRET]"




"apis": {

"bigcommerce": {

"config": {

"paymentHost": "payments.bigcommerce.com/stores/[STORE_HASH]/",

"host": "api.bigcommerce.com/stores/[STORE_HASH]",

"accessToken": "[ACCESS_TOKEN]",

"clientId": "[CLIENT_ID]",

"clientSecret": "[CLIENT_SECRET]",

"gqlUrl": "[STORE_URL]/graphql",

"gqlToken": "[GRAPHGL_TOKEN]"






### Deity
Deity Cloud
Cloud Environment
Environment Variables


- `BIGCOMMERCE_HOST`

- `BIGCOMMERCE_ACCESS_TOKEN`

- `BIGCOMMERCE_CLIENT_ID`

- `BIGCOMMERCE_GQL_URL`

- `BIGCOMMERCE_GQL_TOKEN`

- `BIGCOMMERCE_FRONTENT_URL`

- `SEARCH_API_NAME`:
`SEARCH_API_NAME`: If
If you
you want
want to
to use
use BigCommerce
BigCommerce for
for search
search the
the value
value shoul
shoul be
be `bigcommerce`

- `CHECKOUT_USE_EMBEDDED`:
`CHECKOUT_USE_EMBEDDED`: If
If you
you want
want to
to use
use the
the embedded
embedded checkout.


id: migration-guide

title: Migration
Migration guide

sidebar_label: Migration
Migration guide

enterprise_only: true




id: tutorials

title: Tutorials

sidebar_label: Tutorials



import Content
Content from
from "../../composer/integration/examples.md"


<Content />
id: faq

title: F.A.Q.

sidebar_label: F.A.Q.



## Faq


id: braintree

title: Integrating
Integrating with
with Braintree
Braintree Payments
Payments (deprecated)

sidebar_label: Braintree
Braintree Payments

description: Deity
Deity Platform
Platform Braintree
Braintree Payments
Payments integration

enterprise_only: true





rel="noreferrer noopener"


aria-label="visit the
the Braintree
Braintree site"


<img src="/img/docs/platform/braintree.svg"
src="/img/docs/platform/braintree.svg" alt="Braintree
alt="Braintree Logo"
Logo" width="200"
width="200" />



import HighlightFlag
HighlightFlag from
from '../../../../../src/components/HighlightFlag';


## Overview


In this
this tutorial
tutorial we
we will
will look
look at
at integrating
integrating with
with Braintree
Braintree using
using their
their **hosted
**hosted fields**
fields** and
and their
their **GraphQL**
**GraphQL** endpoint.


We will
will be
be focusing
focusing solely
solely on
on Card
Card Payments
Payments in
in the
the checkout.


In this
this example
example all
all files
files will
will be
be created
created directly
directly into
into our
our codebase.
codebase. For
For the
the sake
sake of
of reusability
reusability it's
it's advised
advised you
you create
create your
your own
own `npm`
`npm` packages
packages and
and import
import them.


## How
How it
it works


### Data
Data Flow


1. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> Configuration
Configuration data
data (API
(API keys
keys etc)


2. <HighlightFlag
<HighlightFlag type="client"
type="client" />
/> Braintree
Braintree form
form initialized


3. <HighlightFlag
<HighlightFlag type="client"
type="client" />
/> User
User inputs
inputs card
card data


4. <HighlightFlag
<HighlightFlag text="Braintree"
text="Braintree" />
/> `nonce`
`nonce` token
token grabbed
grabbed from
from Braintree


5. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> Payment
Payment query
query created
created (using
(using token)


6. <HighlightFlag
<HighlightFlag text="Braintree"
text="Braintree" />
/> Payment
Payment handled


7. <HighlightFlag
<HighlightFlag type="server"
type="server" />
/> Payment
Payment status
status returned


### File
File Flow


This is
is an
an example
example of
of the
the data
data flow
flow from
from a
a file
file perspective
perspective (using
(using `demo-v2`):


<img src="/img/docs/platform/payment-flow.jpg"
src="/img/docs/platform/payment-flow.jpg" alt="Payment
alt="Payment flow
flow diagram"
diagram" />


## Useful
Useful Packages


- [Braintree
[Braintree React
React Hosted
Hosted Fields](https://www.npmjs.com/package/react-braintree-fields)

- [GraphQL
[GraphQL Request](https://github.com/prisma-labs/graphql-request)


## Useful
Useful docs


**Links to
to internal
internal docs
docs coming
coming soon**


- [Braintree,
[Braintree, creating
creating a
a payment
payment using
using GraphQL](https://graphql.braintreepayments.com/guides/creating_transactions/#charging-a-payment-method)


## Creating
Creating your
your integration


### 1.
1. Create
Create your
your Braintree
Braintree account.


We are
are going
going to
to be
be using
using a
a Sandbox
Sandbox account
account for
for this
this but
but you
you could
could just
just as
as easily
easily create
create a
a live
live account.


#### i.
i. Register


[Register](https://www.braintreepayments.com/gb/sandbox) or
or [Login](https://sandbox.braintreegateway.com/login)
[Login](https://sandbox.braintreegateway.com/login) if
if you
you already
already have
have an
an account.


#### ii.
ii. Generate
Generate your
your keys


<img src="/img/docs/platform/braintree-admin.png"
src="/img/docs/platform/braintree-admin.png" alt="Braintree
alt="Braintree Admin"
Admin" width="200"
width="200" />


From the
the admin
admin click
click on
on the
the API
API section.
section. Here
Here you'll
you'll want
want to
to create
create an
an `API
`API key`
key` &
& a
a `Tokenization
`Tokenization Key`.
Key`. You'll
You'll need
need these
these a
a little
little later.


### 2.
2. Add
Add your
your payment
payment provider


Create your
your provider
provider `server/src/falcon-braintree-payments/providers/braintree.js`





module.exports =
= class
class BraintreePayment
BraintreePayment {

constructor(code, config)
config) {

this.config =
= config;
config; //
// This
This is
is defined
defined in
in our
our config
config json
json files

this.code =
= code;





We then
then include
include this
this in
in our
our config
config file.
file. We
We also
also pass
pass some
some basic
basic config
config (nothing
(nothing with
with sensitive
sensitive data
data e.g.
e.g. API
API keys).






"components": {

"payments": {

"package": "@deity/falcon-payments",

"config": {

"providers": {

"braintree": {

"package": "../../../../../src/falcon-braintree-payments/providers/braintree.js",

"config": {

"title": "Braintree",

"sandboxGraphQlUrl": "https://payments.sandbox.braintree-api.com/graphql",

"graphQlUrl": "https://payments.braintree-api.com/graphql"










### 3.
3. Pass
Pass your
your API
API details
details to
to the
the provider


To get
get this
this up
up and
and running
running we
we will
will do
do this
this in
in our
our `server/config/local.json`.
`server/config/local.json`. For
For production
production config
config you
you should
should read
read [these
[these docs](/platform/client/configuration).






"components": {

"payments": {

"config": {

"providers": {

"braintree": {

"config": {

"environment": "sandbox",
"sandbox", //
// Swap
Swap for
for production
production if
if you
you want
want to
to use
use production
production details

"publicKey": "YOUR_PUBLIC_KEY",

"privateKey": "YOUR_PRIVATE_KEY",

"tokenizationKey": "YOUR_TOKENIZATION_KEY"










You will
will now
now have
have access
access to
to all
all of
of these
these details
details in
in your
your provider.
provider. They
They will
will be
be passed
passed as
as `config`.


### 4.
4. Passing
Passing config
config data
data to
to the
the frontend
frontend (Falcon
(Falcon Client)


Each payment
payment provider
provider should
should include
include 2
2 methods.
methods. `initialize`
`initialize` when
when the
the provider
provider is
is initialized
initialized and
and `validate`
`validate` when
when the
the payment
payment is
is submitted.





module.exports =
= class
class BraintreePayment
BraintreePayment {


async initialize(payload)
initialize(payload) {



async validate(payload)
validate(payload) {






We can
can use
use the
the `initialize`
`initialize` method
method to
to pass
pass data
data from
from the
the provider
provider to
to our
our Falcon
Falcon Client
Client components.





module.exports =
= class
class BraintreePayment
BraintreePayment {

constructor(code, config)
config) {

this.config =
= config;

this.code =
= code;

this.tokenizationKey =
= this.config.tokenizationKey;



// payload
payload contains
contains information
information about
about the
the payment,
payment, e.g.
e.g. total,
total, currency,
currency, customer
customer ID

async initialize(payload)
initialize(payload) {

return {

title: this.config.title,

code: this.code,

config: {

tokenizationKey: this.tokenizationKey,

total: payload.total







### 5.
5. Install
Install the
the Braintree
Braintree React
React Package


We will
will install
install this
this package
package `client`
`client` side.
side. It
It does
does a
a lot
lot of
of the
the heavy
heavy lifting
lifting for
for rendering
rendering a
a Braintree
Braintree form
form with
with **hosted
**hosted fields**.




You can
can either
either install
install this
this with
with `npm`
`npm` or
or `yarn`.


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm i
i react-braintree-fields</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn add
add react-braintree-fields</CodeBlock>





### 6.
6. Create
Create your
your component
component &
& plugin


We now
now need
need to
to create
create a
a frontend
frontend component
component for
for our
our payment
payment method
method and
and a
a plugin
plugin to
to handle
handle the
the data.





import React,
React, {
{ useState
useState }
} from
from 'react';

import {
{ HostedField
HostedField }
} from
from 'react-braintree-fields';

import {
{ BraintreePlugin
BraintreePlugin }
} from
from '../../../../../plugin/Braintree';


const Payment
Payment =
= ({
({ children,
children, ...props
...props })
}) =>
=> {

const [loading,
[loading, setLoading]
setLoading] =
= useState(false);

const fn
fn =
= ()
() =>
=> {


return Promise.resolve();



return (

<BraintreePlugin {...props}>

{pay =>


() =>


.then(() =>
=> pay())

.then(x =>
=> {


return x;


.catch(x =>
=> {


return Promise.reject(x);


{ loading
loading }







// This
This is
is rendered
rendered in
in the
the payment
payment method
method component

Payment.UI =
= ()
() =>
=> (


<HostedField type="number"
type="number" prefill="4111
prefill="4111 1111
1111 1111
1111 1111"
1111" />

<HostedField type="expirationMonth"
type="expirationMonth" />

<HostedField type="expirationYear"
type="expirationYear" />

<HostedField type="cvv"
type="cvv" placeholder="CVV"
placeholder="CVV" />




export default
default Payment;



**n.b.** The
The `<HostedField>`
`<HostedField>` components
components should
should have
have associated
associated labels.


It's worth
worth reading
reading the
the package
package docs
docs to
to see
see how
how the
the `<Braintree>`
`<Braintree>` component
component works.
works. The
The main
main detail
detail we
we need
need to
to know
know about
about is
is the
the `getTokenRef`
`getTokenRef` prop.


This returns
returns a
a function,
function, which
which when
when run
run returns
returns a
a payment
payment token
token (`nonce`)
(`nonce`) from
from Braintree.
Braintree. We
We need
need this
this to
to process
process transactions.





import React,
React, {
{ useState
useState }
} from
from 'react';

import {
{ Braintree
Braintree }
} from
from 'react-braintree-fields';


export const
const BraintreePlugin
BraintreePlugin =
= props
props =>
=> {

const {
{ children,
children, config
config }
} =
= props;

const [tokenize,
[tokenize, setTokenizeFunc]
setTokenizeFunc] =
= useState();


// This
This method
method passes
passes data
data to
to our
our validate
validate method
method in
in our
our payment
payment provider.
provider. We
We will
will use
use it
it later.

const payFn
payFn =
= async
async ()
() =>
=> {

// @todo
@todo add
add error
error handling

return tokenize().then(payload
tokenize().then(payload =>
=> {

return {

total: config.total,

nonce: payload.nonce





return (



authorization={config.tokenizationKey} //
// This
This key
key comes
comes from
from our
our server/config

getTokenRef={ref =>
=> setTokenizeFunc(()
setTokenizeFunc(() =>
=> ref)}









### 7.
7. Include
Include your
your component
component as
as a
a payment
payment method


In the
the `demo-v2`
`demo-v2` example
example project
project the
the payment
payment methods
methods are
are mapped
mapped to
to components
components in
in 2
2 files.


- `client/src/pages/shop/Checkout/components/PaymentMethodPicker.js`

- `client/src/pages/shop/Checkout/sections/PlaceOrderSection.js`


In these
these files
files methods
methods added
added to
to your
your config
config (`server/config/default.json`
(`server/config/default.json` ->
-> payment/providers)
payment/providers) are
are mapped
mapped to
to frontend
frontend components.
components. We
We need
need to
to add
add Braintree
Braintree to
to that
that mapping.






import {
{ SimplePayment
SimplePayment }
} from
from '@deity/falcon-payment-plugin';

import Braintree
Braintree from
from './payments/Braintree';


const paymentCodeToPluginMap
paymentCodeToPluginMap =
= {

cash: SimplePayment,

braintree: Braintree










const paymentCodeToPluginMap
paymentCodeToPluginMap =
= {

braintree: `Braintree`




**n.b.** `PlaceOrderSection.js`
`PlaceOrderSection.js` maps
maps the
the component
component based
based on
on it
it being
being within
within the
the `client/src/pages/shop/checkout/payments/`
`client/src/pages/shop/checkout/payments/` directory.


If you
you visit
visit the
the checkout
checkout now
now you
you should
should see
see Braintree
Braintree as
as an
an option
option and
and should
should also
also see
see the
the form
form appearing
appearing as
as expected.


### 7.
7. Create
Create a
a transaction


The last
last step
step is
is to
to process
process the
the transaction.
transaction. For
For this
this we
we will
will be
be using
using Braintree's
Braintree's GraphQL
GraphQL endpoint.


It's worth
worth reading
reading through
through [their
[their docs](https://graphql.braintreepayments.com/),
docs](https://graphql.braintreepayments.com/), especially
especially if
if you
you want
want a
a more
more complex
complex integration.


#### i.
i. Add
Add GraphQL
GraphQL Request
Request Package


This package
package allows
allows us
us to
to easily
easily make
make well
well formatted
formatted GraphQL
GraphQL requests
requests to
to 3rd
3rd party
party clients.


We install
install this
this `server`
`server` side.


**If you're
you're using
using the
the `demo-v2`
`demo-v2` example
example project
project then
then you'll
you'll already
already have
have this**







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">

<CodeBlock language="bash">npm
language="bash">npm i
i graphql-request</CodeBlock>


<TabItem value="yarn">

<CodeBlock language="bash">yarn
language="bash">yarn add
add graphql-request</CodeBlock>





#### ii.
ii. Connecting
Connecting to
to the
the Braintree
Braintree GraphQL
GraphQL client





const {
{ GraphQLClient
GraphQLClient }
} =
= require('graphql-request');


module.exports =
= class
class BraintreePayment
BraintreePayment {

constructor(code, config)
config) {

this.config =
= config;

this.code =
= code;

this.environment =
= this.config.environment;

this.publicKey =
= this.config.publicKey;

this.privateKey =
= this.config.privateKey;

this.tokenizationKey =
= this.config.tokenizationKey;

this.graphQlUrl =
= this.environment
this.environment ===
=== 'sandbox'
'sandbox' ?
? this.config.sandboxGraphQlUrl
this.config.sandboxGraphQlUrl :
: this.config.graphQlUrl;


// This
This is
is how
how the
the client
client token
token is
is generated.
generated. There
There is
is also
also a
a way
way to
to get
get this
this through
through a
a GraphQL
GraphQL query
query if
if you
you prefer

this.clientToken =
= Buffer.from(`${this.publicKey}:${this.privateKey}`).toString('base64');



get gqlClient()
gqlClient() {

return new
new GraphQLClient(this.graphQlUrl,
GraphQLClient(this.graphQlUrl, {

headers: {

Authorization: `Basic
`Basic ${this.clientToken}`,

'Braintree-Version': '2020-03-01'







#### iii.
iii. Test
Test your
your connection


We can
can test
test the
the connection
connection using
using the
the [`ping`](https://graphql.braintreepayments.com/reference/#Query--ping)
[`ping`](https://graphql.braintreepayments.com/reference/#Query--ping) query
query Braintree
Braintree provide.
provide. To
To test
test this
this I've
I've called
called the
the `ping`
`ping` method
method in
in the
the `initialize`
`initialize` step.
step. This
This way
way we
we should
should get
get a
a console
console log
log (in
(in the
the terminal
terminal window
window running
running falcon
falcon server)
server) when
when initializing
initializing the
the payment
payment method
method on
on the
the frontend
frontend (visit
(visit the
the checkout
checkout and
and select
select Braintree).





module.exports =
= class
class BraintreePayment
BraintreePayment {


async initialize(payload)
initialize(payload) {

const test
test =
= this.ping();




async ping()
ping() {

const pingQuery
pingQuery =
= 'query
'query {
{ ping
ping }';

try {

const data
data =
= await
await this.gqlClient.request(pingQuery);


} catch
catch (errors)
(errors) {









#### iiii.
iiii. Create
Create the
the transaction


We can
can now
now create
create the
the transaction
transaction in
in our
our `validate`
`validate` method
method in
in the
the provider.





async validate(payload)
validate(payload) {

const {
{ nonce,
nonce, total
total }
} =
= payload;


const transactionData
transactionData =
= {

"input": {

"paymentMethodId": nonce,

"transaction": {

"amount": parseFloat(total).toFixed(2)




const createPaymentQuery
createPaymentQuery =
= `

mutation ChargePaymentMethod($input:
ChargePaymentMethod($input: ChargePaymentMethodInput!)
ChargePaymentMethodInput!) {

chargePaymentMethod(input: $input)
$input) {

transaction {







try {

const data
data =
= await
await this.gqlClient.request(createPaymentQuery,
this.gqlClient.request(createPaymentQuery, transactionData);

return data.chargePaymentMethod.transaction;

} catch
catch (errors)
(errors) {

throw new
new Error('Braintree
Error('Braintree failed
failed to
to return
return a
a response');





### 8.
8. Finished


That's it,
it, our
our code
code will
will take
take care
care of
of the
the rest
rest and
and send
send you
you to
to the
the success
success page
page or
or display
display your
your error.
error. It's
It's worth
worth noting
noting we've
we've not
not added
added much
much error
error handling,
handling, styling
styling or
or testing
testing that
that you
you will
will need
need to
to use
use this
this on
on a
a production
production environment.




## Complete
Complete code.


**This code
code is
is not
not production
production ready,
ready, please
please only
only use
use it
it as
as an
an example**





const {
{ GraphQLClient
GraphQLClient }
} =
= require('graphql-request');


module.exports =
= class
class BraintreePayment
BraintreePayment {

constructor(code, config)
config) {

this.config =
= config;

this.code =
= code;

this.environment =
= this.config.environment;

this.publicKey =
= this.config.publicKey;

this.privateKey =
= this.config.privateKey;

this.tokenizationKey =
= this.config.tokenizationKey;

this.graphQlUrl =
= this.environment
this.environment ===
=== 'sandbox'
'sandbox' ?
? this.config.sandboxGraphQlUrl
this.config.sandboxGraphQlUrl :
: this.config.graphQlUrl;


this.clientToken =
= Buffer.from(`${this.publicKey}:${this.privateKey}`).toString('base64');



get gqlClient()
gqlClient() {

return new
new GraphQLClient(this.graphQlUrl,
GraphQLClient(this.graphQlUrl, {

headers: {

Authorization: `Basic
`Basic ${this.clientToken}`,

'Braintree-Version': '2020-03-01'





async initialize(payload)
initialize(payload) {

return {

title: this.config.title,

code: this.code,

config: {

tokenizationKey: this.tokenizationKey,

total: payload.total





async ping()
ping() {

const pingQuery
pingQuery =
= 'query
'query {
{ ping
ping }';

try {

const data
data =
= await
await this.gqlClient.request(pingQuery);


} catch
catch (errors)
(errors) {





// https://graphql.braintreepayments.com/guides/creating_transactions/#charging-a-payment-method

async validate(payload)
validate(payload) {

const {
{ nonce,
nonce, total
total }
} =
= payload;


const transactionData
transactionData =
= {

input: {

paymentMethodId: nonce,

transaction: {

amount: parseFloat(total).toFixed(2)




const createPaymentQuery
createPaymentQuery =
= `

mutation ChargePaymentMethod($input:
ChargePaymentMethod($input: ChargePaymentMethodInput!)
ChargePaymentMethodInput!) {

chargePaymentMethod(input: $input)
$input) {

transaction {







try {

const data
data =
= await
await this.gqlClient.request(createPaymentQuery,
this.gqlClient.request(createPaymentQuery, transactionData);

return data.chargePaymentMethod.transaction;

} catch
catch (errors)
(errors) {

throw new
new Error('Braintree
Error('Braintree failed
failed to
to return
return a
a response');









import React,
React, {
{ useState
useState }
} from
from 'react';

import {
{ Braintree
Braintree }
} from
from 'react-braintree-fields';


export const
const BraintreePlugin
BraintreePlugin =
= props
props =>
=> {

const {
{ children,
children, config
config }
} =
= props;

const [tokenize,
[tokenize, setTokenizeFunc]
setTokenizeFunc] =
= useState();

const payFn
payFn =
= async
async ()
() =>
=> {

// @todo
@todo add
add error
error handling

return tokenize().then(payload
tokenize().then(payload =>
=> {

return {

total: config.total,

nonce: payload.nonce





return (


<Braintree authorization={config.tokenizationKey}
authorization={config.tokenizationKey} getTokenRef={ref
getTokenRef={ref =>
=> setTokenizeFunc(()
setTokenizeFunc(() =>
=> ref)}>











import React,
React, {
{ useState
useState }
} from
from 'react';

import {
{ HostedField
HostedField }
} from
from 'react-braintree-fields';

import {
{ BraintreePlugin
BraintreePlugin }
} from
from '../../../../../plugin/Braintree';


const Payment
Payment =
= ({
({ children,
children, ...props
...props })
}) =>
=> {

const [loading,
[loading, setLoading]
setLoading] =
= useState(false);

const fn
fn =
= ()
() =>
=> {


return Promise.resolve();



return (

<BraintreePlugin {...props}>

{pay =>


() =>


.then(() =>
=> pay())

.then(x =>
=> {


return x;


.catch(x =>
=> {


return Promise.reject(x);


{ loading
loading }






Payment.UI =
= ()
() =>
=> (


<HostedField type="number"
type="number" prefill="4111
prefill="4111 1111
1111 1111
1111 1111"
1111" />

<HostedField type="expirationMonth"
type="expirationMonth" />

<HostedField type="expirationYear"
type="expirationYear" />

<HostedField type="cvv"
type="cvv" placeholder="CVV"
placeholder="CVV" />




export default
default Payment;




id: contentful

title: Integrating
Integrating with
with Contentful
Contentful Part
Part 1

sidebar_label: Contentful
Contentful Part
Part 1

description: Deity
Deity Platform
Platform Contentful
Contentful integration

enterprise_only: true



<a href="https://www.contentful.com/"
href="https://www.contentful.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Contentful
Contentful site">

<img src="/img/docs/platform/contentful-logo.svg"
src="/img/docs/platform/contentful-logo.svg" alt="Contentful
alt="Contentful Logo"
Logo" width="200"
width="200" style={{
style={{ margin:
margin: '0
'0 0
0 40px'
40px' }}
}} />



In this
this tutorial
tutorial we
we will
will implement
implement a
a **basic**
**basic** integration
integration with
with <a
<a href="https://www.contentful.com"
href="https://www.contentful.com" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Contentful</a>.


Contentful provide
provide a
a few
few ways
ways to
to get
get data,
data, including
including **GraphQL**.
**GraphQL**. In
In this
this tutorial
tutorial we
we will
will be
be using
using **REST**
**REST** as
as it's
it's included
included in
in all
all their
their plans.


:::note Read
Read this
this first

We recommend
recommend you
you go
go through
through [the
[the json
json placeholder](jsonplaceholder)
placeholder](jsonplaceholder) example
example first
first as
as it
it explains
explains the
the basics
basics of
of writing
writing an
an extension
extension and
and we
we will
will be
be skipping
skipping past
past a
a few
few details.



## Overview


We will
will get
get 'course'
'course' information
information from
from <a
<a href="https://www.contentful.com/"
href="https://www.contentful.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank">Contentfuls</a>
target="_blank">Contentfuls</a> example
example data.


We will
will be
be explaining
explaining how
how to
to add
add API
API auth
auth details
details to
to your
your Deity
Deity Cloud
Cloud instances
instances and
and to
to your
your `server/config/local.json`
`server/config/local.json` file.


## 1.
1. Getting
Getting set
set up
up with
with Contentful


### i.
i. Create
Create an
an account


If you
you don't
don't already
already have
have a
a Contentful
Contentful you'll
you'll have
have to
to create
create one.
one. This
This is
is easy
easy and
and they
they have
have free
free plans
plans if
if you're
you're just
just testing
testing it
it out.


### ii.
ii. Set
Set up
up your
your content
content model


This tutorial
tutorial focuses
focuses on
on getting
getting a
a **course**
**course** content
content model.
model. This
This comes
comes as
as part
part of
of their
their example
example data.
data. If
If you're
you're not
not using
using this
this model
model a
a few
few details
details later
later on
on may
may vary.


![contentful content
content model](/img/docs/platform/contentful-data.png)


### iii.
iii. Add
Add some
some content
content entries


Once you've
you've got
got your
your content
content model
model setup
setup you'll
you'll need
need to
to add
add some
some content.
content. Again
Again we
we are
are using
using the
the sample
sample data
data that
that comes
comes with
with 2
2 'courses'
'courses' ('Hello
('Hello Contentful'
Contentful' &
& 'Hello
'Hello SDKs').


### iiii.
iiii. Get
Get your
your credentials


The last
last thing
thing you'll
you'll need
need to
to do
do on
on Contentfuls
Contentfuls side
side is
is get
get your
your credentials.


You'll need
need your:


- Content
Content Delivery
Delivery API
API key

- Space
Space ID

- Environment
Environment ID

- Content
Content Type
Type ID


You can
can get
get all
all of
of these
these from
from your
your admin.


![contentful admin](/img/docs/platform/contentful-admin.png)


You can
can get
get your
your `Content
`Content Delivery
Delivery API
API Key`
Key` and
and `Space
`Space ID`
ID` from
from the
the API
API keys
keys section
section in
in your
your dashboard.


Your `Environment
`Environment ID`
ID` from
from the
the environments
environments section.
section. If
If you're
you're using
using sample
sample data,
data, this
this is
is **master**.


To get
get your
your `Content
`Content Type
Type ID`
ID` go
go to
to your
your content
content model
model and
and it
it will
will be
be in
in the
the sidebar.
sidebar. Using
Using the
the sample
sample data
data it
it will
will be
be **course**.


## 2.
2. Creating
Creating your
your API
API and
and Extension
Extension packages


:::note Want
Want to
to test
test your
your API
API outside
outside of
of Falcon
Falcon Platform?

Contentful have
have a
a really
really handy
handy <a
<a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-types/content-type/get-a-single-content-type/console"
href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-types/content-type/get-a-single-content-type/console" rel="noopener
rel="noopener noreferrer"
noreferrer" target="_blank">API
target="_blank">API testing
testing tool</a>
tool</a> as
as part
part of
of their
their docs
docs meaning
meaning you
you don't
don't need
need to
to use
use a
a tool
tool like
like <a
<a href="https://www.postman.com/"
href="https://www.postman.com/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Postman</a>.



[The json
json placeholder](jsonplaceholder)
placeholder](jsonplaceholder) example
example covers
covers this
this section
section in
in more
more detail.


### i.
i. Create
Create your
your extension
extension and
and API
API files


You'll need
need to
to create
create the
the following
following files:





local.json (this
(this might
might already
already exist)









### ii.
ii. Register
Register you
you API
API and
and extension


These are
are registered
registered in
in your
your `server/config/default.json`.
`server/config/default.json`. Remember
Remember the
the api
api passed
passed to
to the
the extension
extension must
must match
match the
the name
name defined
defined in
in the
the api,
api, in
in this
this case
case `contentful`.







"apis": {


"contentful": {

"package": "./src/falcon-contentful-api/index.js",

"config": {

"host": "cdn.contentful.com",

"protocol": "https"




"extensions": {


"falcon-content-extension": {

"package": "./src/falcon-content-extension",

"config": {

"api": "contentful"







### iii.
iii. Create
Create your
your extension





module.exports =
= ()
() =>
=> ({});






extend type
type Query
Query {

courses: Courses!
Courses! @cache(ttl:
@cache(ttl: 15)



type Courses
Courses {

items: [Course]



type Course
Course {

fields: CourseData



type CourseData
CourseData {

title: String

description: String




**n.b.** We're
We're only
only adding
adding `title`
`title` and
and `description`
`description` to
to the
the course
course for
for now.
now. You
You could
could of
of course
course add
add what
what ever
ever fields
fields you
you need.


### iiii.
iiii. Create
Create your
your API
API files





const {
{ ApiDataSource
ApiDataSource }
} =
= require('@deity/falcon-server-env');


module.exports =
= class
class ContentfulApi
ContentfulApi extends
extends ApiDataSource
ApiDataSource {

async courses()
courses() {

const {
{ environment,
environment, spaceId,
spaceId, contentDeliveryApi
contentDeliveryApi }
} =
= this.config;

const query
query =
= {

access_token: contentDeliveryApi,

content_type: 'course'


const data
data =
= await
await this.get(`/spaces/${spaceId}/environments/${environment}/entries`,
this.get(`/spaces/${spaceId}/environments/${environment}/entries`, query);

const courseCollection
courseCollection =
= JSON.parse(data);


const {
{ items
items }
} =
= courseCollection;


return {







Notice we're
we're pulling
pulling details
details from
from our
our **config**
**config** (`const
(`const {
{ environment,
environment, spaceId,
spaceId, contentDeliveryApi
contentDeliveryApi }
} =
= this.config;`).


`this.config` has
has access
access to
to anything
anything passed
passed in
in `config:
`config: {}`
{}` in
in your
your json
json file.
file. We've
We've noted
noted added
added `environment`,
`environment`, `spaceId`
`spaceId` or
or `contentDeliveryApi`
`contentDeliveryApi` yet
yet but
but will
will in
in the
the next
next section.


The `content_type`
`content_type` const
const should
should be
be your
your **Content
**Content Type
Type ID**,
ID**, in
in our
our case
case it's
it's **course**.


## 3.
3. Adding
Adding your
your credentials
credentials locally


We don't
don't want
want to
to commit
commit our
our API
API keys
keys so,
so, for
for now
now we'll
we'll add
add these
these to
to a
a `server/config/local.json`.
`server/config/local.json`. This
This is
is merged
merged into
into your
your `default.json`
`default.json` but
but not
not committed
committed ([see
([see this
this doc
doc for
for more
more information](/platform/client/configuration)).


The name
name of
of the
the API
API needs
needs to
to be
be the
the same
same as
as in
in `server/config/default.json`.
`server/config/default.json`. In
In this
this case
case it's
it's `contentful`.







"apis": {

"contentful": {

"config": {

"spaceId": "[SPACE_ID]",

"contentDeliveryApi": "[CONTENT_DELIVERY_API]",

"environment": "[ENVIRONMENT_ID]"








## 4.
4. Testing
Testing your
your GraphQL


You're now
now ready
ready to
to test
test your
your extension.
extension. Make
Make sure
sure `falcon-server`
`falcon-server` is
is up
up and
and running.


To use
use this
this tool
tool it
it must
must be
be running
running on
on port
port `4000`
`4000` (`http://localhost/4000/graphql`).




style={{ width:
width: '100%',
'100%', height:
height: '500px',
'500px', border:
border: 0,
0, borderRadius:
borderRadius: '4px',
'4px', overflow:
overflow: 'hidden'
'hidden' }}


allow="geolocation; microphone;
microphone; camera;
camera; midi;
midi; vr;
vr; accelerometer;
accelerometer; gyroscope;
gyroscope; payment;
payment; ambient-light-sensor;
ambient-light-sensor; encrypted-media;
encrypted-media; usb"

sandbox="allow-modals allow-forms
allow-forms allow-popups
allow-popups allow-scripts
allow-scripts allow-same-origin"



## 5.
5. Using
Using your
your data
data in
in Falcon
Falcon Client


As before,
before, this
this section
section is
is largely
largely covered
covered in
in [the
[the json
json placeholder](jsonplaceholder)
placeholder](jsonplaceholder) example.


We will
will need
need to
to create
create the
the following
following files
files in
in `client`.






|- Course






`client/src/components/Course/index.js` is
is just
just used
used to
to export
export the
the other
other files.





export *
* from
from './CourseList';

export *
* from
from './CourseListQuery';



### i.
i. Get
Get your
your data





import gql
gql from
from 'graphql-tag';

import {
{ Query
Query }
} from
from '@deity/falcon-data';


const GET_COURSE_LIST
GET_COURSE_LIST =
= gql`

query CourseList
CourseList {

course {

items {

fields {









export class
class TodoListQuery
TodoListQuery extends
extends Query
Query {

static defaultProps
defaultProps =
= {

query: GET_COURSE_LIST





### ii.
ii. Use
Use your
your data





import React
React from
from 'react';

import {
{ CourseListQuery
CourseListQuery }
} from
from './CourseListQuery';


export const
const CourseList
CourseList =
= ()
() =>
=> {

return (



{({ data:
data: {
{ course
course =
= {}
{} }
} })
}) =>
=> {

const {
{ items
items =
= []
[] }
} =
= course;

if (items.length)
(items.length) {

const courseItems
courseItems =
= items.map(item
items.map(item =>
=> {

const {
{ fields
fields }
} =
= item;

return (








return <ul>{courseItems}</ul>;


return null;








Now you've
you've created
created your
your `<CourseList>`
`<CourseList>` component,
component, if
if you
you want
want to
to see
see it
it on
on the
the frontend
frontend you'll
you'll need
need to
to include
include it
it somewhere.


## 6.
6. Moving
Moving your
your credentials
credentials to
to your
your environment


In [step
[step 3](#3-adding-your-credentials-locally)
3](#3-adding-your-credentials-locally) we
we added
added our
our API
API keys
keys to
to our
our `config/local.json`
`config/local.json` file.
file. This
This isn't
isn't committed
committed so
so won't
won't work
work anywhere
anywhere other
other than
than locally.


To use
use this
this config
config on
on a
a remote
remote environment
environment we
we will
will want
want to
to use
use a
a `server/config/custom-environment-variables.json`
`server/config/custom-environment-variables.json` file.


Learn about
about our
our config
config files
files [here](/platform/client/configuration).


### i.
i. Add
Add our
our aliases
aliases to
to custom-environment-variables.json


In this
this file
file we
we add
add aliases
aliases for
for config
config variables.
variables. To
To avoid
avoid collisions
collisions we've
we've prefixed
prefixed ours
ours with
with `CONTENTFUL`.





"apis": {

"contentful": {

"config": {

"spaceId": "CONTENTFUL_SPACE_ID",

"contentDeliveryApi": "CONTENTFUL_CONTENT_DELIVERY_API",

"environment": "CONTENTFUL_ENVIRONMENT_ID"







### ii.
ii. Set
Set our
our variable
variable values
values on
on the
the server.


If you're
you're using
using Deity
Deity Cloud
Cloud then
then this
this is
is very
very easy,
easy, [see](/platform/cloud/dcloud#environment-variable).


Log into
into your
your cloud
cloud box
box and
and run
run the
the following
following command.



dcloud env:var
env:var <env>
<env> <name>
<name> [value]



In our
our case...



dcloud env:var
env:var production
production CONTENTFUL_ENVIRONMENT_ID
CONTENTFUL_ENVIRONMENT_ID master

dcloud env:var
env:var production
production CONTENTFUL_SPACE_ID
CONTENTFUL_SPACE_ID [your
[your id
id here]

dcloud env:var
env:var production
production CONTENTFUL_CONTENT_DELIVERY_API
CONTENTFUL_CONTENT_DELIVERY_API [your
[your api
api key
key here]



## 7.
7. Finished


That's it,
it, you
you now
now have
have a
a **basic**
**basic** integration
integration with
with Contentful.
Contentful. Contentful
Contentful is
is a
a really
really powerful
powerful tool
tool and
and the
the integration
integration possibilities
possibilities are
are endless
endless but
but the
the principle
principle should
should always
always remain
remain the
the same.


Happy coding.


id: jsonplaceholder

title: Integrating
Integrating with
with Json
Json Placeholder

sidebar_label: Json
Json Placeholder

description: Deity
Deity Platform
Platform Json
Json Placeholder
Placeholder integration

enterprise_only: true



In this
this tutorial
tutorial we
we will
will implement
implement a
a **basic**
**basic** integration
integration with
with <a
<a href="https://jsonplaceholder.typicode.com/"
href="https://jsonplaceholder.typicode.com/" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">Json
noreferrer">Json Placeholder</a>.


We will
will create
create a
a **Todo
**Todo list**
list** based
based on
on the
the data
data from
from <a
<a href="https://jsonplaceholder.typicode.com/todos"
href="https://jsonplaceholder.typicode.com/todos" target="_blank"
target="_blank" rel="noopener
rel="noopener noreferrer">here</a>.


For detailed
detailed information
information about
about integrating
integrating with
with new
new APIs
APIs please
please [read
[read these
these docs](/v2019/platform/falcon-server/customizing-extension-api).


## Overview


To add
add a
a new
new data
data type
type from
from a
a new
new data
data source
source we
we will
will need
need to
to integrate
integrate with
with a
a few
few of
of Falcon
Falcon Platform's
Platform's concepts.


- APIs
APIs (to
(to fetch
fetch the
the data)

- Extensions
Extensions (to
(to format
format the
the data
data using
using GraphQL)

- Queries
Queries (to
(to decide
decide what
what data
data is
is needed)

- Components
Components (to
(to render
render the
the data
data on
on the
the frontend)


**n.b.** In
In this
this tutorial
tutorial we
we will
will be
be adding
adding everything
everything directly
directly into
into our
our repository
repository `client/src`
`client/src` and
and `server/src`.
`server/src`. If
If you
you plan
plan to
to reuse
reuse your
your functionality
functionality it's
it's highly
highly recommended
recommended you
you add
add it
it to
to your
your own
own `NPM`
`NPM` packages.


## 1.
1. Add
Add your
your API
API connection


We need
need to
to create
create the
the file
file `server/src/falcon-jsonplaceholder-api/index.js`.


Notice the
the naming
naming convention
convention `[package]-[datasource]-api`.


In this
this file
file we
we create
create our
our `fetch`
`fetch` requests
requests to
to the
the API.





const {
{ ApiDataSource
ApiDataSource }
} =
= require('@deity/falcon-server-env');


module.exports =
= class
class JsonPlaceholderApi
JsonPlaceholderApi extends
extends ApiDataSource
ApiDataSource {

async todoList(_,
todoList(_, {
{ pagination
pagination })
}) {

const query
query =
= {};


if (pagination)
(pagination) {

query._limit =
= pagination.perPage;

query._start =
= pagination.page;



const todos
todos =
= await
await this.get('todos',
this.get('todos', query);


return {

items: todos




async todo(_,
todo(_, {
{ id
id })
}) {

return this.get(`todos/${id}`);





There is
is a
a lot
lot going
going on
on here,
here, some
some of
of which
which will
will be
be explained
explained later.
later. It's
It's important
important we
we extend
extend `ApiDataSource`
`ApiDataSource` so
so our
our core
core packages
packages can
can do
do the
the heavy
heavy lifting.


## 2.
2. Add
Add your
your extension
extension and
and GraphQL
GraphQL schema


Now we
we need
need to
to add
add our
our extension.
extension. You'll
You'll need
need to
to create
create 2
2 files:










Again, notice
notice the
the naming
naming convention.
convention. `[package]-[data_type]-extension`.
`[package]-[data_type]-extension`. Unlike
Unlike the
the API
API package,
package, we
we name
name this
this based
based on
on the
the data
data type
type not
not the
the source.
source. This
This is
is because,
because, we
we may
may at
at any
any point
point want
want to
to swap
swap out
out the
the source
source but
but use
use the
the same
same extension.


The `index.js`
`index.js` file
file can
can look
look like
like this:





module.exports =
= ()
() =>
=> ({});



At this
this point
point we
we don't
don't need
need to
to do
do anything
anything custom
custom here.
here. Provided
Provided our
our queries
queries are
are named
named correctly
correctly (see
(see below)
below) they
they will
will be
be mapped
mapped automatically
automatically to
to our
our API
API methods.


Your `schema.graphql`
`schema.graphql` file
file should
should look
look like
like this:





extend type
type Query
Query {

todoList(pagination: PaginationInput):
PaginationInput): TodoList!
TodoList! @cache(ttl:
@cache(ttl: 15)

todo(id: ID!):
ID!): Todo!
Todo! @cache(ttl:
@cache(ttl: 15)



type TodoList
TodoList {

items: [Todo!]!

pagination: Pagination



type Todo
Todo {

userId: Int

id: ID

title: String

completed: Boolean




In this
this file
file we
we are
are defining
defining what
what each
each query
query should
should accept
accept and
and return.


**The magic
magic part...**
part...** notice
notice the
the name
name of
of our
our 2
2 queries,
queries, they
they are
are named
named `todoList`
`todoList` and
and `todo`.

Now go
go back
back and
and look
look at
at `server/src/falcon-jsonplaceholder-api/index.js`.

You will
will notice
notice that
that the
the methods
methods share
share the
the same
same name,
name, if
if you
you keep
keep the
the name
name the
the same
same these
these methods
methods will
will be
be bound
bound automatically.


### Pagination


We are
are passing
passing `PaginationInput`
`PaginationInput` to
to our
our `todoList`
`todoList` query
query but
but not
not defining
defining it.
it. This
This is
is already
already defined
defined in
in `@deity/falcon-data/src/Pagination/Pagination.ts`.


It contains
contains to
to bits
bits of
of information
information `perPage`
`perPage` and
and `page`.





export type
type PaginationInput
PaginationInput =
= {

perPage: number,

page: number




We map
map these
these to
to query
query parameters
parameters in
in `server/src/falcon-jsonplaceholder-api/index.js`.





if (pagination)
(pagination) {

query._limit =
= pagination.perPage;

query._start =
= pagination.page
pagination.page *
* pagination.perPage;


return this.get('todos',
this.get('todos', query);



The end
end result
result is
is `https://jsonplaceholder.typicode.com/todos?_limit=[perPage]&_start=[page]`


## 3.
3. Include
Include your
your extension
extension and
and API


Now we've
we've added
added our
our files
files we
we need
need to
to make
make sure
sure `falcon-server`
`falcon-server` is
is using
using them
them and
and they
they are
are mapped
mapped together.


This is
is done
done in
in your
your `server/config/default.json`
`server/config/default.json` file.







"apis": {


"jsonplaceholder": {

"package": "./src/falcon-jsonplaceholder-api/index.js",

"config": {

"host": "jsonplaceholder.typicode.com",

"protocol": "https"




"extensions": {


"falcon-todos-extension": {

"package": "./src/falcon-todos-extension",

"config": {

"api": "jsonplaceholder"







In this
this file
file we
we define
define our
our API
API (`jsonplaceholder`)
(`jsonplaceholder`) and
and pass
pass this
this to
to our
our extensions
extensions config
config `"api":
`"api": "jsonplaceholder"`.


Within the
the API
API config
config we've
we've also
also defined
defined `host`
`host` and
and `protocol`.
`protocol`. These
These are
are used
used automatically
automatically by
by the
the `get`
`get` functions
functions in
in `server/src/falcon-jsonplaceholder-api/index.js`.


## 4.
4. Test
Test your
your graphQL


You should
should be
be all
all set
set to
to test
test your
your extension
extension now.


If you've
you've got
got `falcon-server`
`falcon-server` running
running and
and it's
it's on
on port
port `4000`
`4000` (this
(this is
is the
the default
default port)
port) then
then you
you can
can test
test your
your queries
queries here.
here. If
If you
you get
get results
results returned
returned then
then you're
you're in
in business.




style={{ width:
width: '100%',
'100%', height:
height: '500px',
'500px', border:
border: 0,
0, borderRadius:
borderRadius: '4px',
'4px', overflow:
overflow: 'hidden'
'hidden' }}


allow="geolocation; microphone;
microphone; camera;
camera; midi;
midi; vr;
vr; accelerometer;
accelerometer; gyroscope;
gyroscope; payment;
payment; ambient-light-sensor;
ambient-light-sensor; encrypted-media;
encrypted-media; usb"

sandbox="allow-modals allow-forms
allow-forms allow-popups
allow-popups allow-scripts
allow-scripts allow-same-origin"



## 5.
5. Accessing
Accessing your
your data
data in
in Falcon
Falcon Client.


Now we
we need
need to
to create
create query
query components.
components. You
You will
will often
often see
see these
these named
named like
like `[package]-[data_type]-data`
`[package]-[data_type]-data` e.g.
e.g. `falcon-blog-data`.


Because we
we aren't
aren't adding
adding our
our code
code to
to `NPM`
`NPM` packages
packages we
we are
are going
going to
to add
add the
the code
code to
to our
our `client/src/components`
`client/src/components` directory.






|- Todo






Our `index.js`
`index.js` file
file will
will just
just be
be used
used to
to export
export our
our components.





export *
* from
from './TodoListQuery';

export *
* from
from './TodoItemQuery';



We now
now need
need to
to create
create a
a `Query`
`Query` component
component for
for each
each data
data type,
type, `TodoItem`
`TodoItem` and
and `TodoList`.





import gql
gql from
from 'graphql-tag';

import {
{ Query
Query }
} from
from '@deity/falcon-data';


const GET_TODO_ITEM
GET_TODO_ITEM =
= gql`

query TodoItem($id:
TodoItem($id: ID!)
ID!) {

todo(id: $id)
$id) {







export class
class TodoItemQuery
TodoItemQuery extends
extends Query
Query {

static defaultProps
defaultProps =
= {

query: GET_TODO_ITEM





In this
this file
file we
we define
define our
our GraphQL
GraphQL query
query and
and pass
pass it
it to
to our
our component
component that
that extends
extends `import
`import {
{ Query
Query }
} from
from '@deity/falcon-data'`.


We are
are just
just grabbing
grabbing `title`
`title` and
and `completed`
`completed` but
but if
if you
you want
want the
the `id`
`id` or
or `userId`
`userId` defined
defined in
in our
our `server/src/falcon-todos-extension/schema.graphql`
`server/src/falcon-todos-extension/schema.graphql` you
you can.


Our `TodoListQuery`
`TodoListQuery` looks
looks very
very similar:





import gql
gql from
from 'graphql-tag';

import {
{ Query
Query }
} from
from '@deity/falcon-data';


const GET_TODO_LIST
GET_TODO_LIST =
= gql`

query TodoList($pagination:
TodoList($pagination: PaginationInput)
PaginationInput) {

todoList(pagination: $pagination)
$pagination) {

items {








export class
class TodoListQuery
TodoListQuery extends
extends Query
Query {

static defaultProps
defaultProps =
= {

query: GET_TODO_LIST





## 6.
6. Rendering
Rendering your
your data
data in
in a
a component


Let's use
use our
our data
data in
in some
some components...


<img src="/img/docs/platform/todolist.png"
src="/img/docs/platform/todolist.png" alt="todo
alt="todo list
list component"
component" width="300"
width="300" style={{
style={{ margin:
margin: '20px
'20px 0'
0' }}
}} />


For this
this we
we need
need to
to create
create 2
2 more
more components.






|- Todo





We also
also need
need to
to export
export them
them from
from our
our `index.js`
`index.js` file.






export *
* from
from './TodoList';

export *
* from
from './TodoItem';



### Todo
Todo Item
Item Component





import React
React from
from 'react';

import {
{ TodoItemQuery
TodoItemQuery }
} from
from './TodoItemQuery';


export const
const TodoItem
TodoItem =
= ({
({ todoId
todoId })
}) =>
=> {

return (


<TodoItemQuery variables={{
variables={{ id:
id: todoId
todoId }}>

{({ data:
data: {
{ todo
todo }
} })
}) =>
=> {

if (todo)
(todo) {

return <h1>{todo.title}</h1>;



return null;








There is
is a
a few
few things
things going
going on
on here.
here. We
We import
import our
our `TodoItemQuery`
`TodoItemQuery` component.


This accepts
accepts a
a `variables`
`variables` prop.
prop. This
This is
is an
an object
object of
of variables
variables that
that are
are passed
passed to
to our
our query.
query. In
In this
this case,
case, the
the ID
ID of
of our
our todo.


Each query
query returns
returns `data`,
`data`, this
this returns
returns the
the response
response from
from our
our query...in
query...in our
our case,
case, `todo`.


### Todo
Todo List
List Component





import React
React from
from 'react';

import {
{ TodoListQuery
TodoListQuery }
} from
from './TodoListQuery';


export const
const TodoList
TodoList =
= ({
({ pagination
pagination =
= {}
{} })
}) =>
=> {

return (


<TodoListQuery variables={{
variables={{ pagination
pagination }}>

{({ data:
data: {
{ todoList
todoList =
= {}
{} }
} })
}) =>
=> {

const {
{ items
items =
= []
[] }
} =
= todoList;

if (items.length)
(items.length) {

const todoItems
todoItems =
= items.map(item
items.map(item =>
=> {

const {
{ completed,
completed, title
title }
} =
= item;

return completed
completed ?
? (


) :
: (







return <ul>{todoItems}</ul>;


return null;








This works
works in
in exactly
exactly the
the same
same way
way as
as our
our `TodoItem`
`TodoItem` component.


## 7.
7. Use
Use our
our components.


We've done
done all
all the
the hard
hard work,
work, we
we now
now just
just need
need to
to use
use our
our components
components somewhere
somewhere in
in our
our application.


To access
access our
our component
component in
in an
an standardized
standardized way
way we
we will
will first
first export
export it
it to
to the
the component
component root.






export *
* from
from './Todo';



Now that
that it
it is
is available
available from
from the
the components
components directory
directory I'm
I'm going
going to
to add
add them
them to
to the
the homepage.






import {



} from
from '../../components';


const Home
Home =
= ()
() =>
=> {


return (

<PageLayout css={{
css={{ paddingTop:
paddingTop: 72,
72, paddingBottom:
paddingBottom: 72,
72, gridGap:
gridGap: 72
72 }}>


<TodoItem todoId={2}
todoId={2} />

<Divider variant="fullWidth"
variant="fullWidth" />

<TodoList pagination={{
pagination={{ perPage:
perPage: 9,
9, page:
page: 1
1 }}
}} />






export default
default Home;



## 8.
8. All
All done.


That's it.
it. You
You can
can use
use this
this same
same concept
concept to
to get
get data
data from
from any
any API.


id: contentful2

title: Integrating
Integrating with
with Contentful
Contentful Part
Part 2

sidebar_label: Contentful
Contentful Part
Part 2

description: Deity
Deity Platform
Platform Contentful
Contentful integration

enterprise_only: true



<a href="https://www.contentful.com/"
href="https://www.contentful.com/" rel="noreferrer
rel="noreferrer noopener"
noopener" target="_blank"
target="_blank" aria-label="visit
aria-label="visit the
the Contentful
Contentful site">

<img src="/img/docs/platform/contentful-logo.svg"
src="/img/docs/platform/contentful-logo.svg" alt="Contentful
alt="Contentful Logo"
Logo" width="200"
width="200" style={{
style={{ margin:
margin: '0
'0 0
0 40px'
40px' }}
}} />



In this
this tutorials
tutorials we
we will
will look
look at
at **dynamic
**dynamic routing**
routing** using
using the
the `extension`
`extension` from
from [part
[part 1](contentful).


## Overview


Using the
the `course`
`course` data
data from
from [part
[part 1](contentful)
1](contentful) we
we will
will make
make routes
routes like
like `https://your-site.com/course/course-name`
`https://your-site.com/course/course-name` render
render content
content for
for that
that course.


## 1.
1. Create
Create an
an API
API to
to access
access course
course data
data based
based on
on it's
it's ID


At the
the moment
moment we
we have
have a
a `courses`
`courses` query
query that
that allows
allows us
us to
to access
access all
all of
of the
the `courses`.
`courses`. We
We now
now want
want to
to create
create a
a `course`
`course` query
query so
so we
we can
can get
get a
a specific
specific `course`.


### i.
i. Add
Add to
to your
your API






async course(_,
course(_, {
{ id
id })
}) {

const {
{ environment,
environment, spaceId,
spaceId, contentDeliveryApi
contentDeliveryApi }
} =
= this.config;

const query
query =
= {

access_token: contentDeliveryApi,

content_type: 'course'


const data
data =
= await
await this.get(`/spaces/${spaceId}/environments/${environment}/entries/${id}`,
this.get(`/spaces/${spaceId}/environments/${environment}/entries/${id}`, query);

return JSON.parse(data);





### ii.
ii. Add
Add to
to your
your extensions
extensions GraphQL
GraphQL Schema


We will
will also
also need
need to
to add
add this
this query
query to
to our
our GraphQL
GraphQL schema.





extend type
type Query
Query {

courses: Courses!
Courses! @cache(ttl:
@cache(ttl: 15)

course(id: ID!):
ID!): Course!
Course! @cache(ttl:
@cache(ttl: 15)





### iii.
iii. Test
Test your
your endpoint.


You should
should now
now be
be able
able to
to test
test your
your GraphQL.
GraphQL. Make
Make sure
sure `falcon-server`
`falcon-server` is
is running
running and
and is
is on
on `https://localhost:4000/graphql`.


Also remember
remember to
to replace
replace `YOUR_CONTENT_ID`
`YOUR_CONTENT_ID` with
with your
your course
course ID.




style={{ width:
width: '100%',
'100%', height:
height: '500px',
'500px', border:
border: 0,
0, borderRadius:
borderRadius: '4px',
'4px', overflow:
overflow: 'hidden'
'hidden' }}


allow="geolocation; microphone;
microphone; camera;
camera; midi;
midi; vr;
vr; accelerometer;
accelerometer; gyroscope;
gyroscope; payment;
payment; ambient-light-sensor;
ambient-light-sensor; encrypted-media;
encrypted-media; usb"

sandbox="allow-modals allow-forms
allow-forms allow-popups
allow-popups allow-scripts
allow-scripts allow-same-origin"



## 2.
2. Create
Create your
your content
content query
query and
and component


You now
now need
need to
to create
create a
a component
component to
to access
access this
this data.


As before
before we
we want
want to
to add
add a
a content
content component
component and
and a
a query
query component.






|- Course









### i.
i. CourseQuery.js





import gql
gql from
from 'graphql-tag';

import {
{ Query
Query }
} from
from '@deity/falcon-data';


const GET_COURSE
GET_COURSE =
= gql`

query Course($id:
Course($id: ID!)
ID!) {

course(id: $id)
$id) {

fields {








export class
class CourseQuery
CourseQuery extends
extends Query
Query {

static defaultProps
defaultProps =
= {

query: GET_COURSE





At the
the moment
moment we
we are
are only
only querying
querying the
the title
title and
and description.
description. If
If you
you want
want more
more data
data you'd
you'd have
have to
to add
add it
it to
to `server/src/falcon-content-extension/schema.graphql`
`server/src/falcon-content-extension/schema.graphql` as
as well
well as
as your
your query
query here.


### ii.
ii. Course.js


At the
the moment
moment we
we just
just rendering
rendering the
the title,
title, description
description and
and changing
changing the
the page
page title.


Notice we
we are
are using
using `<Helmet>`
`<Helmet>` to
to change
change the
the page
page title.
title. To
To learn
learn more
more about
about this
this read
read how
how [falcon
[falcon manages
manages meta
meta data
data via
via helmet](/platform/client/meta-data).





import React
React from
from 'react';

import {
{ PageLayout
PageLayout }
} from
from '@deity/falcon-ui-kit';

import {
{ Helmet
Helmet }
} from
from 'react-helmet-async';

import {
{ CourseQuery
CourseQuery }
} from
from './CourseQuery';


const Course
Course =
= ({
({ match:
match: {
{ params
params }
} })
}) =>
=> {

const {
{ id
id }
} =
= params;

return (


<CourseQuery variables={{
variables={{ id
id }}>

{({ data:
data: {
{ course
course }
} })
}) =>
=> {

const {

fields: {
{ title,
title, description
description }

} =
= course;

return (
















export default
default Course;



## 3.
3. Return
Return URL
URL data
data from
from our
our API


`<SwitchDynamicURL>` is
is used
used for
for routing
routing in
in Falcon
Falcon Platform,
Platform, it's
it's worth
worth looking
looking at
at routing
routing details
details [here](/platform/client/routing).


All APIs
APIs that
that are
are registered
registered in
in our
our `server/config/default.json`
`server/config/default.json` and
and contain
contain **both**
**both** the
the below
below methods
methods will
will be
be checked.


- `fetchUrl`

- `getFetchUrlPriority`


`getFetchUrlPriority` is
is used
used to
to set
set priority
priority of
of your
your API.
API. You
You might
might want
want to
to alter
alter the
the priority
priority if
if you're
you're worried
worried about
about URLs
URLs clashing.
clashing. This
This is
is covered
covered in
in our
our [docs](/platform/client/routing).






module.exports =
= class
class ContentfulApi
ContentfulApi extends
extends ApiDataSource
ApiDataSource {



async getCourses()
getCourses() {

const {
{ environment,
environment, spaceId,
spaceId, contentDeliveryApi
contentDeliveryApi }
} =
= this.config;


const query
query =
= {

access_token: contentDeliveryApi,

content_type: 'course'



const data
data =
= await
await this.get(`/spaces/${spaceId}/environments/${environment}/entries`,
this.get(`/spaces/${spaceId}/environments/${environment}/entries`, query);

const courseCollection
courseCollection =
= JSON.parse(data);


const {
{ items
items }
} =
= courseCollection;


return items;



async fetchUrl(_,
fetchUrl(_, params)
params) {

const {
{ path
path }
} =
= params;


if (path.split('/')[1]
(path.split('/')[1] ===
=== 'course')
'course') {

const items
items =
= await
await this.getCourses();

const current
current =
= items.find(item
items.find(item =>
=> `/course/${item.fields.slug}`
`/course/${item.fields.slug}` ===
=== path);


if (current)
(current) {

const {
{ fields,
fields, sys
sys }
} =
= current;

return {

id: sys.id,

path: fields.slug,

type: 'content-course'




return null;



getFetchUrlPriority() {

return this.fetchUrlPriority;





There is
is quite
quite a
a bit
bit going
going on
on here.


### i.
i. getFetchUrlPriority


We are
are just
just returning
returning the
the default
default priority
priority set
set in
in `ApiDataSource`.


If you
you wanted
wanted to
to change
change this
this you
you could
could follow
follow a
a similar
similar pattern
pattern to
to the
the example
example below.
below. This
This returns
returns a
a low
low priority
priority for
for all
all urls
urls except
except 'hello'.





import {
{ ApiUrlPriority
ApiUrlPriority }
} from
from '@deity/falcon-server-env';


getFetchUrlPriority(path) {

return (path
(path ===
=== 'hello')
'hello') ?
? ApiUrlPriority.HIGH
ApiUrlPriority.HIGH :
: ApiUrlPriority.LOW;




### ii.
ii. fetchUrl


In this
this method
method we
we are
are checking
checking a
a few
few things.
things. Firstly
Firstly we
we are
are checking
checking the
the current
current path
path starts
starts with
with `course`.



if (path.split('/')[1]
(path.split('/')[1] ===
=== 'course')
'course') {



We then
then check
check all
all the
the courses
courses to
to see
see if
if any
any of
of them
them have
have a
a matching
matching `slug`.



const items
items =
= await
await this.getCourses();

const current
current =
= items.find(item
items.find(item =>
=> `/course/${item.fields.slug}`
`/course/${item.fields.slug}` ===
=== path);



If they
they match
match then
then we
we return
return an
an `FetchUrlResult`
`FetchUrlResult` object.





export interface
interface FetchUrlResult
FetchUrlResult {

id: string
string |
| number;

type: string;

path: string;

redirect: boolean;




In our
our case
case we
we don't
don't need
need to
to pass
pass a
a `redirect`
`redirect` so
so just
just pass
pass a
a `type`,
`type`, `id`
`id` and
and `path`.



return {

id: sys.id,

path: fields.slug,

type: 'content-course'




**If your
your URLs
URLs don't
don't match
match remember
remember to
to return
return null**


## 4.
4. Add
Add a
a `<Route>`
`<Route>` check
check for
for your
your content
content type.


Now we
we need
need to
to check
check for
for our
our type,
type, `content-course`.


In our
our example
example apps
apps the
the routing
routing is
is handled
handled in
in `client/src/App.js`.






import {
{ SwitchDynamicURL
SwitchDynamicURL }
} from
from '@deity/falcon-front-kit';


const Course
Course =
= loadable(()
loadable(() =>
=> import('./components/Course/Course'));



<Route exact
exact type="content-course"
type="content-course" component={Course}
component={Course} />





You will
will see
see here
here we
we pass
pass the
the prop
prop `type`
`type` to
to our
our `<Route>`.
`<Route>`. This
This will
will return
return the
the `Course`
`Course` component
component if
if the
the type
type matches.


**n.b. If
If your'e
your'e using
using `loadable`
`loadable` your
your component
component needs
needs to
to be
be the
the default
default export**


## 5.
5. Finished


That's it.
it. There
There is
is a
a lot
lot covered
covered in
in this
this short
short tutorial
tutorial and
and it's
it's highly
highly recommended
recommended to
to read
read up
up on
on routing
routing in
in more
more details.


id: packages

title: Our
Our Packages

sidebar_label: Our
Our Packages



Falcon Platform
Platform Ships
Ships with
with various
various `@deity`
`@deity` packages.


- [create-falcon-app](create-falcon-app)

- [falcon-blog-data](falcon-blog-data)

- [falcon-blog-extension](falcon-blog-extension)

- [falcon-client](falcon-client)

- [falcon-data](falcon-data)

- [falcon-dev-tools/babel-preset-falcon-client](babel-preset-falcon-client)

- [falcon-dev-tools/eslint-config-falcon](eslint-config-falcon)

- [falcon-dev-tools/falcon-i18n-webpack-plugin](falcon-i18n-webpack-plugin)

- [falcon-dev-tools/falcon-scripts](falcon-scripts)

- [falcon-dev-tools/normal-module-override-webpack-plugin](normal-module-override-webpack-plugin)

- [falcon-errors](falcon-errors)

- [falcon-front-kit](falcon-front-kit)

- [falcon-i18n](falcon-i18n)

- [falcon-logger](falcon-logger)

- [falcon-magento2-api](falcon-magento2-api)

- [falcon-payment-plugin](falcon-payment-plugin)

- [falcon-server-env](falcon-server-env)

- [falcon-server](falcon-server)

- [falcon-service-worker](falcon-service-worker)

- [falcon-shop-data](falcon-shop-data)

- [falcon-shop-extension](falcon-shop-extension)

- [falcon-theme-editor](falcon-theme-editor)

- [falcon-ui-kit](falcon-ui-kit)

- [falcon-ui](falcon-ui)

- [falcon-wordpress-api](falcon-wordpress-api)

- [payment/falcon-adyen-plugin](falcon-adyen-plugin)

- [payment/falcon-paypal-plugin](falcon-paypal-plugin)


There are
are a
a few
few naming
naming convensions
convensions that
that will
will help
help you
you understand
understand each
each package.


- `[PACKAGE]-[SERVICE]-api`
`[PACKAGE]-[SERVICE]-api` Packages
Packages named
named this
this way
way connect
connect to
to APIs.
APIs. An
An example
example is
is `falcon-wordpress-api`

- `[PACKAGE]-[TYPE]-extension`
`[PACKAGE]-[TYPE]-extension` These
These packages
packages handle
handle data
data from
from APIs.
APIs. `TYPE`
`TYPE` referes
referes to
to the
the data
data type
type e.g.
e.g. `blog`
`blog` or
or `shop`.

- `[PACKAGE]-[TYPE]-data`
`[PACKAGE]-[TYPE]-data` These
These packages
packages handle
handle the
the data
data from
from `extension`
`extension` packages.
packages. They
They usually
usually contain
contain components
components that
that pass
pass a
a GraphQL
GraphQL query
query to
to the
the extension
extension package.
package. `TYPE`
`TYPE` is
is the
the data
data type,
type, e.g.
e.g. `blog`.

- `[PACKAGE]-[TYPE/SERVICE]-plugin`
`[PACKAGE]-[TYPE/SERVICE]-plugin` These
These packages
packages usually
usually extend
extend their
their corresponding
corresponding extension.
 

id: magento2

title: Adobe
Adobe Magento
Magento CE

sidebar_label: Adobe
Adobe Magento
Magento CE


import M2Content
M2Content from
from "../composer/integration/magento2/overview.md"


<M2Content />
id: commercetools

title: CommerceTools

sidebar_label: CommerceTools



to do
id: contentful

title: Contentful

sidebar_label: Contentful



to do


id: talonone

title: TalonOne

sidebar_label: TalonOne



to do
id: algolia

title: Algolia

sidebar_label: Algolia



import AlgoliaContent
AlgoliaContent from
from "../composer/integration/algolia.md"


<AlgoliaContent />
id: humm

title: Humm

sidebar_label: Humm


import Content
Content from
from "../payments/providers/humm.md"


<Content />
id: shopware

title: Shopware

sidebar_label: Shopware



id: stripe

title: Stripe
Stripe Payments
 
sidebar_label: Stripe
 


import StripeContent
StripeContent from
from "../payments/providers/stripe.md"


<StripeContent />
id: wordpress

title: Wordpress

sidebar_label: Wordpress


import WPContent
WPContent from
from "../composer/integration/wordpress.md"


<WPContent />


id: bigcommerce

title: BigCommerce

sidebar_label: BigCommerce


import BCContent
BCContent from
from "../composer/integration/bigcommerce/overview.md"


<BCContent />
id: integrations

title: Integrations

hide_table_of_contents: true



import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Badge
Badge from
from '@site/src/components/Badge';

import LogoImg
LogoImg from
from '/img/logo.svg';




<h3>Unlock the
the full
full potential
potential of
of your
your e-commerce
e-commerce business
business with
with our
our powerful
powerful integrations.</h3>


<div className="flex">

	<Card to="/integrations/magento2">

<div className="round-icon">

<img src="/img/icons/magento.svg"
src="/img/icons/magento.svg" />


<h4>Adobe Commerce
Commerce CE</h4>

<p>The experience
experience makes
makes all
all the
the difference.
difference. Grow
Grow with
with Adobe
Adobe Commerce
Commerce CE.</p>


<Card to="/integrations/bigcommerce">

<div className="round-icon">

<img src="/img/icons/bigcommerce.svg"
src="/img/icons/bigcommerce.svg" />




Learn how
how BigCommerce
BigCommerce powers
powers your
your business
business with
with enterprise
enterprise ecommerce
ecommerce capabilities—with
capabilities—with lower
lower cost
cost and
and complexity.



<Card to="/integrations/commercetools">

<div className="round-icon">

<img src="/img/icons/commercetools.svg"
src="/img/icons/commercetools.svg" />



<p>Built for
for businesses
businesses that
that require
require unlimited
unlimited flexibility
flexibility and
and infinite
infinite scale
scale at
at lower
lower costs.</p>



<div className="flex">

<Card status="soon">

<div className="round-icon">

<img src="/img/icons/shopware.svg"
src="/img/icons/shopware.svg" />



<p>Comprehensive ecommerce
ecommerce solutions
solutions for
for all
all your
your B2C
B2C and
and B2B
B2B needs.</p>


  
<Card to="/integrations/algolia">

<div className="round-icon">

<img src="/img/icons/algolia.svg"
src="/img/icons/algolia.svg" />




Powering Discovery
Discovery for
for your
your world.



<Card to="/integrations/unbxd">

<div className="round-icon">

<img src="/img/icons/unbxd.svg"
src="/img/icons/unbxd.svg" />



<p>Build retail
retail stores
stores for
for the
the future
future with
with AI-powered
AI-powered search,
search, merchandizing,
merchandizing, personalized
personalized recommendations
recommendations and
and PIM.</p>



<div className="flex">

<Card to="/integrations/mollie">

<div className="round-icon">

<img src="/img/icons/mollie.svg"
src="/img/icons/mollie.svg" />



<p>An advanced
advanced solution
solution to
to accept
accept payments,
payments, optimise
optimise conversion,
conversion, and
and access
access funding.</p>


<Card to="/integrations/stripe">

<div className="round-icon">

<img src="/img/icons/stripe.svg"
src="/img/icons/stripe.svg" />



<p>Payments infrastructure
infrastructure for
for the
the internet.</p>


<Card to="/integrations/adyen">

<div className="round-icon">

<img src="/img/icons/adyen.svg"
src="/img/icons/adyen.svg" />




End-to-end payments,
payments, data,
data, and
and financial
financial management
management in
in a
a single
single solution.
 

  


<div className="flex">

<Card to="/integrations/humm">

<div className="round-icon">

<img src="/img/icons/humm.svg"
src="/img/icons/humm.svg" />



<p>Buy Now,
Now, Pay
Pay Later
Later with
with big
big limits,
limits, big
big range
range and
and big
big time
time to
to pay.</p>


<Card to="/integrations/talonone">

<div className="round-icon">

<img src="/img/icons/talonone.svg"
src="/img/icons/talonone.svg" />



<p>The Loyalty
Loyalty &
& Promotion
Promotion Engine.
Engine. Better
Better incentives,
incentives, better
better outcomes</p>


<Card to="/integrations/talonone">

<div className="round-icon">

<img src="/img/icons/wpay.svg"
src="/img/icons/wpay.svg" />



<p> Discover
Discover how
how Wpay
Wpay grows
grows businesses
businesses through
through payment
payment experiences.</p>


  



<div className="flex
className="flex mb100">

<Card to="/integrations/contentful">

<div className="round-icon">

<img src="/img/icons/contentful.svg"
src="/img/icons/contentful.svg" />



<p>Build captivating
captivating experiences
experiences that
that stand
stand out
out with
with the
the intelligent
intelligent composable
composable content
content platform.</p>


<Card to="/integrations/wordpress">

<div className="round-icon">

<img src="/img/icons/wordpress.svg"
src="/img/icons/wordpress.svg" />



<p>Build and
and grow
grow your
your website
website with
with the
the best
best way
way to
to WordPress.
WordPress. </p>




<div className="flex">




id: payments

title: Payments

hide_title: true



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem,
TabItem, ChangelogItem
ChangelogItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';




<h1 className="headline
className="headline mb20">Integrate
mb20">Integrate with
with multiple
multiple payment
payment service
service providers
providers to
to use
use any
any payment
payment method</h1>

<p className="desc">

DPSG (Deity
(Deity Payment
Payment Service
Service Gateway)
Gateway) is
is a
a managed
managed and
and hosted
hosted service
service that
that handles
handles interactions
interactions between
between Falcon
Falcon Platform
Platform and
and payment
payment providers.

Next to
to handling
handling the
the full
full payment
payment flow,
flow, DPSG
DPSG is
is also
also a
a way
way to
to manage
manage the
the configuration
configuration of
of your
your payment
payment providers
providers and
and methods
methods used
used by
by your
your Falcon
Falcon App.



### Don't
Don't have
have an
an account
account yet?

<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

Sign up
up for
for an
an account
account &nbsp;

<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>



<div className="mb60"></div>




## Start
Start Right
Right Away

<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/payments/key-concepts">

<img src="/img/icons/info.svg"
src="/img/icons/info.svg" />

<h4>Key concepts</h4>

<p>Learn the
the basics
basics behind
behind Deity
Deity Payment
Payment Service
Service Gateway.</p>


<Card to="/payments/getting-started">

<img src="/img/icons/lightning.svg"
src="/img/icons/lightning.svg" />

<h4>Getting started</h4>

<p>Jump right
right in
in and
and get
get started
started with
with Deity
Deity Payment
Payment Service
Service Gateway.</p>


<Card to="/platform/support/tutorials">

<img src="/img/icons/lightbulb.svg"
src="/img/icons/lightbulb.svg" />


<p>Learn by
by doing
doing by
by following
following practical
practical tutorials.</p>






## Payment
Payment Options

<h3 className="mt0">Payment
className="mt0">Payment Providers
Providers <Button
<Button variant="outline"
variant="outline" size="medium"
size="medium" href="/payments/providers">View
href="/payments/providers">View all
all →</Button></h3>


<div className="flex
className="flex ">

<Card variant="horizontal"
variant="horizontal" to="/payments/providers/stripe">

	<img src="/img/icons/stripe.svg"
src="/img/icons/stripe.svg" className="round-icon"
className="round-icon" />




        



<Card variant="horizontal"
variant="horizontal" to="/payments/providers/adyen">

<img src="/img/icons/adyen.svg"
src="/img/icons/adyen.svg" className="round-icon"
className="round-icon" />




        




<div className="flex
className="flex mb60">

<Card variant="horizontal"
variant="horizontal" to="/payments/providers/mollie">

<img src="/img/icons/mollie.svg"
src="/img/icons/mollie.svg" className="round-icon"
className="round-icon" />




        



<Card variant="horizontal"
variant="horizontal" to="/payments/providers/humm">

<img src="/img/icons/humm.svg"
src="/img/icons/humm.svg" className="round-icon"
className="round-icon" />




        





<h3 className="mt0">Payment
className="mt0">Payment Features
Features <Button
<Button variant="outline"
variant="outline" size="medium"
size="medium" href="/payments/methods/overview">View
href="/payments/methods/overview">View all
all →</Button></h3>


<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/payments/methods/overview">

<img src="/img/icons/creditcard.svg"
src="/img/icons/creditcard.svg" />


<h5>Payment Methods</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/payments/methods/features/currencies">

<img src="/img/icons/dollar.svg"
src="/img/icons/dollar.svg" />




        




<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/payments/methods/features/locations">

<img src="/img/icons/globe.svg"
src="/img/icons/globe.svg" />




        



<Card variant="horizontal"
variant="horizontal" to="/payments/methods/features/surcharges">

<img src="/img/icons/surcharges.svg"
src="/img/icons/surcharges.svg" />




        




<div className="flex
className="flex brighten
brighten mb100">

<Card variant="horizontal"
variant="horizontal" to="/payments/methods/features/min-max-amounts">

<img src="/img/icons/sliders.svg"
src="/img/icons/sliders.svg" />


<h5>Min /
/ Max
Max Amount</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/payments/methods/features/sort">

<img src="/img/icons/sort.svg"
src="/img/icons/sort.svg" />


<h5>Sort Order</h5>


        






## API
API Reference



<div className="flex
className="flex mb100">

<Card >

<img src="/img/icons/swagger.svg"/>

<h4>Rest Endpoints</h4>

<p className="mb20">To
className="mb20">To view
view all
all the
the available
available endpoints
endpoints and
and schemas,
schemas, please
please visit
visit our
our dedicated
dedicated Payments
Payments API
API documentation.</p>

		 <Button
<Button variant="contained"
variant="contained" size="medium"
size="medium" href="https://dpsg.deity.cloud/"
href="https://dpsg.deity.cloud/" target="_blank">

Go to
to API
API reference

<svg width="15"
width="15" height="15"
height="15" aria-hidden="true"
aria-hidden="true" viewBox="0
viewBox="0 0
0 15
15 15"
15" class="iconExternalLink_src-theme-Icon-ExternalLink-styles-module"><path
class="iconExternalLink_src-theme-Icon-ExternalLink-styles-module"><path fill="currentColor"
fill="currentColor" d="M3
d="M3 2C2.44772
2C2.44772 2
2 2
2 2.44772
2.44772 2
2 3V12C2
3V12C2 12.5523
12.5523 2.44772
2.44772 13
13 3
3 13H12C12.5523
13H12C12.5523 13
13 13
13 12.5523
12.5523 13
13 12V8.5C13
12V8.5C13 8.22386
8.22386 12.7761
12.7761 8
8 12.5
12.5 8C12.2239
8C12.2239 8
8 12
12 8.22386
8.22386 12
12 8.5V12H3V3L6.5
8.5V12H3V3L6.5 3C6.77614
3C6.77614 3
3 7
7 2.77614
2.77614 7
7 2.5C7
2.5C7 2.22386
2.22386 6.77614
6.77614 2
2 6.5
6.5 2H3ZM12.8536
2H3ZM12.8536 2.14645C12.9015
2.14645C12.9015 2.19439
2.19439 12.9377
12.9377 2.24964
2.24964 12.9621
12.9621 2.30861C12.9861
2.30861C12.9861 2.36669
2.36669 12.9996
12.9996 2.4303
2.4303 13
13 2.497L13
2.497L13 2.5V2.50049V5.5C13
2.5V2.50049V5.5C13 5.77614
5.77614 12.7761
12.7761 6
6 12.5
12.5 6C12.2239
6C12.2239 6
6 12
12 5.77614
5.77614 12
12 5.5V3.70711L6.85355
5.5V3.70711L6.85355 8.85355C6.65829
8.85355C6.65829 9.04882
9.04882 6.34171
6.34171 9.04882
9.04882 6.14645
6.14645 8.85355C5.95118
8.85355C5.95118 8.65829
8.65829 5.95118
5.95118 8.34171
8.34171 6.14645
6.14645 8.14645L11.2929
8.14645L11.2929 3H9.5C9.22386
3H9.5C9.22386 3
3 9
9 2.77614
2.77614 9
9 2.5C9
2.5C9 2.22386
2.22386 9.22386
9.22386 2
2 9.5
9.5 2H12.4999H12.5C12.5678
2H12.4999H12.5C12.5678 2
2 12.6324
12.6324 2.01349
2.01349 12.6914
12.6914 2.03794C12.7504
2.03794C12.7504 2.06234
2.06234 12.8056
12.8056 2.09851
2.09851 12.8536
12.8536 2.14645Z"></path></svg>


     









id: console

title: Cloud
Cloud Console

hide_title: true





import Badge
Badge from
from '@site/src/components/Badge';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem,
TabItem, ChangelogItem
ChangelogItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';




<h1 className="headline
className="headline mb20">Focus
mb20">Focus on
on business
business with
with a
a Cloud
Cloud Native
Native Infrastructure</h1>

<p className="desc
className="desc pb20">

From the
the Deity
Deity Console,
Console, you
you can
can manage
manage and
and configure
configure the
the entire
entire Deity
Deity platform
platform stack.
stack. Manage
Manage your
your storefront
storefront domains,
domains, configure
configure third
third party
party integrations
integrations with
with Deity
Deity composer,
composer, or
or setup
setup payment
payment gateway
gateway business
business rules,
rules, all
all from
from one
one place
place –
– the
the Console.




<div className="mb100">

	<Card isPadding={false}>

	 <div
<div className="flex">

	 <CardContent>

	 <h2>Cloud
<h2>Cloud Console</h2>

	 <div
<div className="mb20">

	 <p
<p >

	 Manage
Manage your
your subscriptions,
subscriptions, users,
users, deployments,
deployments, integrations
integrations and
and more
more with
with our
our web-based
web-based application.

	 </p>

	 </div>
  
	 <Button
<Button variant="contained"
variant="contained" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

	 Sign
Sign up
up for
for an
an account
account &nbsp;

	 <svg
<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

				<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

				<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

				<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

				<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>


	 </Button>&nbsp;
</Button>&nbsp; &nbsp;
 
	 <Button
<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud"
href="https://console.deity.cloud" target="_blank">

	 Sign
Sign in
in &nbsp;

	 	<svg
	<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

			<path d="M9.17969
d="M9.17969 16.6016L13.2812
16.6016L13.2812 12.5L9.17969
12.5L9.17969 8.39844"
8.39844" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

			<path d="M2.34375
d="M2.34375 12.5H13.2812"
12.5H13.2812" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

			<path d="M13.2812
d="M13.2812 3.90625H18.75C18.9572
3.90625H18.75C18.9572 3.90625
3.90625 19.1559
19.1559 3.98856
3.98856 19.3024
19.3024 4.13507C19.4489
4.13507C19.4489 4.28159
4.28159 19.5312
19.5312 4.4803
4.4803 19.5312
19.5312 4.6875V20.3125C19.5312
4.6875V20.3125C19.5312 20.5197
20.5197 19.4489
19.4489 20.7184
20.7184 19.3024
19.3024 20.8649C19.1559
20.8649C19.1559 21.0114
21.0114 18.9572
18.9572 21.0938
21.0938 18.75
18.75 21.0938H13.2812"
21.0938H13.2812" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>



	 </CardContent>

	 </div>





## Start
Start Right
Right Away

<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/console/key-concepts">

<img src="/img/icons/info.svg"
src="/img/icons/info.svg" />

<h4>Key concepts</h4>

<p>Learn the
the basics
basics behind
behind Deity
Deity Platform.</p>


<Card to="/console/getting-started/sign-up">

<img src="/img/icons/lightning.svg"
src="/img/icons/lightning.svg" />

<h4>Getting started</h4>

<p>Jump right
right in
in and
and get
get started
started with
with Deity
Deity Platform.</p>


<Card to="/platform/support/tutorials">

<img src="/img/icons/lightbulb.svg"
src="/img/icons/lightbulb.svg" />


<p>Learn by
by doing
doing by
by following
following practical
practical tutorials.</p>






## Projects

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/project-settings/overview">

<img src="/img/icons/folders.svg"
src="/img/icons/folders.svg" />




<Card to="/console/project-settings/environments">

<img src="/img/icons/cloud.svg"
src="/img/icons/cloud.svg" />




<Card to="/console/project-settings/codebase">

<img src="/img/icons/gitfork.svg"
src="/img/icons/gitfork.svg" />







## Managing
Managing your
your Deity
Deity products

<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/console/composer">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<p>Compose outstanding
outstanding digital
digital experiences
experiences to
to achieve
achieve transactional
transactional excellence.</p>


<Card to="/console/storefront">

<img src="/img/icons/shop.svg"
src="/img/icons/shop.svg" />


<p>Focus on
on customer
customer experience
experience to
to exceed
exceed expectations.</p>


<Card to="/console/payments">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<p>Integrate multiple
multiple payment
payment service
service providers
providers to
to use
use any
any payment
payment method.</p>




## Building,
Building, Deploying
Deploying &
& Logging

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/builds-deployments/builds">

<img src="/img/icons/cpu.svg"
src="/img/icons/cpu.svg" />


<p>A build
build is
is a
a full
full build
build of
of a
a particular
particular commit.
commit. This
This is
is not
not accessible
accessible unless
unless it's
it's deployed.
deployed. Having
Having builds
builds for
for each
each of
of your
your commits
commits means
means it's
it's near
near instant
instant to
to update
update your
your environments.</p>


<Card to="/console/builds-deployments/deployments">

<img src="/img/icons/deployment.svg"
src="/img/icons/deployment.svg" />


<p>Deployments are
are when
when a
a build
build has
has been
been pushed
pushed to
to an
an environment.
environment. You
You can
can deploy
deploy these
these builds
builds to
to one
one of
of your
your environments.</p>


<Card to="/console/logs/log-entries">

<img src="/img/icons/bug.svg"
src="/img/icons/bug.svg" />


<p>The log
log explorer
explorer enables
enables you
you to
to scrutinize
scrutinize and
and interrogate
interrogate the
the logs
logs produced
produced by
by your
your remote
remote Composer
Composer and
and Storefront
Storefront applications.</p>




## Organization

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/organization/projects">

<img src="/img/icons/folders.svg"
src="/img/icons/folders.svg" />




<Card to="/console/organization/billing-details">

<img src="/img/icons/billing.svg"
src="/img/icons/billing.svg" />

<h4>Billing details</h4>



<Card to="/console/organization/invoices">

<img src="/img/icons/receipt.svg"
src="/img/icons/receipt.svg" />




<Card to="/console/organization/users">

<img src="/img/icons/users.svg"
src="/img/icons/users.svg" />






id: composer

title: Composer

hide_title: true



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem,
TabItem, ChangelogItem
ChangelogItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import LogoImg
LogoImg from
from '/img/logo.svg';

import Button
Button from
from '@site/src/components/Button';




<h1 className="headline
className="headline mb20">Compose
mb20">Compose outstanding
outstanding digital
digital experiences
experiences to
to achieve
achieve transactional
transactional excellence</h1>

<p className="desc">Deity
className="desc">Deity is
is the
the endlessly
endlessly flexible
flexible composer
composer providing
providing the
the utmost
utmost customer
customer centric
centric approach
approach to
to any
any fast-growing
fast-growing and
and forward
forward thinking
thinking ecommerce
ecommerce merchant.</p>


### Don't
Don't have
have an
an account
account yet?

<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

Sign up
up for
for an
an account
account &nbsp;

<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>



<div className="mb60"></div>




## Start
Start Right
Right Away

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/composer/key-concepts">

<img src="/img/icons/info.svg"
src="/img/icons/info.svg" />

<h4>Key concepts</h4>

<p>Learn the
the basics
basics behind
behind Deity
Deity Composer.</p>


<Card to="/composer/getting-started">

<img src="/img/icons/lightning.svg"
src="/img/icons/lightning.svg" />

<h4>Getting started</h4>

<p>Jump right
right in
in and
and get
get started
started with
with Deity
Deity Composer.</p>


<Card to="/platform/support/tutorials">

<img src="/img/icons/lightbulb.svg"
src="/img/icons/lightbulb.svg" />


<p>Learn by
by doing
doing by
by following
following practical
practical tutorials.</p>






## Learn
Learn the
the Basics

<h3 className="mt0">Core
className="mt0">Core <Button
<Button variant="outline"
variant="outline" size="medium"
size="medium" href="/composer/core">View
href="/composer/core">View all
all →</Button></h3>


<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/composer/core/dynamic-routes">

<img src="/img/icons/compass.svg"
src="/img/icons/compass.svg" />


<h5>Dynamic Route
Route Resolver</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/composer/core/event-hooks">

<img src="/img/icons/flowarrow.svg"
src="/img/icons/flowarrow.svg" />


<h5>Event Hooks</h5>


        




<div className="flex
className="flex brighten
brighten mb60">

<Card variant="horizontal"
variant="horizontal" to="/composer/core/extending-composer">

<img src="/img/icons/extending.svg"
src="/img/icons/extending.svg" />


<h5>Extending Composer</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/composer/core/extension-scopes">

<img src="/img/icons/extensionscope.svg"
src="/img/icons/extensionscope.svg" />


<h5>Extension Scopes</h5>


        





<h3 className="mt0">Extensions
className="mt0">Extensions <Button
<Button variant="outline"
variant="outline" size="medium"
size="medium" href="/composer/extensions">View
href="/composer/extensions">View all
all →</Button></h3>


<div className="flex
className="flex brighten">


<Card variant="horizontal"
variant="horizontal" to="/composer/extensions/shop-extension">

<img src="/img/icons/shoppingcart.svg"
src="/img/icons/shoppingcart.svg" />


<h5>Shop Extension</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/composer/extensions/search-extension">

<img src="/img/icons/magnifyingglass.svg"
src="/img/icons/magnifyingglass.svg" />


<h5>Search Extension</h5>


        




<div className="flex
className="flex brighten
brighten mb100">

  
<Card variant="horizontal"
variant="horizontal" to="/composer/extensions/blog-extension">

<img src="/img/icons/textaa.svg"
src="/img/icons/textaa.svg" />


<h5>Blog Extension</h5>


        



<Card variant="horizontal"
variant="horizontal" to="/composer/extensions/geolocation-extension">

<img src="/img/icons/mappin.svg"
src="/img/icons/mappin.svg" />


<h5>Geo Location
Location Extension</h5>


        


  




## Data
Data Handling
Handling &
& Interfaces


<h3 className="mt0">Common
className="mt0">Common Services</h3>


<div className="flex
className="flex brighten
brighten mb60">

<Card to="/composer/modules/common-services/data-sources">

<img src="/img/icons/database.svg"
src="/img/icons/database.svg" />

   
<h4>Data Sources</h4>


        

    

<Card to="/composer/modules/common-services/event-handlers">

<img src="/img/icons/path.svg"
src="/img/icons/path.svg" />

  
<h4>Event Handlers</h4>


        

   

<Card to="/composer/modules/common-services/rest-endpoints">

<img src="/img/icons/restapi.svg"
src="/img/icons/restapi.svg" />

   
<h4>REST Endpoints</h4>


        

   
  


<h3 className="mt0">Modules
className="mt0">Modules <Button
<Button variant="outline"
variant="outline" size="medium"
size="medium" href="/composer/modules">View
href="/composer/modules">View all
all →</Button></h3>


<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/composer/modules/about">

<img src="/img/icons/diamondsfour.svg"
src="/img/icons/diamondsfour.svg" />




        



<Card variant="horizontal"
variant="horizontal" to="/composer/modules/module-api">

<img src="/img/icons/diamond.svg"
src="/img/icons/diamond.svg" />


<h5>Falcon Module
Module API</h5>


        




<div className="flex
className="flex brighten">

<Card variant="horizontal"
variant="horizontal" to="/composer/modules/bigcommerce-module">

<img src="/img/icons/modulebc.svg"
src="/img/icons/modulebc.svg" />




        



<Card variant="horizontal"
variant="horizontal" to="/composer/modules/magento2-module">

<img src="/img/icons/moduleadobe.svg"
src="/img/icons/moduleadobe.svg" />


<h5>Adobe Commerce
Commerce CE</h5>


        




<div className="flex
className="flex brighten
brighten mb100">

<Card variant="horizontal"
variant="horizontal" to="/composer/modules/algolia-search-module">

<img src="/img/icons/modulealgolia.svg"
src="/img/icons/modulealgolia.svg" />




        



<Card variant="horizontal"
variant="horizontal" to="/composer/modules/contentful-module">

<img src="/img/icons/modulecontentful.svg"
src="/img/icons/modulecontentful.svg" />




        





## Integrations


import IntegrationContent
IntegrationContent from
from "./integrations.mdx"


<IntegrationContent />


id: billing-details

title: Billing
Billing Details

sidebar_label: Billing
Billing Details


## Company
Company information

Your organization
organization billing
billing details
details can
can be
be managed
managed by
by users
users that
that have
have been
been assigned
assigned to
to the
the Billing
Billing Manager
Manager user
user role
role or
or Owner
Owner user
user role.
 

### Tax
Tax information

When your
your organization
organization was
was added
added to
to the
the Deity
Deity Platform,
Platform, the
the legal
legal and
and tax
tax information
information about
about your
your organization
organization was
was entered
entered by
by our
our sales
sales team.
team. This
This legal
legal and
and tax
tax information
information is
is used
used by
by us
us to
to determine
determine the
the invoice
invoice rules
rules we
we need
need to
to apply.
apply. Hence,
Hence, you
you can't
can't change
change this
this information.


However, if
if you
you want
want to
to change
change this
this information,
information, for
for instance
instance because
because your
your organization’s
organization’s billing
billing subsidiary
subsidiary has
has changed,
changed, you
you can
can contact
contact our
our sales
sales team
team to
to have
have the
the required
required changes
changes processed.


### Primary
Primary contact

You may
may still
still change
change the
the primary
primary contact’s
contact’s details,
details, which
which Deity
Deity will
will use
use to
to display
display on
on the
the invoices
invoices and
and contact
contact if
if needed.


## Billing
Billing methods

Your organization
organization can
can have
have multiple
multiple payment
payment methods
methods stored
stored in
in their
their account.
account. These
These payment
payment methods
methods are
are used
used to
to process
process payments
payments for
for periodical
periodical invoices,
invoices, such
such as
as recurring
recurring subscription
subscription fees
fees and
and additional
additional usage
usage based
based fees
fees that
that are
are not
not included
included in
in the
the recurring
recurring subscription
subscription fee.
fee. If
If you’re
you’re not
not sure
sure about
about your
your subscription
subscription fees
fees and
and additional
additional fees,
fees, please
please consult
consult our
our sales
sales team.
 

### Payment
Payment processing

Payments are
are processed
processed by
by our
our payments
payments partner
partner Stripe.
Stripe. We
We don’t
don’t collect
collect or
or store
store any
any creditcard
creditcard information
information ourselves.
 

### Primary
Primary creditcard

You can
can set
set a
a newly
newly added
added creditcard
creditcard as
as your
your primary
primary card.
card. When
When we’re
we’re collecting
collecting the
the invoice
invoice payments,
payments, we’ll
we’ll first
first try
try via
via the
the primary
primary creditcard.
creditcard. If
If this
this fails,
fails, for
for instance
instance because
because of
of insufficient
insufficient funds,
funds, we’ll
we’ll try
try the
the next
next stored
stored creditcard
creditcard in
in line.
line. Therefor,
Therefor, we
we recommend
recommend you
you to
to save
save at
at least
least two
two payment
payment options.
options. One
One for
for primary
primary usage,
usage, the
the other(s)
other(s) as
as back-up
back-up payment
payment method.


Stripe may
may not
not be
be able
able to
to collect
collect the
the amount
amount due,
due, because
because of
of various
various reasons.
reasons. We’ll
We’ll inform
inform you
you when
when needed
needed about
about the
the ways
ways Stripe
Stripe has
has tried,
tried, and
and was
was unable,
unable, to
to collect
collect the
the recurring
recurring subscription
subscription fees
fees and
and /
/ or
or additional
additional usage
usage based
based fees.


id: projects

title: Projects

sidebar_label: Projects



import Content
Content from
from "../project-settings/overview.mdx"


<Content />
id: invoices

title: Invoices

sidebar_label: Invoices


If you’re
you’re assigned
assigned to
to the
the Billing
Billing Manager
Manager or
or Owner
Owner user
user role,
role, you
you can
can view
view and
and download
download the
the available
available invoices.


### Open

If we’ve
we’ve been
been unable
unable to
to collect
collect payments
payments for
for your
your recurring
recurring subscription
subscription fees
fees or
or additional
additional usage
usage fees,
fees, you’ll
you’ll see
see the
the invoice
invoice listed
listed here.
here. Click
Click on
on the
the download
download link
link to
to view
view the
the invoice
invoice details
details in
in PDF
PDF format.
format. You
You can
can click
click **Pay
**Pay online**
online** in
in the
the PDF
PDF to
to complete
complete your
your invoice
invoice payment.


### Paid

Once we’ve
we’ve received
received payments
payments for
for your
your invoices,
invoices, they
they will
will be
be listed
listed here.
here. You
You can
can download
download the
the invoice
invoice and
and click
click **Pay
**Pay online**
online** to
to view
view the
the payment
payment method
method used
used and
and download
download the
the receipt
receipt of
of your
your payment.



id: users

title: Users

sidebar_label: Users



import Badge
Badge from
from '@site/src/components/Badge';



When you
you go
go the
the the
the users
users section,
section, you’ll
you’ll see
see a
a complete
complete list
list of
of registered
registered portal
portal users
users for
for your
your organization.
organization. Each
Each user
user is
is assigned
assigned to
to a
a user
user role,
role, which
which grands
grands them
them access
access and
and usage
usage permissions
permissions to
to corresponding
corresponding sections
sections of
of the
the console.


### Inviting
Inviting new
new users

On all
all subscriptions
subscriptions plans,
plans, you
you can
can invite
invite as
as many
many users
users as
as you
you require.
require. However,
However, you
you need
need to
to be
be assigned
assigned to
to the
the role
role of
of Owner
Owner or
or Administrator
Administrator to
to invite
invite new
new users
users to
to your
your organization’s
organization’s project(s).


Click the
the **Invite
**Invite user**
user** button
button to
to send
send an
an invitation
invitation to
to a
a new
new user
user that
that wants
wants to
to join
join your
your organization’s
organization’s project
project teams.
teams. Input
Input their
their personal
personal details
details and
and specify
specify to
to which
which role
role they
they should
should be
be assigned.
assigned. You
You can
can choose
choose one
one out
out of
of the
the following
following user
user roles.


### User
User roles

- <Badge
<Badge variant="console">Viewer</Badge>
variant="console">Viewer</Badge> Can
Can view
view all
all sections
sections and
and not
not edit
edit or
or manage
manage any
any of
of it.
it. Exceptions
Exceptions are
are Billing
Billing and
and Payments
Payments sections,
sections, which
which are
are not
not accessible
accessible for
for users
users assigned
assigned to
to the
the Viewer
Viewer role.


- <Badge
<Badge variant="console">Editor</Badge>
variant="console">Editor</Badge> Can
Can view
view all
all sections,
sections, except
except Billing.
Billing. Additionally,
Additionally, can
can edit
edit Environment
Environment settings,
settings, manage
manage Builds,
Builds, manage
manage Integrations
Integrations and
and manage
manage Payments.
Payments. An
An editor
editor can
can be
be seen
seen as
as a
a member
member of
of your
your development
development team.


- <Badge
<Badge variant="console">Billing
variant="console">Billing Manager</Badge>
Manager</Badge> Can
Can view
view all
all sections,
sections, except
except Payments.
Payments. Additionally,
Additionally, can
can manage
manage the
the Billing
Billing section.


- <Badge
<Badge variant="console">Admin</Badge>
variant="console">Admin</Badge> Can
Can manage
manage all
all sections,
sections, except
except the
the Logging
Logging and
and Billing
Billing sections
sections which
which are
are read
read only.
only. Additionally
Additionally they
they can
can update
update Project
Project and
and Organization
Organization sections
sections only
only partially.


- <Badge
<Badge variant="console">Owner</Badge>
variant="console">Owner</Badge> Can
Can manage
manage all
all sections,
sections, except
except the
the Project
Project and
and Organization
Organization sections,
sections, which
which they
they can
can update
update only
only partially.


<p>Users with
with role
role <Badge
<Badge variant="console">Admin</Badge>
variant="console">Admin</Badge> and
and the
the account
account <Badge
<Badge variant="console">Owner</Badge>
variant="console">Owner</Badge> can
can always
always change
change user
user roles
roles later
later on.</p>


### Updating
Updating Organizations,
Organizations, Projects
Projects and
and Extra
Extra Environments

Since organizations,organizations, projectsprojects andand thethe numbernumber ofof environmentsenvironments areare coupledcoupled withwith thethe currentcurrent subscriptionsubscription plans,plans, itit isis onlyonly possiblepossible toto changechange thesethese configurationsconfigurations byby contactingcontacting ourour salessales team.
id: builds-deployments

title: Builds
Builds &
& Deployments

sidebar_label: Builds
Builds &
& Deployments



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';


The Deity
Deity platform
platform comes
comes with
with an
an automated
automated build
build and
and deploy
deploy system
system out
out of
of the
the box.
box. Once
Once you’ve
you’ve linked
linked your
your repository,
repository, Deity
Deity will
will create
create a
a new
new build
build of
of your
your branch’
branch’ code
code after
after every
every git
git push
push event.
event. You
You can
can deploy
deploy a
a successful
successful build
build to
to any
any environment
environment with
with the
the click
click of
of a
a button.



:::info Note

The following
following links
links are
are available
available in
in your
your Deity
Deity Cloud
Cloud Console
Console depending
depending on
on your
your assigned
assigned user
user role.




### Please
Please select
select a
a topic

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/builds-deployments/builds">

<img src="/img/icons/cpu.svg"
src="/img/icons/cpu.svg" />




<Card to="/console/builds-deployments/deployments">

<img src="/img/icons/deployment.svg"
src="/img/icons/deployment.svg" />





id: payment-methods

title: Payment
Payment Methods

sidebar_label: Payment
Payment Methods



import Badge
Badge from
from '@site/src/components/Badge';


Each payment
payment provider
provider has
has one
one or
or more
more supported
supported payment
payment methods.
methods. These
These are
are the
the actual
actual payment
payment instruments
instruments your
your customers
customers pay
pay with
with in
in your
your checkout,
checkout, such
such as
as credit
credit cards,
cards, PayPal
PayPal or
or Klarna,
Klarna, to
to name
name a
a few.
few. You
You can
can configure
configure what
what methods
methods to
to display
display in
in your
your checkout,
checkout, set
set business
business rules
rules for
for them
them and
and define
define sort
sort orders.
orders. With
With these
these tools,
tools, you
you can
can build
build a
a personalized
personalized checkout
checkout experience
experience for
for all
all your
your sh


### Basic

Similar to
to a
a provider,
provider, you
you can
can toggle
toggle the
the method
method to
to be
be enabled
enabled or
or not.
not. Furthermore,
Furthermore, you
you can
can customize
customize the
the name
name of
of the
the method.
method. This
This value
value determines
determines what
what will
will be
be displayed
displayed to
to your
your shoppers
shoppers in
in the
the checkout.


Each method
method can
can have
have 1
1 out
out of
of 3
3 possible
possible states:


- <Badge
<Badge variant="console">enabled</Badge>
variant="console">enabled</Badge> Method
Method has
has been
been configured
configured and
and is
is enabled
enabled and
and will
will be
be listed
listed in
in your
your checkout
checkout according
according to
to configured
configured rules


- <Badge
<Badge variant="console">disabled</Badge>
variant="console">disabled</Badge> Method
Method has
has been
been configured
configured and
and is
is disabled,
disabled, it
it will
will not
not be
be listed
listed in
in your
your checkout,
checkout, no
no matter
matter the
the configured
configured rules


- <Badge
<Badge variant="console">not
variant="console">not configured</Badge>
configured</Badge> Method
Method has
has not
not been
been configured
configured and
and will
will not
not be
be listed
listed in
in your
your checkout


### Localisation

You can
can define
define which
which countries
countries and
and currencies
currencies should
should be
be allowed
allowed for
for this
this method.
method. Both
Both fields
fields are
are multi-select.
multi-select. By
By default,
default, the
the ANY
ANY option
option is
is set
set for
for each
each method,
method, which
which means
means the
the method
method will
will be
be displayed
displayed no
no matter
matter the
the country
country or
or currency
currency of
of the
the shopper.
shopper. Note
Note that
that a
a shopper’s
shopper’s checkout
checkout session
session must
must match
match both
both the
the country
country and
and currency
currency to
to ensure
ensure the
the method
method is
is listed.


Let’s say
say you’ve
you’ve configured
configured Mollie
Mollie iDEAL
iDEAL to
to be
be shown
shown for
for Dutch
Dutch customers
customers shopping
shopping in
in Euro.
Euro. A
A few
few examples:


- Shopper
Shopper comes
comes from
from The
The Netherlands,
Netherlands, selected
selected EUR
EUR as
as currency:
currency: iDEAL
iDEAL will
will be
be listed


- Shopper
Shopper comes
comes from
from The
The Netherlands,
Netherlands, selected
selected GBP
GBP as
as currency:
currency: iDEAL
iDEAL will
will not
not be
be listed


- Shopper
Shopper comes
comes from
from Belgium,
Belgium, selected
selected EUR
EUR as
as currency:
currency: iDEAL
iDEAL will
will not
not be
be listed


Any configuration
configuration set
set on
on the
the payment
payment provider
provider level
level will
will limit
limit the
the options
options you
you have
have to
to localize
localize its
its methods.


### Surcharge

Some payment
payment methods
methods might
might cost
cost you,
you, as
as a
a merchant,
merchant, more
more than
than others.
others. For
For example,
example, credit
credit cards
cards and
and Buy
Buy Now,
Now, Pay
Pay Later
Later methods
methods often
often require
require processing
processing fees.
fees. Often
Often these
these fees
fees are
are either
either a
a flat
flat amount
amount per
per successful
successful transaction,
transaction, a
a percentage
percentage of
of the
the grand
grand total,
total, or
or a
a combination
combination of
of both.


Since you
you may
may want
want to
to offset
offset those
those fees
fees to
to your
your shoppers,
shoppers, you
you can
can set
set surcharge
surcharge rules
rules per
per method.
method. You
You can
can set
set a
a percentage
percentage or
or flat
flat fee
fee surcharge,
surcharge, or
or a
a combination
combination of
of the
the two.
two. In
In case
case of
of the
the latter,
latter, the
the percentage
percentage is
is always
always calculated
calculated based
based on
on the
the base
base total,
total, excluding
excluding any
any fixed
fixed amount
amount surcharge.


### Min
Min /
/ Max
Max order
order amount

You cancan furtherfurther personalizepersonalize thethe checkoutcheckout byby settingsetting thethe minimumminimum andand maximummaximum amountsamounts forfor whichwhich aa paymentpayment methodmethod mustmust bebe shown.shown. YouYou cancan setset oneone ofof thesethese rulesrules perper currency.
id: profiles

title: Profiles

sidebar_label: Profiles


When you
you go
go to
to the
the Payments
Payments start
start page,
page, it
it will
will automatically
automatically select
select a
a Payment
Payment profile
profile that
that is
is matching
matching your
your selected
selected environment.
environment. You
You can
can review
review the
the available
available payment
payment providers
providers and
and transaction
transaction types
types for
for that
that payment
payment profile.
profile. Or
Or select
select another
another (local)
(local) profile
profile from
from the
the Payment
Payment profiles
profiles dropdown.
dropdown. Your
Your selection
selection will
will be
be remembered
remembered for
for further
further payments
payments configuration.


### Configuring
Configuring profiles

Each payment
payment profile
profile comes
comes with
with two
two Composer
Composer variables
variables that
that you
you can
can use
use to
to access
access the
the required
required profile.
profile. So
So for
for a
a remote
remote environment
environment such
such as
as Test,
Test, you’d
you’d configure
configure the
the two
two variables
variables with
with the
the corresponding
corresponding credentials.
credentials. For
For local
local development,
development, you’d
you’d create
create a
a local
local payment
payment profile
profile in
in Deity’s
Deity’s Payments
Payments Service
Service and
and set
set the
the two
two Composer
Composer variables
variables with
with the
the provided
provided local
local profile
profile credentials.


`PAYMENTS_SERVICE_USERNAME <payments_service>:<scope>:<username>`


`PAYMENTS_SERVICE_TOKEN <token>`


### Creating
Creating payment
payment profiles

You cancan createcreate asas manymany locallocal profilesprofiles asas youyou seesee fit.fit. AsAs thethe namename suggests,suggests, thesethese profilesprofiles areare notnot connectedconnected toto aa remoteremote environment.environment. WeWe recommendrecommend toto createcreate oneone locallocal profileprofile forfor everyevery developerdeveloper workingworking onon thethe checkoutcheckout oror otherother payment-relatedpayment-related componentscomponents ofof thethe project.
id: providers

title: Providers

sidebar_label: Providers



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';



You’ll probably
probably use
use one
one or
or more
more payment
payment service
service providers
providers to
to facilitate
facilitate the
the payments
payments processing
processing between
between you
you as
as a
a merchant
merchant and
and your
your shoppers.
shoppers. Using
Using the
the Deity
Deity payment
payment gateway,
gateway, you
you can
can connect
connect to
to any
any of
of our
our supported
supported payment
payment service
service providers
providers and
and start
start routing
routing payments
payments to
to them
them based
based on
on your
your configuration.


The Deity
Deity payment
payment gateway
gateway does
does not
not process
process any
any payments
payments on
on your
your behalf.
behalf. Instead,
Instead, it
it is
is the
the unifying
unifying proxy
proxy layer
layer between
between your
your Composer
Composer and
and the
the various
various payment
payment providers.
providers. No
No sensitive
sensitive payment
payment and/or
and/or cardholder
cardholder data
data is
is stored
stored on
on Deity
Deity infrastructure.


We currently
currently support
support the
the following
following payment
payment service
service providers.
providers. Click
Click on
on one
one of
of them
them to
to see
see its
its dedicated
dedicated documentation
documentation page:


<div className="flex
className="flex ">

<Card variant="horizontal"
variant="horizontal" to="#">

	<img src="/img/icons/stripe.svg"
src="/img/icons/stripe.svg" className="round-icon"
className="round-icon" />




        



<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/adyen.svg"
src="/img/icons/adyen.svg" className="round-icon"
className="round-icon" />




        




<div className="flex">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/mollie.svg"
src="/img/icons/mollie.svg" className="round-icon"
className="round-icon" />




        



<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/humm.svg"
src="/img/icons/humm.svg" className="round-icon"
className="round-icon" />




        




<div className="flex
className="flex mb60">

<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/wpay.svg"
src="/img/icons/wpay.svg" className="round-icon"
className="round-icon" />




        



<Card variant="horizontal"
variant="horizontal" to="#">

<img src="/img/icons/deity.svg"
src="/img/icons/deity.svg" className="round-icon"
className="round-icon" />


<h5>Deity Sandbox</h5>


        






### Configuring
Configuring a
a Payment
Payment Provider

Once you’ve
you’ve entered
entered the
the required
required API
API credentials,
credentials, you
you can
can select
select which
which countries
countries and
and currencies
currencies should
should be
be accepted
accepted for
for this
this provider.
provider. The
The selection
selection you
you make
make here,
here, will
will impact
impact all
all the
the methods
methods you’ll
you’ll configure
configure later
later on.
on. Select
Select a
a list
list of
of countries
countries and
and currencies,
currencies, or
or select
select ANY
ANY if
if you
you want
want to
to accept
accept any
any currency
currency or
or country.


You cancan toggletoggle thethe enabledenabled flagflag toto decidedecide whetherwhether oror notnot toto enableenable thethe providerprovider inin youryour checkout.checkout. UseUse thisthis toto quicklyquickly turnturn offoff providersproviders entirely,entirely, oror turnturn themthem backback on.
id: domains

title: Domains

sidebar_label: Domains



import Badge
Badge from
from '@site/src/components/Badge';


You can
can manage
manage create
create and
and assign
assign custom
custom domains
domains to
to your
your remote
remote environments,
environments, so
so that
that you
you can
can link
link your
your own
own domain
domain to
to the
the Deity
Deity application.
application. Please
Please note
note that
that you
you must
must bring
bring your
your own
own domain
domain from
from any
any given
given registry
registry such
such as
as GoDaddy,
GoDaddy, Cloudflare,
Cloudflare, domain.com
domain.com or
or something
something similar,
similar, you
you can
can not
not buy
buy them
them from
from Deity.


### Steps
Steps to
to follow

The steps
steps to
to set
set a
a custom
custom domain
domain for
for one
one of
of your
your custom
custom environment
environment is
is as
as follows:


1. Create
Create a
a domain


2. Verify
Verify ownership
ownership of
of the
the domain


3. Configure
Configure the
the SSL
SSL certificate


4. Assign
Assign the
the domain
domain to
to an
an environment


### Create
Create a
a domain

You can
can create
create as
as many
many domains
domains as
as required
required by
by clicking
clicking the
the Add
Add new
new domain
domain button.
button. You
You will
will be
be promped
promped to
to enter
enter the
the domain
domain name.
name. In
In case
case you
you want
want to
to setup
setup a
a subdomain,
subdomain, you
you should
should enter
enter it
it as
as such.
such. Paths,
Paths, however,
however, must
must not
not be
be entered.
entered. All
All domains
domains are
are prefixed
prefixed with
with `https://`.
 

A few
few examples:


- `acmecorp.com`
`acmecorp.com` <Badge
<Badge variant="green">Valid</Badge>


- `www.acmecorp.com`
`www.acmecorp.com` <Badge
<Badge variant="green">Valid</Badge>


- `shop.acmecorp.com`
`shop.acmecorp.com` <Badge
<Badge variant="green">Valid</Badge>


- `https://acmecorp.com`
`https://acmecorp.com` <Badge
<Badge variant="red">Invalid</Badge>


- `acmecorp.com/shop`
`acmecorp.com/shop` <Badge
<Badge variant="red">Invalid</Badge>


You can
can now
now create
create the
the domain,
domain, after
after which
which it’ll
it’ll be
be in
in pending
pending ownership
ownership verification
verification status.


### Verify
Verify ownership
ownership of
of the
the domain

The next
next step
step is
is to
to validate
validate ownership
ownership of
of your
your domain.
domain. We
We require
require you
you to
to add
add a
a txt
txt record
record to
to your
your DNS
DNS manager.
manager. If
If you
you can,
can, set
set the
the TTL
TTL of
of the
the record
record as
as low
low as
as possible,
possible, so
so that
that validation
validation occurs
occurs quickly.


Once it’s
it’s propagated,
propagated, you
you can
can check
check the
the validation
validation status
status by
by clicking
clicking Validate
Validate DNS
DNS configuration
configuration in
in your
your console.
console. If
If successful,
successful, the
the status
status of
of the
the domain
domain will
will now
now display
display pending
pending validation.


### Configure
Configure SSL

You can
can then
then carry
carry on
on by
by adding
adding another
another txt
txt record
record to
to your
your DNS
DNS registry,
registry, this
this time
time to
to configure
configure the
the SSL
SSL certificate.
certificate. Once
Once added,
added, click
click the
the validate
validate button
button to
to check
check for
for if
if your
your records
records have
have propagated.
propagated. If
If successful,
successful, your
your domain
domain status
status will
will now
now be
be configured
configured and
and ready
ready to
to be
be assigned
assigned to
to an
an environment!


### Assign
Assign your
your domain
domain to
to an
an environment

Once your
your domain
domain is
is configured,
configured, you
you can
can assign
assign it
it to
to any
any one
one of
of your
your available
available environments.
environments. Once
Once you
you have
have selected
selected an
an environment,
environment, you
you will
will see
see the
the cname
cname record.
record. This
This is
is the
the last
last record
record you
you will
will need
need to
to add
add to
to your
your DNS
DNS registry.
registry. Once
Once you
you have
have done
done so,
so, please
please allow
allow up
up to
to 24
24 hours
hours for
for DNS
DNS propagation
propagation to
to take
take effect.
effect. Usually,
Usually, this
this process
process completes
completes in
in a
a few
few minutes.




id: storefront

title: Storefront

sidebar_label: Storefront



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';


In the
the Storefront
Storefront section,
section, you
you can
can see
see what
what version
version of
of your
your Deity
Deity PWA
PWA Storefront
Storefront is
is currently
currently deployed
deployed to
to the
the selected
selected environment.
environment. Click
Click on
on **Build
**Build &
& deployment**
deployment** history
history to
to view
view what
what other
other versions
versions have
have been
been build
build and
and deployed
deployed to
to your
your environment.


Additionally you
you can
can set
set custom
custom domains,
domains, so
so that
that your
your own
own domainname
domainname is
is used
used for
for your
your Deity
Deity project.


:::info Note

The following
following links
links are
are available
available in
in your
your Deity
Deity Cloud
Cloud Console
Console depending
depending on
on your
your assigned
assigned user
user role.



### Please
Please select
select a
a topic

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/storefront/domains">

<img src="/img/icons/shield.svg"
src="/img/icons/shield.svg" />

<h4>Domains &
& Certificates</h4>




id: logs

title: Logs

sidebar_label: Logs



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';


The log
log explorer
explorer enables
enables you
you to
to scrutinize
scrutinize and
and interrogate
interrogate the
the logs
logs produced
produced by
by your
your remote
remote Composer
Composer and
and Storefront
Storefront applications.
applications. The
The logs
logs displayed
displayed are
are relevant
relevant to
to the
the environment
environment you
you have
have chosen,
chosen, which
which you
you can
can switch
switch using
using the
the dropdown
dropdown menu
menu in
in the
the top
top navigation.
navigation. Please
Please bear
bear in
in mind
mind that
that only
only the
the logs
logs emanating
emanating from
from remote
remote environments
environments are
are visible
visible in
in your
your console;
console; logs
logs from
from local
local applications
applications executed
executed on
on your
your machine
machine will
will not
not appear
appear here.
here. For
For local
local development,
development, you
you can
can utilize
utilize our
our CLI
CLI tool
tool to
to inspect
inspect logs.



:::info Note

The following
following links
links are
are available
available in
in your
your Deity
Deity Cloud
Cloud Console
Console depending
depending on
on your
your assigned
assigned user
user role.



### Please
Please select
select a
a topic

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/logs/log-entries">

<img src="/img/icons/bug.svg"
src="/img/icons/bug.svg" />

<h4>Log Entries</h4>




id: variables

title: Variables

sidebar_label: Variables


You can
can define
define and
and manage
manage any
any custom
custom variable
variable on
on each
each environment.
environment. Common
Common use
use cases
cases for
for custom
custom variables
variables are:


- Storing
Storing an
an API
API key
key for
for one
one of
of your
your custom-built
custom-built integrations


- Storing
Storing the
the ID
ID of
of a
a product
product category
category for
for which
which you’ve
you’ve built
built a
a piece
piece of
of custom
custom logic


- Storing
Storing the
the name
name of
of an
an additional
additional search
search index
index which
which the
the frontend
frontend can
can query


You can
can add
add as
as many
many variables
variables as
as you’d
you’d like.
like. Click
Click **Add
**Add variable**
variable** to
to add
add one
one or
or more
more variables,
variables, enter
enter the
the name
name and
and value
value and
and click
click the
the lock
lock icon
icon if
if you
you want
want to
to encrypt
encrypt the
the value.


Any changes
changes to
to your
your variables,
variables, whether
whether its
its editing,
editing, adding
adding or
or removing
removing will
will not
not take
take effect
effect until
until you
you Save
Save and
and apply
apply the
the variables.
variables. Once
Once you
you apply
apply your
your changes,
changes, the
the variables
variables are
are pushed
pushed to
to your
your environment
environment and
and will
will be
be effective
effective within
within a
a minute.


### Duplicate
Duplicate variables


You can
can duplicate
duplicate all
all your
your custom
custom variables
variables from
from the
the currently
currently selected
selected environment
environment to
to any
any other
other target
target environment.


:::info Good
Good to
to know

If your
your target
target environment
environment already
already has
has a
a variable
variable with
with the
the same
same name
name as
as in
in the
the source
source environment,
environment, the
the value
value will
will not
not be
be overridden.


id: integrations

title: Integrations

sidebar_label: Integrations



import IntegrationContent
IntegrationContent from
from "../../integrations.mdx"



You can
can setup
setup the
the configuration
configuration for
for a
a number
number of
of third
third party
party platforms,
platforms, right
right from
from within
within your
your console.
console. Each
Each integration
integration has
has a
a Type,
Type, Status
Status and
and Account
Account identifier.


The type
type outlines
outlines what
what kind
kind of
of integration
integration this
this platform
platform is.
is. In
In most
most cases,
cases, it
it is
is recommended
recommended to
to have
have 0
0 to
to 1
1 integrations
integrations of
of a
a single
single type
type active
active per
per environment.
environment. The
The status
status of
of an
an integration
integration indicates
indicates whether
whether the
the platform
platform is
is fully
fully configured,
configured, and
and ready
ready for
for use,
use, or
or not.
not. Finally,
Finally, the
the Account
Account identifier
identifier indicates
indicates at
at a
a quick
quick glance
glance which
which account
account you’ve
you’ve configured
configured for
for the
the particular
particular platform.
platform. This
This is
is always
always one
one of
of the
the variables
variables you’ve
you’ve set,
set, such
such as
as a
a `store-id`.


## Setting
Setting up
up an
an integration

You can
can expand
expand an
an integration
integration to
to show
show its
its variables.
variables. Every
Every integration
integration has
has at
at least
least two
two sections,
sections, default
default and
and custom
custom variables.
variables. The
The default
default section
section lists
lists all
all the
the basic
basic configuration
configuration variables
variables of
of which
which most
most are
are required
required (indicated
(indicated by
by a
a *)
*) to
to set
set for
for the
the integration
integration to
to work.


The custom
custom section
section provides
provides you
you the
the opportunity
opportunity to
to define
define and
and set
set your
your own
own integration-specific
integration-specific variables.
variables. You’ll
You’ll mostly
mostly want
want to
to make
make use
use of
of this
this feature
feature when
when you
you are
are extending
extending our
our core
core integrations
integrations and
and need
need to
to set
set dynamic
dynamic configurations
configurations or
or sensitive
sensitive credentials.


Every integration
integration variable
variable is
is prefixed
prefixed with
with their
their respective
respective name
name in
in uppercase
uppercase followed
followed by
by an
an underscore,
underscore, e.g.
e.g. `CONTENTFUL_`
`CONTENTFUL_` or
or `TALONONE_`.


### Secrets
Secrets and
and sensitive
sensitive credentials

We’ve pre-configured
pre-configured some
some of
of the
the variables
variables to
to encrypt
encrypt your
your values
values by
by default.
default. They
They will
will be
be managed
managed by
by the
the Deity
Deity platform,
platform, ensures
ensures that
that only
only your
your application
application will
will be
be able
able to
to access
access the
the values
values at
at runtime
runtime injection.


When you
you save
save an
an encrypted
encrypted value,
value, it
it will
will be
be displayed
displayed in
in your
your Cloud
Cloud Console
Console as
as `***`.
`***`. You
You will
will not
not be
be able
able to
to see
see what
what value
value you
you saved.
saved. Therefore,
Therefore, if
if you
you want
want to
to edit
edit the
the value,
value, you
you can
can clear
clear the
the current
current encrypted
encrypted value
value and
and set
set a
a new
new one.


### Custom
Custom integration
integration variables

You can
can define
define custom
custom variables
variables to
to store
store any
any configuration
configuration on
on the
the environment
environment instead
instead of
of in
in your
your repository.
repository. We
We recommend
recommend to
to use
use this
this method
method for
for any
any config
config value
value which
which may
may either
either change
change over
over time
time or
or is
is sensitive
sensitive by
by nature.


You can
can create
create as
as many
many custom
custom variables
variables as
as you
you see
see fit.
fit. Simply
Simply click
click the
the **Add
**Add variable**
variable** button
button and
and enter
enter your
your variable
variable name(s)
name(s) and
and value(s).
value(s). You
You can
can encrypt
encrypt them
them if
if needed.


:::caution Caution

We recommend
recommend to
to keep
keep the
the integration’s
integration’s prefix
prefix as
as is.
is. If
If you
you alter
alter the
the prefix,
prefix, the
the variable
variable will
will show
show up
up in
in your
your global
global custom
custom variables,
variables, instead
instead of
of in
in the
the particular
particular integration.



[Read more
more about
about variables
variables →](/console/composer/variables)



## Supported
Supported integrations


We currently
currently support
support the
the following
following integrations
integrations with
with third
third party
party platforms
platforms out
out of
of the
the box.
box. Check
Check this
this page
page regularly
regularly to
to learn
learn about
about new
new integrations!



<IntegrationContent />



id: overview

title: Projects
Projects Overview

sidebar_label: Overview



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Button
Button from
from '@site/src/components/Button';



Your projects
projects are
are provisioned
provisioned by
by Deity.
Deity. On
On the
the homepage
homepage you
you can
can see
see the
the list
list of
of your
your projects,
projects, the
the amount
amount of
of available
available environments
environments and
and which
which region
region your
your environments
environments are
are housed
housed in.
in. If
If you
you are
are currently
currently working
working on
on one
one project,
project, you'll
you'll see
see the
the details
details of
of your
your project.


:::info Note

Depending on
on the
the user
user role
role you’re
you’re assigned
assigned to,
to, you
you can
can request
request a
a new
new project
project or
or environment
environment for
for your
your organization.



### New
New project

You can
can request
request a
a new
new project
project from
from both
both the
the homepage
homepage and
and your
your organization
organization page.
page. Click
Click **New
**New project**
project** and
and fill
fill in
in the
the new
new project
project name,
name, the
the contact
contact email
email that
that we
we can
can use
use to
to contact
contact for
for further
further provisioning
provisioning and
and the
the platform
platform version
version you’re
you’re planning
planning to
to use
use for
for your
your new
new project.




### Project
Project settings

In the
the settings
settings page
page you
you can
can set
set your
your project
project name
name and
and review
review the
the project
project key
key and
and the
the region
region your
your project
project is
is running.
running. If
If you
you want
want to
to change
change the
the region,
region, you
you can
can contact
contact our
our Sales
Sales Team.
 

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/project-settings/environments">

<img src="/img/icons/cloud.svg"
src="/img/icons/cloud.svg" />




<Card to="/console/project-settings/codebase">

<img src="/img/icons/gitfork.svg"
src="/img/icons/gitfork.svg" />





id: environments

title: Environments

sidebar_label: Environments


By default
default you
you can
can use
use three
three environments
environments per
per project.
project. If
If you
you need
need more
more environments
environments for
for your
your development,
development, you
you can
can request
request an
an additional
additional environment.
environment. Depending
Depending on
on the
the requirements,
requirements, we
we will
will then
then configure
configure the
the new
new environment
environment to
to your
your needs.


### Additional
Additional environments

You can
can request
request additional
additional environments,
environments, for
for example
example an
an extra
extra development
development environment
environment to
to suit
suit your
your workflow,
workflow, via
via the
the home
home screen
screen of
of your
your project.


The project
project region
region is
is applicable
applicable to
to all
all environments.
environments. Available
Available options
options at
at this
this moment
moment are
are `Europe
`Europe (EU-W4)`,
(EU-W4)`, `United
`United States
States (US-C1)`
(US-C1)` or
or `Australia
`Australia (AU-SE1)`.
(AU-SE1)`. You
You can
can request
request a
a migration
migration of
of your
your project
project region
region via
via our
our customer
customer support.



### Build
Build &
& Deploy

Each environment
environment can
can be
be used
used to
to deploy
deploy your
your created
created Deity
Deity apps
apps to.
to. So
So every
every time
time you
you push
push changes
changes to
to your
your Git
Git repository,
repository, Deity
Deity Cloud
Cloud will
will receive
receive a
a signal
signal from
from your
your Git
Git provider
provider and
and starts
starts building
building the
the Deity
Deity app.
app. When
When the
the build
build is
is successfully
successfully completed,
completed, you
you can
can select
select it
it to
to deploy
deploy it
it to
to one
one of
of your
your environments.
 

[Read more
more about
about builds
builds &
& deployments
deployments →](../builds-deployments)


### Custom
Custom Domains

Every environment
environment uses
uses an
an internal
internal Deity
Deity Cloud
Cloud URL,
URL, something
something along
along the
the line
line of:






You can
can always
always access
access the
the internal
internal URL
URL for
for review
review and
and development
development purposes.
purposes. Additionally,
Additionally, you
you can
can set
set multiple
multiple custom
custom domains
domains per
per environment.
environment. For
For instance,
instance, you
you want
want to
to use
use `https://brandname.webshopname.com`
`https://brandname.webshopname.com` to
to point
point to
to one
one of
of the
the environments.


You can
can set
set this
this in
in the
the [Storefront
[Storefront →
→ Domains](../storefront/domains)
Domains](../storefront/domains) section.





id: codebase

title: Codebase

sidebar_label: Codebase


If you’ve
you’ve followed
followed the
the [Getting
[Getting Started](../getting-started/deity-project)
Started](../getting-started/deity-project) instructions,
instructions, you’ve
you’ve successfully
successfully set-up
set-up your
your Deity
Deity project
project and
and connected
connected it
it to
to your
your Git
Git repository.


## Npm

Follow the
the instructions
instructions to
to configure
configure npm
npm access
access on
on your
your local
local machine.
 

### Access
Access Deity’s
Deity’s npm
npm packages

Navigate to
to **Settings
**Settings →
→ Codebase**
Codebase** to
to find
find your
your npm
npm token.
token. In
In order
order to
to access
access the
the Deity
Deity packages,
packages, you
you will
will connect
connect to
to the
the private
private npm
npm registry
registry using
using this
this token.
token. We
We recommend
recommend adding
adding your
your token
token to
to a
a user
user config,
config, it
it can
can however
however be
be added
added in
in your
your projects
projects root.


You'll need
need to
to either
either create
create or
or edit
edit a
a `.npmrc`
`.npmrc` file.
file. The
The user
user config
config can
can be
be found
found in
in your
your users
users root
root directory
directory `~/.npmrc`.
`~/.npmrc`. If
If you
you don't
don't have
have one,
one, you
you can
can create
create one:



nano ~/.npmrc



Add the
the npm
npm token
token to
to your
your `.npmrc`
`.npmrc` file,
file, for
for example:








You can
can test
test whether
whether it
it is
is configured
configured correctly
correctly by
by running
running the
the following
following command,
command, which
which will
will output
output the
the list
list of
of available
available version
version of
of our
our demo
demo app
app creation.




npm view
view @deity/create-falcon-app



### Git
Git repository

Once you’ve
you’ve created
created a
a new
new Deity
Deity project
project on
on your
your local
local machine,
machine, you
you can
can push
push this
this to
to your
your repository
repository of
of choice.
choice. We
We currently
currently support
support GitHub,
GitHub, GitLab
GitLab and
and Bitbucket.


If you’ve
you’ve already
already set
set up
up a
a webhook
webhook in
in your
your Git
Git repository
repository provider
provider and
and pushed
pushed your
your code
code to
to your
your repository,
repository, it
it will
will have
have triggered
triggered the
the detection
detection of
of your
your repository.
repository. You’ll
You’ll see
see it
it listed
listed after
after that.
that. For
For example:






#### Setting
Setting up
up for
for the
the first
first time

To link
link your
your repository
repository to
to the
the Deity
Deity platform
platform and
and enable
enable automatic
automatic build
build creation,
creation, you’ll
you’ll need
need to
to configure
configure read
read access
access on
on the
the repository,
repository, and
and a
a webhook
webhook to
to notify
notify Deity
Deity of
of push
push events.


1. Copy
Copy the
the SSH
SSH key,
key, and
and add
add it
it as
as a
a read-only
read-only deploy
deploy key
key to
to your
your repository.


2. Next
Next up,
up, you’ll
you’ll want
want to
to copy
copy the
the webhook
webhook URL.
URL. Add
Add it
it to
to your
your repository,
repository, set
set the
the content
content type
type to
to application/json
application/json and
and select
select the
the git
git push
push event
event to
to trigger
trigger the
the webhook.


3. You
You can
can test
test if
if the
the configuration
configuration was
was successful
successful by
by pushing
pushing your
your code
code to
to the
the repository.
repository. You
You should
should see
see your
your repository
repository name
name appear
appear in
in the
the console,
console, as
as well
well as
as a
a new
new build.



id: key-concepts

title: Key
Key Concepts

sidebar_label: Key
Key Concepts



import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Button
Button from
from '@site/src/components/Button';


## Deity
Deity Cloud

Deity Cloud
Cloud is
is an
an infrastructure
infrastructure that
that allows
allows you
you to
to host
host your
your Falcon
Falcon site.
site. It
It will
will scale
scale automatically
automatically depending
depending on
on your
your needs
needs and
and traffic,
traffic, meaning
meaning your
your site
site is
is always
always blazing
blazing fast.
fast. Deity
Deity Cloud
Cloud uses
uses Google
Google web
web services
services to
to provide
provide a
a scalable
scalable and
and geo
geo appropriate
appropriate hosting
hosting solution
solution for
for your
your app.


<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="/console/cloud">

More about
about Deity
Deity Cloud
Cloud →




## Organization

Your organization
organization is
is the
the billing
billing entity
entity which
which holds
holds all
all your
your projects
projects and
and users.
users. You
You can
can manage
manage your
your contact
contact details,
details, invite
invite and
and manage
manage your
your users,
users, add
add or
or delete
delete billing
billing methods
methods and
and download
download your
your invoices.


<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="/console/organization">

More about
about organizations
organizations →



## Projects

Depending on
on the
the number
number of
of projects
projects your
your organization
organization is
is managing
managing in
in the
the Deity
Deity Platform,
Platform, you’ll
you’ll see
see a
a list
list of
of projects
projects to
to choose
choose from,
from, or
or you’ll
you’ll directly
directly see
see the
the specific
specific project
project dashboard
dashboard you’ve
you’ve been
been granted
granted access
access to.


<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="/console/organization/projects">

More about
about projects
projects →



<div className="mb80"></div>



## Managing
Managing your
your Deity
Deity products

<div className="flex
className="flex mb100
mb100 brighten">

<Card to="/console/composer">

<img src="/img/icons/ticker.svg"
src="/img/icons/ticker.svg" />


<p>Compose outstanding
outstanding digital
digital experiences
experiences to
to achieve
achieve transactional
transactional excellence.</p>


<Card to="/console/storefront">

<img src="/img/icons/shop.svg"
src="/img/icons/shop.svg" />


<p>Focus on
on customer
customer experience
experience to
to exceed
exceed expectations.</p>


<Card to="/console/payments">

<img src="/img/icons/coins.svg"
src="/img/icons/coins.svg" />


<p>Integrate multiple
multiple payment
payment service
service providers
providers to
to use
use any
any payment
payment method.</p>




## Other
Other platform
platform concepts


<div className="flex
className="flex brighten">

<Card to="/console/organization/projects">

<img src="/img/icons/activity.svg"
src="/img/icons/activity.svg" />

<h4>Platform Usage</h4>

<p>For each
each organization
organization project,
project, Deity
Deity offers
offers pre-paid
pre-paid subscriptions
subscriptions that
that include
include a
a large
large number
number of
of GraphQL
GraphQL client
client requests.
requests. Once
Once you
you go
go over
over this
this threshold,
threshold, you’ll
you’ll be
be billed
billed surcharges
surcharges separately
separately based
based on
on the
the number
number of
of incoming
incoming client
client requests.</p>


<Card to="/console/settings/environments">

<img src="/img/icons/cloud.svg"
src="/img/icons/cloud.svg" />


<p>For each
each project,
project, Deity
Deity offers
offers three
three Deity
Deity Cloud
Cloud environments
environments to
to start
start with;
with; Test,
Test, acceptance
acceptance &
& production.
production. If
If you
you need
need more
more environments
environments for
for your
your project,
project, you
you can
can always
always request
request more.</p>




<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/builds-deployments/builds">

<img src="/img/icons/cpu.svg"
src="/img/icons/cpu.svg" />


<p>A build
build is
is a
a full
full build
build of
of a
a particular
particular commit.
commit. This
This is
is not
not accessible
accessible unless
unless it's
it's deployed.
deployed. Having
Having builds
builds for
for each
each of
of your
your commits
commits means
means it's
it's near
near instant
instant to
to update
update your
your environments.</p>


<Card to="/console/builds-deployments/deployments">

<img src="/img/icons/deployment.svg"
src="/img/icons/deployment.svg" />


<p>Deployments are
are when
when a
a build
build has
has been
been pushed
pushed to
to an
an environment.
environment. You
You can
can deploy
deploy these
these builds
builds to
to one
one of
of your
your environments.</p>





id: organization

title: Organization

sidebar_label: Organization



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';


Your organization
organization is
is the
the billing
billing entity
entity which
which holds
holds all
all your
your projects
projects and
and users.
users. You
You can
can manage
manage your
your contact
contact details,
details, invite
invite and
and manage
manage your
your users,
users, add
add or
or delete
delete billing
billing methods
methods and
and download
download your
your invoices.


The organization
organization landing
landing page
page shows
shows all
all available
available projects
projects for
for the
the selected
selected organization.
organization. You
You can
can visit
visit the
the following
following organization
organization topics.


:::info Note

The following
following links
links are
are available
available in
in your
your Deity
Deity Cloud
Cloud Console
Console depending
depending on
on your
your assigned
assigned user
user role.



### Please
Please select
select a
a topic

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/organization/projects">

<img src="/img/icons/folders.svg"
src="/img/icons/folders.svg" />




<Card to="/console/organization/billing-details">

<img src="/img/icons/billing.svg"
src="/img/icons/billing.svg" />

<h4>Billing details</h4>



<Card to="/console/organization/invoices">

<img src="/img/icons/receipt.svg"
src="/img/icons/receipt.svg" />




<Card to="/console/organization/users">

<img src="/img/icons/users.svg"
src="/img/icons/users.svg" />






id: log-entries

title: Log
Log Explorer

sidebar_label: Log
Log Explorer



import Badge
Badge from
from '@site/src/components/Badge';


The log
log explorer
explorer enables
enables you
you to
to scrutinize
scrutinize and
and interrogate
interrogate the
the logs
logs produced
produced by
by your
your remote
remote Composer
Composer and
and Storefront
Storefront applications.
applications. The
The logs
logs displayed
displayed are
are relevant
relevant to
to the
the environment
environment you
you have
have chosen,
chosen, which
which you
you can
can switch
switch using
using the
the dropdown
dropdown menu
menu in
in the
the top
top navigation.
navigation. Please
Please bear
bear in
in mind
mind that
that only
only the
the logs
logs emanating
emanating from
from remote
remote environments
environments are
are visible
visible in
in your
your console;
console; logs
logs from
from local
local applications
applications executed
executed on
on your
your machine
machine will
will not
not appear
appear here.
here. For
For local
local development,
development, you
you can
can utilize
utilize our
our CLI
CLI tool
tool to
to inspect
inspect logs.


### Log
Log entries

Each log
log entry
entry can
can be
be expanded
expanded to
to show
show detailed
detailed information.
information. For
For most
most entries,
entries, you
you will
will find
find the
the following
following types
types of
of basic
basic information
information per
per entry:


- <Badge
<Badge variant="console">severity</Badge>
variant="console">severity</Badge> indicates
indicates the
the severity
severity classification
classification of
of the
the entry.
entry. Default
Default severity
severity values
values -
- from
from lowest
lowest to
to highest
highest -
- are
are trace,
trace, info,
info, debug,
debug, warning,
warning, error
error and
and critical.


- <Badge
<Badge variant="console">app</Badge>
variant="console">app</Badge> indicates
indicates from
from which
which application
application the
the log
log entry
entry was
was produced
produced —
— either
either falcon-server
falcon-server or
or falcon-client.


- <Badge
<Badge variant="console">name</Badge>
variant="console">name</Badge> indicates
indicates the
the module
module which
which produced
produced the
the log.
log. For
For composer
composer logs,
logs, this
this is
is typically
typically the
the name
name of
of the
the platform
platform module


- <Badge
<Badge variant="console">durationMs</Badge>
variant="console">durationMs</Badge> the
the amount
amount of
of milliseconds
milliseconds it
it took
took to
to resolve
resolve an
an outgoing
outgoing request


- <Badge
<Badge variant="console">msg</Badge>
variant="console">msg</Badge> the
the log
log message


- <Badge
<Badge variant="console">timestamp</Badge>
variant="console">timestamp</Badge> the
the timestamp
timestamp of
of the
the log
log in
in GMT+2


Additional log
log fields
fields may
may be
be available
available depending
depending on
on the
the type
type of
of entry,
entry, e.g.
e.g. a
a cache
cache entry
entry may
may show
show more
more information.


### Searching
Searching logs

You can
can use
use the
the search
search and
and filtering
filtering options
options to
to narrow
narrow down
down the
the listed
listed entries.
entries. You
You can:


- Do
Do a
a full-text
full-text search,
search, which
which will
will search
search through
through the
the entire
entire log
log entry
entry payload.
payload. Searches
Searches are
are executed
executed on
on an
an exact-match
exact-match basis.


- Filter
Filter on
on source
source module.
module. Your
Your input
input is
is matched
matched exactly
exactly against
against the
the module
module name
name field.
field. For
For example,
example, use
use this
this to
to filter
filter on
on logs
logs produced
produced by
by your
your BigCommerce
BigCommerce module.


- Select
Select the
the start
start date,
date, which
which is
is the
the minimum
minimum timestamp
timestamp of
of the
the log
log entry,
entry, based
based on
on a
a GMT+2
GMT+2 timezone.
timezone. Only
Only log
log entries
entries created
created on
on or
or after
after the
the selected
selected date
date and
and time
time will
will be
be displayed.


- Select
Select the
the end
end date,
date, which
which is
is the
the maximum
maximum timestamp
timestamp of
of the
the log
log entry,
entry, based
based on
on a
a GMT+2
GMT+2 timezone.
timezone. Only
Only log
log entries
entries created
created on
on or
or before
before the
the selected
selected date
date and
and time
time will
will be
be displayed.


- Filter
Filter on
on the
the severity
severity level.
level. You
You can
can select
select a
a single
single severity
severity level
level to
to filter
filter on.


### Log
Log settings

You may
may want
want to
to collect
collect logs
logs differently
differently per
per environment.
environment. Common
Common use
use cases
cases are
are to
to collect
collect the
the most
most detailed
detailed level
level of
of logs
logs on
on your
your test
test environment,
environment, while
while on
on your
your production
production environment
environment you
you only
only want
want to
to log
log warnings
warnings and
and higher.


You can
can control
control these
these settings
settings in
in your
your logs
logs panel.
panel. Click
Click the
the cogwheel
cogwheel and
and select
select the
the minimum
minimum log
log level
level you
you want
want the
the currently
currently selected
selected environment
environment to
to produce.
produce. For
For example,
example, if
if you
you select
select `Error`,
`Error`, only
only error
error and
and critical
critical level
level logs
logs will
will be
be produced.


id: overview

title: Introduction

description: How
How to
to get
get started
started with
with Falcon
Falcon Platform




## Basic
Basic setup
setup steps


Getting started
started with
with Falcon
Falcon Platform
Platform can
can be
be broken
broken down
down into
into a
a few
few simple
simple steps.


1. [Prerequisites](prerequisites)

2. [Setup
[Setup Dcloud](dcloud)

3. [Get
[Get access
access to
to our
our private
private NPM
NPM packages](npm)

4. [Create
[Create and
and configure
configure your
your app](create)

5. [Configure
[Configure your
your environment](configure)

6. [Create
[Create and
and configure
configure your
your code
code repository](repository)

7. [Manage
[Manage and
and deploy
deploy your
your app](/platform/deployment/overview)


id: link-repository

title: Link
Link Your
Your Repository

sidebar_label: 3.
3. Link
Link Repository



Now that
that you’ve
you’ve created
created a
a new
new Deity
Deity template
template app
app on
on your
your local
local machine,
machine, you
you can
can push
push this
this to
to your
your repository
repository of
of choice.
choice. We
We currently
currently support
support GitHub,
GitHub, GitLab
GitLab and
and Bitbucket.


## Setting
Setting up
up for
for the
the first
first time


To link
link your
your repository
repository to
to the
the Deity
Deity platform
platform and
and enable
enable automatic
automatic build
build creation,
creation, you’ll
you’ll need
need to
to configure
configure read
read access
access on
on the
the repository,
repository, and
and a
a webhook
webhook to
to notify
notify Deity
Deity about
about Git
Git push
push events.


1. Navigate
Navigate to
to the
the **Git
**Git repository**
repository** page
page of
of your
your codebase
codebase settings
settings in
in the
the console.
console. Copy
Copy the
the SSH
SSH key,
key, and
and add
add it
it as
as a
a read-only
read-only deploy
deploy key
key to
to your
your repository.


2. Next
Next up,
up, you’ll
you’ll want
want to
to copy
copy the
the webhook
webhook URL.
URL. Add
Add it
it to
to your
your repository,
repository, set
set the
the content
content type
type to
to `application/json`
`application/json` and
and select
select the
the <code>git
<code>git push</code>
push</code> event
event to
to trigger
trigger the
the webhook.


3. YouYou cancan testtest ifif thethe configurationconfiguration waswas successfulsuccessful byby pushingpushing youryour codecode toto thethe repository.repository. YouYou shouldshould seesee youryour repositoryrepository namename appearappear inin thethe console,console, asas wellwell asas aa newnew build.
id: create-application

title: Create
Create Deity
Deity Application

sidebar_label: 2.
2. Create
Create Application


import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';

import Badge
Badge from
from '@site/src/components/Badge';


Now that
that you
you have
have access
access to
to our
our packages,
packages, let’s
let’s create
create a
a Deity
Deity template
template application.
application. You
You can
can choose
choose from
from three
three of
of our
our templates.


## Choose
Choose demo
demo template


<div class="mb20">

<Card variant="horizontal"
variant="horizontal" to="/#">

	<img src="/img/icons/magento.svg"
src="/img/icons/magento.svg" className="round-icon"
className="round-icon" />&nbsp;+&nbsp;

	<img src="/img/icons/wordpress.svg"
src="/img/icons/wordpress.svg" className="round-icon"
className="round-icon" />




Template with
with preconfigured
preconfigured Magento
Magento 2
2 store
store and
and a
a WordPress
WordPress blog.




<Card variant="horizontal"
variant="horizontal" to="/#">

<img src="/img/icons/bigcommerce.svg"
src="/img/icons/bigcommerce.svg" className="round-icon"
className="round-icon" />&nbsp;+&nbsp;

<img src="/img/icons/algolia.svg"
src="/img/icons/algolia.svg" className="round-icon"
className="round-icon" />




Template based
based on
on a
a BigCommerce
BigCommerce store
store and
and Algolia
Algolia search
search engine.




<Card variant="horizontal"
variant="horizontal" to="/#">

	<img src="/img/icons/commercetools.svg"
src="/img/icons/commercetools.svg" className="round-icon"
className="round-icon" />&nbsp;+&nbsp;

<img src="/img/icons/contentful.svg"
src="/img/icons/contentful.svg" className="round-icon"
className="round-icon" />




Template based
based on
on a
a Commercetools
Commercetools store
store and
and Contentful
Contentful blog.



    



You can
can generate
generate one
one of
of these
these template
template apps
apps by
by running
running the
the following
following command
command in
in your
your terminal:



npx @deity/create-falcon-app
@deity/create-falcon-app --full
--full <demo
<demo version>
version> <project-name>
 


A new
new project
project will
will be
be created
created into
into the
the directory
directory `<project-name>`.
`<project-name>`. The
The file
file structure
structure is
is straightforward:








You can
can run
run the
the project
project on
on your
your local
local machine.
machine. Note
Note that
that you
you will
will need
need to
to run
run both
both apps
apps separately
separately as
as follows:




cd client

yarn start




cd server

yarn start


id: access-packages

title: Access
Access Deity
Deity Packages

sidebar_label: 1.
1. Access
Access Npm
Npm Packages




Navigate to
to **Settings
**Settings →
→ Codebase**
Codebase** to
to find
find your
your npm
npm token.
token. In
In order
order to
to access
access the
the Deity
Deity packages,
packages, you
you will
will connect
connect to
to the
the private
private npm
npm registry
registry using
using this
this token.
token. We
We recommend
recommend adding
adding your
your token
token to
to a
a user
user config,
config, it
it can
can however
however be
be added
added in
in your
your projects
projects root.


## Configure
Configure npm
npm file


You'll need
need to
to either
either create
create or
or edit
edit a
a `.npmrc`
`.npmrc` file.
file. The
The user
user config
config can
can be
be found
found in
in your
your users
users root
root directory
directory `~/.npmrc`.
`~/.npmrc`. If
If you
you don't
don't have
have one,
one, you
you can
can create
create one:




nano ~/.npmrc



Add the
the npm
npm token
token to
to your
your `.npmrc`
`.npmrc` file,
file, for
for example:








You can
can test
test whether
whether it
it is
is configured
configured correctly
correctly by
by running
running the
the following
following command,
command, which
which will
will output
output the
the list
list of
of available
available version
version of
of our
our demo
demo app
app creation.




npm view
view @deity/create-falcon-app




id: sign-up

title: Sign
Sign Up

sidebar_label: Sign
Sign Up


import Button
Button from
from '@site/src/components/Button';


## No
No Deity
Deity account
account yet?

You can
can sign
sign up
up for
for a
a new
new account
account at
at Deity
Deity Cloud
Cloud Console.
Console. Fill
Fill in
in the
the form
form with
with the
the required
required personal
personal details
details and
and optionally
optionally add
add a
a note
note to
to provide
provide more
more information
information about
about your
your Deity
Deity powered
powered digital
digital experience
experience project.
project. Your
Your request
request will
will be
be processed
processed by
by our
our sales
sales team,
team, after
after which
which they’ll
they’ll get
get in
in touch
touch with
with you
you to
to help
help you
you further
further and
and provide
provide you
you with
with a
a personalized
personalized offering.
offering. Once
Once that
that is
is settled,
settled, you
you will
will be
be invited
invited to
to join
join the
the project
project we’ve
we’ve created
created for
for you.
you. Either
Either you
you or
or someone
someone you’ve
you’ve assigned
assigned will
will then
then be
be the
the organisation
organisation owner
owner in
in the
the Deity
Deity Platform.


<Button variant="outlined"
variant="outlined" size="medium"
size="medium" href="https://console.deity.cloud/signup"
href="https://console.deity.cloud/signup" target="_blank">

Sign up
up for
for an
an account
account &nbsp;

<svg width="25"
width="25" height="25"
height="25" viewBox="0
viewBox="0 0
0 25
25 25"
25" fill="none"
fill="none" xmlns="http://www.w3.org/2000/svg">

	<path d="M19.5312
d="M19.5312 13.2812H24.2188"
13.2812H24.2188" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

	<path d="M21.875
d="M21.875 10.9375V15.625"
10.9375V15.625" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>

	<path d="M10.5469
d="M10.5469 15.625C13.7829
15.625C13.7829 15.625
15.625 16.4062
16.4062 13.0017
13.0017 16.4062
16.4062 9.76562C16.4062
9.76562C16.4062 6.52958
6.52958 13.7829
13.7829 3.90625
3.90625 10.5469
10.5469 3.90625C7.31083
3.90625C7.31083 3.90625
3.90625 4.6875
4.6875 6.52958
6.52958 4.6875
4.6875 9.76562C4.6875
9.76562C4.6875 13.0017
13.0017 7.31083
7.31083 15.625
15.625 10.5469
10.5469 15.625Z"
15.625Z" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-miterlimit="10"/>

	<path d="M2.16797
d="M2.16797 19.5314C3.19459
19.5314C3.19459 18.3078
18.3078 4.47673
4.47673 17.3239
17.3239 5.92428
5.92428 16.6489C7.37183
16.6489C7.37183 15.9738
15.9738 8.94966
8.94966 15.624
15.624 10.5469
10.5469 15.624C12.1441
15.624C12.1441 15.624
15.624 13.7219
13.7219 15.9738
15.9738 15.1695
15.1695 16.6489C16.617
16.6489C16.617 17.3239
17.3239 17.8992
17.8992 18.3078
18.3078 18.9258
18.9258 19.5314"
19.5314" stroke="currentColor"
stroke="currentColor" stroke-width="1.5"
stroke-width="1.5" stroke-linecap="round"
stroke-linecap="round" stroke-linejoin="round"/>




### Joining
Joining an
an existing
existing team

In case
case you
you want
want to
to join
join an
an existing
existing team,
team, which
which already
already has
has a
a Deity
Deity account,
account, your
your organisation
organisation owner
owner or
or administrators
administrators can
can send
send you
you an
an invitation.
invitation. You
You will
will receive
receive this
this invitation
invitation via
via email,
email, from
from which
which you
you can
can accept
accept it
it and
and create
create a
a new
new user
user account.
 

## Accepting
Accepting your
your invitation

You will
will receive
receive an
an invitation
invitation to
to join
join your
your organization
organization via
via email.
email. Click
Click the
the link
link in
in the
the email
email to
to navigate
navigate to
to the
the Deity
Deity console
console from
from which
which you
you can
can create
create a
a new
new user
user account.
account. You
You can
can choose
choose to
to sign
sign up
up with
with either
either one
one of
of the
the social
social logins
logins –
– Google,
Google, Microsoft,
Microsoft, Github
Github or
or Bitbucket
Bitbucket –
– or
or create
create an
an account
account using
using your
your email
email address
address and
and password.
password. After
After successfully
successfully doing
doing this,
this, you
you will
will be
be automatically
automatically added
added to
to your
your organisation’s
organisation’s projects
projects with
with the
the role
role assigned
assigned to
to you
you by
by the
the person
person who
who invited
invited you.


You are
are now
now logged
logged in
in to
to Deity’s
Deity’s Console.
Console. Please
Please fill
fill in
in your
your profile
profile details
details to
to finish
finish account
account set-up.


## Your
Your profile


Once you’ve
you’ve completed
completed your
your sign-up
sign-up after
after accepting
accepting the
the invitation,
invitation, you
you can
can log
log in
in with
with your
your provided
provided credentials
credentials or
or one
one of
of the
the social
social login
login methods.


The first
first time
time you
you log
log in,
in, your
your profile
profile details
details need
need to
to be
be completed.
completed. To
To do
do so,
so, click
click your
your email
email and
and avatar
avatar in
in the
the main
main menu
menu and
and click
click on
on **Profile**
**Profile** to
to update
update your
your profile
profile details,
details, such
such as
as first
first name
name and
and last
last name.


### Organization’s
Organization’s access

You cancan viewview thethe listlist ofof organizationsorganizations you’reyou’re membermember of,of, andand switchswitch toto anotheranother organizationorganization ifif needed.needed. You’llYou’ll thenthen seesee thethe listlist ofof projectsprojects forfor thatthat organization.organization. VisitVisit thethe dedicateddedicated chapterchapter aboutabout [organizations](../organization).
id: new-project

title: Start
Start developing
developing your
your project

sidebar_label: Start
Start Developing



import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';


 
<p className="desc
className="desc pb20">

Depending on
on the
the number
number of
of projects
projects your
your organization
organization is
is managing
managing in
in the
the Deity
Deity Platform,
Platform, you’ll
you’ll see
see a
a list
list of
of projects
projects to
to choose
choose from,
from, or
or you’ll
you’ll directly
directly see
see the
the specific
specific project
project dashboard
dashboard you’ve
you’ve been
been granted
granted access
access to.</p>


### Steps
Steps to
to take


Now that
that you
you have
have a
a basic
basic understanding
understanding of
of how
how projects
projects are
are organised
organised in
in Deity
Deity Platform,
Platform, you
you can
can start
start building
building your
your digital
digital experiences
experiences with
with Deity
Deity Composer
Composer and
and additional
additional Deity
Deity building
building blocks.


Please follow
follow these
these three
three simple
simple steps
steps to
to connect
connect your
your codebase
codebase with
with the
the selected
selected Deity
Deity project
project and
and Deity
Deity Cloud
Cloud powered
powered CI/CD
CI/CD pipeline.
 


<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/platform/getting-started/access-packages">

<img src="/img/icons/package.svg"
src="/img/icons/package.svg" />

<h4>Access Npm
Npm Packages</h4>

<p>Get the
the Deity
Deity Platform
Platform packages.</p>


<Card to="/platform/getting-started/create-application">

<img src="/img/icons/deity.svg"
src="/img/icons/deity.svg" />

<h4>Create Application</h4>

<p>Create your
your first
first Deity
Deity application.</p>


<Card to="/platform/getting-started/link-repository">

<img src="/img/icons/repository.svg"
src="/img/icons/repository.svg" />

<h4>Link Repository</h4>

<p>Link your
your codebase
codebase to
to Deity
Deity Cloud.</p>





### Want
Want to
to know
know more
more about
about Deity
Deity Cloud?


Deity Cloud
Cloud is
is an
an infrastructure
infrastructure that
that allows
allows you
you to
to host
host your
your Deity
Deity codebase.
codebase. The
The infrastructure
infrastructure will
will scale
scale automatically
automatically depending
depending on
on your
your needs
needs and
and traffic,
traffic, meaning
meaning your
your site
site is
is always
always blazing
blazing fast.
fast. Depending
Depending on
on your
your plan
plan you'll
you'll be
be able
able to
to have
have as
as many
many environments
environments as
as you
you need
need making
making it
it easy
easy to
to test
test new
new features
features before
before putting
putting them
them live.


Built with
with internationalization
internationalization in
in mind,
mind, Deity
Deity Cloud
Cloud supports
supports multi-region
multi-region based
based on
on geolocation.


[Read moremore →](../../console/cloud/about)
id: project-settings

title: Projects

sidebar_label: Projects



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';


Your projects
projects are
are provisioned
provisioned by
by Deity.
Deity. On
On the
the homepage
homepage you
you can
can see
see the
the list
list of
of your
your projects,
projects, the
the amount
amount of
of available
available environments
environments and
and which
which region
region your
your environments
environments are
are housed
housed in.
in. If
If you
you are
are currently
currently working
working on
on one
one project,
project, you'll
you'll see
see the
the details
details of
of your
your project.


:::info Note

The following
following links
links are
are available
available in
in your
your Deity
Deity Cloud
Cloud Console
Console depending
depending on
on your
your assigned
assigned user
user role.



### Please
Please select
select a
a topic

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/project-settings/overview">

<img src="/img/icons/folders.svg"
src="/img/icons/folders.svg" />




<Card to="/console/project-settings/environments">

<img src="/img/icons/cloud.svg"
src="/img/icons/cloud.svg" />




<Card to="/console/project-settings/codebase">

<img src="/img/icons/gitfork.svg"
src="/img/icons/gitfork.svg" />





id: account

title: Getting
Getting a
a cloud
cloud account

sidebar_label: Getting
Getting a
a cloud
cloud account



As part
part of
of the
the your
your Falcon
Falcon Platform
Platform account
account you'll
you'll get
get access
access to
to Falcon
Falcon Cloud.


If you're
you're using
using our
our **BigCommerce**
**BigCommerce** integration
integration you
you can
can create
create and
and manage
manage your
your account
account through
through our
our BigCommerce
BigCommerce app.
app. If
If you're
you're not
not using
using BigCommerce
BigCommerce please
please <a
<a href="https://deity.com/contact"
href="https://deity.com/contact" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">contact
noopener">contact our
our support
support team</a>
team</a> to
to create
create an
an account.


id: prerequisites

title: Prerequisites

sidebar_label: Prerequisites



## What
What you
you need
need before
before you
you start


- A
A git
git repository
repository pushed
pushed to
to <a
<a href="https://github.com/"
href="https://github.com/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">GitHub</a>,
noopener">GitHub</a>, <a
<a href="https://bitbucket.org/"
href="https://bitbucket.org/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">BitBucket</a>
noopener">BitBucket</a> or
or <a
<a href="https://about.gitlab.com/"
href="https://about.gitlab.com/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">GitLab</a>.
noopener">GitLab</a>. This
This should
should contain
contain a
a <a
<a href="https://deity.com/falcon"
href="https://deity.com/falcon" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">Falcon
noopener">Falcon site</a>.

- A
A Falcon
Falcon Platform
Platform account.
account. Find
Find out
out [how
[how to
to set
set up
up an
an account](account)


## Technical
Technical Requirements


- Node
Node (Minimum
(Minimum requirement
requirement is
is version
version 12).
12). <a
<a href="https://nodejs.org/en/download/"
href="https://nodejs.org/en/download/" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">How
noopener">How to
to install
install Node</a>.


:::note Important

To use
use **Falcon
**Falcon platform
platform V2**
V2** for
for your
your site
site you'll
you'll need
need an
an **auth
**auth token**
token** so
so you
you can
can access
access packages
packages from
from <a
<a href="https://npm.deity.io"
href="https://npm.deity.io" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">https://npm.deity.io</a>.
noopener">https://npm.deity.io</a>. This
This will
will be
be provided
provided when
when you
you create
create an
an account.



id: dcloud

title: CLI
CLI Reference

sidebar_label: CLI
CLI Reference



## Build
Build List


List your
your current
current builds.



dcloud build:list




- `-l
`-l <limit>`
<limit>` Limit
Limit the
the results

- `-p
`-p <page>`
<page>` Which
Which page
page of
of results
results to
to show


**Example: show
show 30
30 results**



dcloud build:list
build:list -l
-l 30





## Build
Build Info


Get information
information on
on a
a build.



dcloud build
build [id]




- `-w`
`-w` Watch
Watch a
a build
build (if
(if it's
it's not
not finished)

- `-o`
`-o` Show
Show build
build output
output to
to the
the console


**Example: Watch
Watch the
the build
build with
with id
id 20**



dcloud build
build 20
20 -w





## Deployment
Deployment List

List your
your deployments



dcloud deployment:list




- `-l
`-l <limit>`
<limit>` Limit
Limit the
the results

- `-p
`-p <page>`
<page>` Which
Which page
page of
of results
results to
to show


**Example: show
show 30
30 results
results on
on the
the second
second page**



dcloud deployment:list
deployment:list -l
-l 30
30 -p
-p 2





## Deployment
Deployment Info


Get information
information on
on a
a deployment.



dcloud deployment
deployment [id]




- `-w`
`-w` Watch
Watch a
a deployment
deployment (if
(if it's
it's not
not finished)

- `-o`
`-o` Show
Show deployment
deployment output
output to
to the
the console


**Example: show
show the
the output
output of
of deployment
deployment 2**



dcloud deployment
deployment -o
-o 2





## Deploy


Deploy a
a build



dcloud deployment:run
deployment:run [buildId]
[buildId] [environmentName]




- `-y`
`-y` Auto-confirm
Auto-confirm the
the deployment
deployment process.
process. Useful
Useful if
if you're
you're not
not deploying
deploying manually.


**Example: Deploy
Deploy build
build 20
20 to
to the
the development
development environment**



dcloud deployment:run
deployment:run 20
20 development





## Environments
Environments List


List all
all available
available environments



dcloud env:list








## Environment
Environment Info


Get info
info on
on a
a specific
specific environment



dcloud env
env <env>








## Environment
Environment Deployments


Get deployments
deployments for
for an
an environment



dcloud env:deployments
env:deployments <env>




- `-l
`-l <limit>`
<limit>` Limit
Limit the
the results

- `-p
`-p <page>`
<page>` Which
Which page
page of
of results
results to
to show




## Environment
Environment Variable


Set a
a variable
variable on
on an
an environment



dcloud env:var:set
env:var:set <env>
<env> <name>
<name> [value]




- `-s`
`-s` or
or `--secret`
`--secret` encrypt
encrypt the
the variable
variable being
being set


**Example: set
set the
the variable
variable API_KEY
API_KEY to
to 12345
12345 on
on the
the test
test environment
environment and
and encrypt
encrypt it**



dcloud env:var:set
env:var:set -s
-s test
test API_KEY
API_KEY 12345





## Environment
Environment Set
Set Domain


Set the
the domain
domain for
for an
an environment



dcloud env:domain:set
env:domain:set <env>
<env> [domainName]








## Environment
Environment Variables
Variables Apply


Apply environment
environment variable
variable changes
changes without
without redeploying
redeploying your
your app.



dcloud env:var:apply
env:var:apply ENV_NAME








## Repositories
Repositories List


Get a
a list
list of
of your
your current/active
current/active repositories



dcloud repo




- `-i`
`-i` Show
Show setup
setup instructions
instructions for
for each
each repository




## Project
Project Info


Get your
your project
project information



dcloud project
project <name>








## Projects
Projects List


Get a
a list
list of
of your
your projects



dcloud project:list








## Project
Project Current


Get the
the current
current project



dcloud project:current








## Project
Project Set
Set Current


Set a
a project
project as
as current



dcloud project:current:set
project:current:set <name>








## Login


:::note Deprecated

This is
is deprecated,
deprecated, please
please use
use <a
<a href="#login-with-token">Login
href="#login-with-token">Login with
with Token</a>
Token</a> to
to log
log in.
in. Existing
Existing users
users will
will be
be promted
promted to
to migrate
migrate to
to using
using a
a token
token for
for logging
logging in.



Logs into
into Deity
Deity Falcon
Falcon Cloud
Cloud using
using credentials.
credentials. If
If credentials
credentials aren't
aren't passed
passed you
you will
will be
be prompted
prompted to
to add
add them.



dcloud login
login [email]
[email] [password]








## Login
Login with
with token


Logs into
into Deity
Deity Falcon
Falcon Cloud
Cloud using
using a
a token.
token. If
If a
a token
token isn't
isn't passed
passed you
you will
will be
be prompted
prompted to
to add
add one.



dcloud login:token
login:token [token]








## Logout


Logs the
the current
current user
user out



dcloud logout








## Log
Log List


List log
log including
including error,
error, warnings
warnings and
and info



dcloud log:list




- `--severity=<severity>`
`--severity=<severity>` Choose
Choose the
the severity
severity of
of logs
logs you
you wish
wish to
to log
log (`info`,
(`info`, `warning`,
`warning`, `error`
`error` or
or `critical`)

- `-l
`-l <limit>`
<limit>` Limit
Limit the
the results

- `-p
`-p <page>`
<page>` Which
Which page
page of
of results
results to
to show


**Example: Get
Get the
the second
second page
page of
of critical
critical logs**


`dcloud log:list
log:list --severity=critical
--severity=critical -p
-p 2`




## Log
Log Watch


Watch the
the logs
logs for
for an
an environment



dcloud log:watch








## Who
Who am
am I


Get the
the current
current logged
logged in
in user



dcloud whoami






id: deployment

title: Deployment

sidebar_label: Overview



Deployment is
is handled
handled through
through **Falcon
**Falcon Cloud**,
Cloud**, all
all you
you need
need to
to do
do is
is push
push your
your code.


Read more
more about
about [Falcon
[Falcon Cloud](/platform/cloud/about)


To check
check your
your build
build code
code locally
locally you
you can
can run
run the
the `build`
`build` &
& `start`
`start` commands
commands with
with the
the `:prod`
`:prod` flag
flag from
from both
both the
the `server`
`server` and
and `client`.


import {
{ TabsContainer,
TabsContainer, Tabs,
Tabs, TabItem
TabItem }
} from
from '@site/src/components/Tabs';

import CodeBlock
CodeBlock from
from '@theme/CodeBlock';







{ label:
label: 'NPM',
'NPM', value:
value: 'npm'
'npm' },

{ label:
label: 'Yarn',
'Yarn', value:
value: 'yarn'
'yarn' }



<TabItem value="npm">




npm build:prod

npm start:prod




<TabItem value="yarn">




yarn build:prod

yarn start:prod








Find out
out more
more about
about our
our [CLI
[CLI commands](/platform/client/getting-started#build)


id: technical

title: Technical
Technical Overview

sidebar_label: Technical
Technical Overview



## How
How does
does Falcon
Falcon Platform
Platform Cloud
Cloud work?


Cloud uses
uses Google
Google web
web services
services to
to provide
provide a
a scalable
scalable and
and geo
geo appropriate
appropriate hosting
hosting solution
solution for
for your
your app.


## Terminology


### Build

A build
build is
is a
a full
full build
build of
of a
a particular
particular commit.
commit. This
This is
is not
not accessible
accessible unless
unless it's
it's deployed.
deployed. Having
Having builds
builds for
for each
each of
of your
your commits
commits means
means it's
it's near
near instant
instant to
to update
update your
your environments.


### Deployments

Deployments are
are when
when a
a build
build has
has been
been pushed
pushed to
to an
an environment.


### Environments

The number
number of
of environments
environments available
available depends
depends on
on your
your Cloud
Cloud plan.
plan. An
An environment
environment is
is a
a complete
complete infrastructure
infrastructure with
with an
an accessible
accessible URL.


### Repositories

This refers
refers to
to the
the code
code repository
repository for
for your
your site.
   

id: about

title: Deity
Deity Cloud

sidebar_label: Deity
Deity Cloud



## What
What is
is Falcon
Falcon Platform
Platform Cloud


Cloud is
is an
an infrastructure
infrastructure that
that allows
allows you
you to
to host
host your
your <a
<a href="https://deity.com"
href="https://deity.com" target="_blank"
target="_blank" rel="noreferrer
rel="noreferrer noopener">
noopener"> Falcon
Falcon site</a>.


Cloud will
will scale
scale automatically
automatically depending
depending on
on your
your needs
needs and
and traffic,
traffic, meaning
meaning your
your site
site is
is always
always **blazing
**blazing fast**.


Depending on
on your
your plan
plan you'll
you'll be
be able
able to
to have
have as
as many
many environments
environments as
as you
you need
need making
making it
it easy
easy to
to test
test new
new features
features before
before putting
putting them
them live.


Built with
with internationalization
internationalization in
in mind,
mind, Cloud
Cloud supports
supports multi-region
multi-region based
based on
on geolocation.


## DCloud
DCloud CLI
CLI tool


**DCloud** is
is our
our <a
<a href="https://www.w3schools.com/whatis/whatis_cli.asp">CLI
href="https://www.w3schools.com/whatis/whatis_cli.asp">CLI Tool</a>
Tool</a> to
to help
help you
you make
make the
the most
most of
of Falcon
Falcon Platform
Platform Cloud.
Cloud. Find
Find out
out more
more [about
[about DCloud](/platform/cloud/dcloud).


id: installation

title: Installation

sidebar_label: Installation



## Overview


1. [Install
[Install Dcloud](#1-installing-dcloud)

2. [Log
[Log into
into Dcloud](#2-logging-in)

3. [Configure
[Configure your
your code
code repository](#3-configure-your-code-repository)

4. [Configure
[Configure your
your app](#4-configure-your-app)

5. [Deploy
[Deploy your
your code](#5-deploy-your-code)


## 1.
1. Installing
Installing DCloud


Before doing
doing anything
anything you'll
you'll need
need to
to install
install our
our CLI
CLI tool
tool on
on your
your local
local machine.


This can
can be
be done
done using
using **npm**.



npm i
i -g
-g dcloud



Adding `-g`
`-g` will
will install
install it
it globally
globally so
so you
you can
can use
use it
it where
where ever
ever you
you want.


![Installing DCloud](/img/docs/cloud/npm-install-dcloud.gif)


To test
test it's
it's working
working run
run `dcloud`.
`dcloud`. You
You should
should list
list a
a list
list of
of available
available commands.


## 2.
2. Logging
Logging in


The next
next step
step is
is to
to log
log into
into [your
[your cloud
cloud account](account).


From your
your terminal
terminal window
window run
run the
the login
login command.



dcloud login:token
login:token [token]



You'll be
be asked
asked to
to go
go to
to [https://app.deity.cloud/sign-in/authorization-token](https://app.deity.cloud/sign-in/authorization-token)
[https://app.deity.cloud/sign-in/authorization-token](https://app.deity.cloud/sign-in/authorization-token) in
in order
order to
to generate
generate the
the token
token for
for your
your account
account (you'll
(you'll have
have to
to sign
sign in
in with
with your
your account
account to
to access
access it).


Once the
the token
token is
is generated
generated you
you can
can copy
copy it
it from
from the
the browser
browser and
and paste
paste into
into CLI.



If you've
you've not
not yet
yet created
created an
an account
account please
please contact
contact our
our support.



To check
check you're
you're logged
logged in
in correctly
correctly run
run `whoami`



dcloud whoami



## 3.
3. Configure
Configure your
your code
code repository


You'll need
need to
to have
have a
a Falcon
Falcon app
app in
in a
a code
code repository
repository ready
ready to
to deploy.


To do
do this
this please
please follow
follow [these
[these steps](/platform/getting-started/overview).


### Link
Link your
your code
code repository


If you've
you've followed
followed the
the [instructions
[instructions above](/platform/getting-started/repository)
above](/platform/getting-started/repository) you'll
you'll have
have added
added a
a webhook
webhook to
to your
your repo.
repo. This
This will
will automatically
automatically link
link it
it to
to your
your `dcloud`
`dcloud` account.
account. **n.b.
**n.b. You'll
You'll need
need to
to push
push at
at least
least one
one commit
commit before
before the
the repo
repo is
is linked.**


To check
check this
this run
run the
the following
following command:



dcloud repo:list
repo:list -i



## 4.
4. Configure
Configure your
your app


Depending on
on the
the setup
setup you
you are
are running
running you'll
you'll need
need to
to set
set various
various **environement
**environement variables**.
variables**. These
These include
include **BigCommerce**,
**BigCommerce**, **Algolia**
**Algolia** and
and **Stripe**
**Stripe** credentials.
credentials. To
To learn
learn more
more about
about configuration
configuration please
please read
read [these
[these docs](/platform/configuration/overview).


To set
set variables
variables using
using dcloud
dcloud use
use the
the following
following command:



dcloud env:var:set
env:var:set <env>
<env> <name>
<name> [value]



Each integration
integration will
will have
have a
a different
different set
set of
of required
required environment
environment variables.
variables. These
These can
can be
be found
found listed
listed with
with their
their individual
individual integration
integration guides:


- [Algolia](/platform/integration/algolia#deity-cloud-environment-variables)

- [BigCommerce](/platform/integration/bigcommerce/manual#deity-cloud-environment-variables)

- [Magento
[Magento 2](/platform/integration/magento2/getting-started#deity-cloud-environment-variables)

- [Stripe](/platform/integration/stripe#deity-cloud-environment-variables)

- [Wordpress](/platform/integration/wordpress#deity-cloud-environment-variables)


Alongside 3rd
3rd party
party integrations
integrations there
there are
are a
a few
few other
other core
core configurations
configurations you
you might
might want
want to
to set:




We use
use [NodeMailer](https://nodemailer.com/smtp/well-known/)
[NodeMailer](https://nodemailer.com/smtp/well-known/) and
and a
a list
list of
of available
available email
email services
services can
can be
be found
found there.


- `MAILER_SERVICE`:
`MAILER_SERVICE`: email
email service
service provider
provider e.g.
e.g. `gmail`

- `MAILER_USER`:
`MAILER_USER`: email
email user
user e.g.
e.g. `hello@deity.io`

- `MAILER_PASSWORD`:
`MAILER_PASSWORD`: email
email password




You'll need
need to
to define
define which
which search
search API
API you
you want
want to
to use.
use. Currently
Currently only
only `algolia`
`algolia` and
and `bigcommerce`
`bigcommerce` are
are supported.


- `SEARCH_API_NAME`:
`SEARCH_API_NAME`: search
search api
api e.g.
e.g. `bigcommerce`


**Google Tag
Tag Manager**


If you
you want
want to
to use
use Tag
Tag Manager
Manager you'll
you'll have
have to
to set
set your
your container
container ID.


- `GTM_CODE`:
`GTM_CODE`: gtm
gtm container
container ID
ID e.g.
e.g. `GTM-12345`


### Example
Example -
- BigCommerce


[This document](/platform/integration/bigcommerce/manual)
document](/platform/integration/bigcommerce/manual) explains
explains BigCommerce
BigCommerce configuration
configuration in
in more
more details.


There are
are quite
quite a
a few
few confirations
confirations you'll
you'll need
need to
to add.
add. Adding
Adding them
them might
might look
look something
something like
like the
the command
command below:



dcloud env:var:set
env:var:set production
production BIGCOMMERCE_ACCESS_TOKEN
BIGCOMMERCE_ACCESS_TOKEN [YOUR_ACCESS_TOKEN]



## 5.
5. Deploy
Deploy your
your code


### Find
Find your
your build
build ID


Each commit
commit pushed
pushed to
to your
your repo
repo is
is created
created as
as a
a build.
build. To
To check
check these
these you
you can
can run
run the
the command
command `dcloud
`dcloud build:list`.
build:list`. Take
Take note
note of
of the
the build
build ID
ID for
for the
the build
build you
you want
want to
to deploy.


### Choose
Choose your
your environment


Depending on
on your
your price
price plan
plan you
you may
may have
have multiple
multiple environments
environments (testing,
(testing, production
production etc).
etc). To
To check
check your
your environments
environments run
run `dcloud
`dcloud env:list`.
env:list`. Take
Take note
note of
of the
the name
name of
of the
the environment
environment you
you want
want to
to deploy
deploy to.


### Deploy
Deploy your
your build


To deploy
deploy your
your build
build run
run the
the command
command `dcloud
`dcloud deployment:run
deployment:run [buildId]
[buildId] [environmentName]`
[environmentName]` replacing
replacing `buildId`
`buildId` and
and `environmentName`
`environmentName` with
with the
the values
values above.
above. You
You deployment
deployment should
should be
be very
very quick
quick as
as the
the build
build is
is already
already created.




## Watch
Watch our
our 'how
'how to'
to' video.


<iframe width="560"
width="560" height="315"
height="315" src="https://www.youtube.com/embed/CSrkxZgtY6w?rel=0"
src="https://www.youtube.com/embed/CSrkxZgtY6w?rel=0" frameborder="0"
frameborder="0" allow="accelerometer;
allow="accelerometer; autoplay;
autoplay; encrypted-media;
encrypted-media; gyroscope;
gyroscope; picture-in-picture"
picture-in-picture" allowFullScreen></iframe>


id: deployments

title: Deployments

sidebar_label: Deployments


Completed builds
builds with
with status
status success
success can
can be
be deployed
deployed to
to an
an environment
environment of
of choice.
choice. Simply
Simply click
click the
the deploy
deploy button
button and
and select
select the
the environment
environment to
to deploy
deploy to.


### Rolling
Rolling upgrades

Your build
build will
will be
be deployed
deployed with
with a
a rolling
rolling upgrade
upgrade strategy,
strategy, given
given the
the target
target environment
environment is
is of
of the
the acceptance
acceptance or
or production
production type.
type. In
In that
that case,
case, your
your new
new build
build will
will be
be deployed
deployed alongside
alongside your
your currently
currently deployed
deployed application.
application. Once
Once the
the new
new deployment
deployment has
has completed,
completed, traffic
traffic will
will be
be switched
switched over
over to
to it
it and
and the
the old
old application
application will
will be
be killed.
killed. This
This process
process ensures
ensures your
your application
application has
has 0
0 downtime.
downtime. If
If the
the target
target environment
environment is
is a
a test
test environment,
environment, the
the new
new app
app is
is started
started up
up and
and your
your old
old app
app is
is killed
killed at
at the
the same
same time.
time. This
This means
means there
there is
is a
a slight
slight amount
amount of
of downtime
downtime while
while the
the new
new app
app starts
starts up,
up, typically
typically taking
taking around
around 60-90
60-90 seconds.


id: builds

title: Builds

sidebar_label: Builds


Every git
git push
push event
event on
on your
your repository
repository triggers
triggers an
an event
event to
to the
the Deity
Deity platform.
platform. When
When such
such an
an event
event is
is received,
received, Deity
Deity reads
reads the
the code
code of
of that
that branch
branch and
and initiates
initiates a
a new
new build
build of
of that
that branch.
branch. You
You can
can easily
easily test
test this
this my
my making
making any
any commit
commit to
to your
your repository.
repository. A
A new
new build
build id
id will
will be
be listed
listed in
in your
your build
build listing
listing page,
page, in
in status
status in
in progress.


Various data
data of
of builds
builds are
are displayed
displayed in
in the
the table.
table. Each
Each build
build has
has its
its own
own ID,
ID, which
which is
is incremented
incremented by
by 1
1 for
for each
each new
new build.
build. You
You can
can see
see from
from which
which branch
branch the
the code
code was
was pulled
pulled for
for a
a particular
particular build,
build, and
and who
who wrote
wrote the
the commit
commit that
that triggered
triggered the
the build.
build. Click
Click Details
Details to
to view
view a
a detailed
detailed build
build log.


Furthermore, you
you can
can see
see the
the duration
duration of
of the
the build
build and
and its
its status.
 

### Build
Build status

Each successful
successful build
build can
can be
be deployed
deployed to
to the
the environment
environment of
of your
your choice.


If a
a build
build has
has failed,
failed, it
it can
can have
have various
various reasons.
reasons. You
You can
can inspect
inspect the
the build
build output
output by
by clicking
clicking Details.
Details. In
In case
case it
it timed
timed out,
out, the
the first
first thing
thing to
to try
try is
is restart
restart the
the build.
build. You
You can
can do
do so
so by
by navigating
navigating to
to the
the build
build list
list page
page and
and clicking
clicking restart.
restart. In
In case
case that
that does
does not
not resolve
resolve the
the issue,
issue, please
please inspect
inspect the
the build
build logs
logs for
for any
any specific
specific errors,
errors, such
such as
as a
a mismatch
mismatch in
in configuration
configuration variables.



id: payments

title: Payments

sidebar_label: Payments



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';



The Deity
Deity platform
platform comes
comes with
with access
access to
to our
our payment
payment gateway
gateway out
out of
of the
the box.
box. You
You can
can configure
configure one
one or
or more
more payment
payment service
service providers
providers and
and select
select which
which methods
methods you
you want
want to
to use.
use. The
The Deity
Deity payment
payment gateway
gateway is
is highly
highly configurable,
configurable, allowing
allowing you
you to
to define
define rules
rules so
so that
that you
you can
can personalize
personalize the
the checkout
checkout experience
experience based
based on
on shopper
shopper data
data such
such as
as country,
country, currency
currency and
and order
order value.
value. Your
Your composer
composer application
application has
has an
an integration
integration with
with the
the payment
payment gateway
gateway out
out of
of the
the box,
box, and
and is
is compatible
compatible with
with all
all the
the supported
supported ecommerce
ecommerce platforms.


The payment
payment gateway
gateway has
has several
several components,
components, most
most notably
notably the
the Integration
Integration API
API and
and Message
Message Queue.
Queue. Your
Your Composer
Composer application
application interfaces
interfaces with
with both
both of
of these
these components.
components. Broadly
Broadly speaking,
speaking, you
you consume
consume the
the integration
integration API
API to
to make
make new
new payments,
payments, list
list payment
payment methods
methods or
or receive
receive webhook
webhook events.
events. The
The message
message queue
queue in
in turn
turn receives
receives updates
updates -
- and
and notifies
notifies your
your Composer
Composer application
application -
- from
from the
the various
various payment
payment service
service providers,
providers, such
such as
as payment
payment status
status changes.


[ image
image schema
schema ]


:::info Note

The following
following links
links are
are available
available in
in your
your Deity
Deity Cloud
Cloud Console
Console depending
depending on
on your
your assigned
assigned user
user role.




### Please
Please select
select a
a topic

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/payments/profiles">

<img src="/img/icons/userlist.svg"
src="/img/icons/userlist.svg" />




<Card to="/console/payments/providers">

<img src="/img/icons/money.svg"
src="/img/icons/money.svg" />




<Card to="/console/payments/payment-methods">

<img src="/img/icons/paymentmethod.svg"
src="/img/icons/paymentmethod.svg" />

<h4>Payment Methods</h4>





id: composer

title: Composer

sidebar_label: Composer



import Badge
Badge from
from '@site/src/components/Badge';

import {
{ Card,
Card, CardContent
CardContent }
} from
from '@site/src/components/Card';


Deity is
is the
the endlessly
endlessly flexible
flexible commerce
commerce composer
composer providing
providing the
the utmost
utmost customer
customer centric
centric approach
approach to
to any
any fast-growing
fast-growing and
and forward
forward thinking
thinking ecommerce
ecommerce merchant.
merchant. Deity
Deity Commerce
Commerce Composer
Composer splits
splits your
your commerce
commerce into
into domain-specific
domain-specific modules.
modules. Pick
Pick the
the integrations
integrations you
you want,
want, integrate
integrate with
with other
other external
external services,
services, and
and customize
customize and
and extend
extend these
these to
to fit
fit your
your needs.


:::info Note

The following
following links
links are
are available
available in
in your
your Deity
Deity Cloud
Cloud Console
Console depending
depending on
on your
your assigned
assigned user
user role.



### Please
Please select
select a
a topic

<div className="flex
className="flex mb80
mb80 brighten">

<Card to="/console/composer/integrations">

<img src="/img/icons/composerintegrations.svg"
src="/img/icons/composerintegrations.svg" />




<Card to="/console/composer/variables">

<img src="/img/icons/variables.svg"
src="/img/icons/variables.svg" />





